<xml encoding="UTF-8" version="1.0"><results version="2"><errors><error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__char_new_use_14.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__char_new_use_14.cpp" line="29" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__char_pointer_malloc_use_17.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__char_pointer_malloc_use_17.c" line="27" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__class_pointer_new_use_09.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__class_pointer_new_use_09.cpp" line="29" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int64_t_alloca_use_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int64_t_alloca_use_12.c" line="25" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int64_t_alloca_use_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int64_t_alloca_use_12.c" line="34" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int64_t_alloca_use_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int64_t_alloca_use_12.c" line="56" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int64_t_alloca_use_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int64_t_alloca_use_12.c" line="69" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int64_t_malloc_use_18.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int64_t_malloc_use_18.c" line="26" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int64_t_new_use_16.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int64_t_new_use_16.cpp" line="29" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_malloc_use_15.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_malloc_use_15.c" line="27" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_malloc_use_17.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_malloc_use_17.c" line="27" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_pointer_alloca_use_02.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_pointer_alloca_use_02.c" line="25" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_pointer_alloca_use_02.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_pointer_alloca_use_02.c" line="48" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_pointer_alloca_use_02.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_pointer_alloca_use_02.c" line="68" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_pointer_malloc_use_17.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_pointer_malloc_use_17.c" line="27" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_pointer_malloc_use_18.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_pointer_malloc_use_18.c" line="26" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_pointer_new_use_07.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__int_pointer_new_use_07.cpp" line="34" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__long_alloca_use_04.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__long_alloca_use_04.c" line="31" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__long_alloca_use_04.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__long_alloca_use_04.c" line="54" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__long_alloca_use_04.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__long_alloca_use_04.c" line="72" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__long_malloc_use_01.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__long_malloc_use_01.c" line="24" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__long_malloc_use_11.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__long_malloc_use_11.c" line="26" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__long_malloc_use_17.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__long_malloc_use_17.c" line="27" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__long_new_use_13.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__long_new_use_13.cpp" line="29" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_alloca_use_04.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_alloca_use_04.c" line="31" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_alloca_use_04.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_alloca_use_04.c" line="55" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_alloca_use_04.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_alloca_use_04.c" line="75" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_malloc_use_11.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_malloc_use_11.c" line="26" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_pointer_alloca_use_05.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_pointer_alloca_use_05.c" line="31" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_pointer_alloca_use_05.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_pointer_alloca_use_05.c" line="55" />
        </error>
        <error id="allocaCalled" msg="Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead." severity="warning" verbose="The obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca).">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_pointer_alloca_use_05.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_pointer_alloca_use_05.c" line="77" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_pointer_new_use_04.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__struct_pointer_new_use_04.cpp" line="35" />
        </error>
        <error cwe="908" id="uninitdata" msg="Memory is allocated but not initialized: pointer" severity="error" verbose="Memory is allocated but not initialized: pointer">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_13.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE758_Undefined_Behavior\CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_13.c" line="26" />
        </error>
        <error cwe="685" id="wrongPrintfScanfArgNum" msg="sprintf format string requires 2 parameters but only 1 is given." severity="error" verbose="sprintf format string requires 2 parameters but only 1 is given.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE685_Function_Call_With_Incorrect_Number_of_Arguments\CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_04.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE685_Function_Call_With_Incorrect_Number_of_Arguments\CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_04.c" line="36" />
        </error>
        <error cwe="685" id="wrongPrintfScanfArgNum" msg="sprintf format string requires 2 parameters but only 1 is given." severity="error" verbose="sprintf format string requires 2 parameters but only 1 is given.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE685_Function_Call_With_Incorrect_Number_of_Arguments\CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_16.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE685_Function_Call_With_Incorrect_Number_of_Arguments\CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_16.c" line="30" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="28" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="33" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="50" />
        </error>
        <error cwe="570" id="knownConditionTrueFalse" msg="Condition '5!=5' is always false" severity="style" verbose="Condition '5!=5' is always false">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="55" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="79" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="84" />
        </error>
        <error cwe="570" id="knownConditionTrueFalse" msg="Condition '5!=5' is always false" severity="style" verbose="Condition '5!=5' is always false">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="103" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="118" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="131" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="141" />
        </error>
        <error cwe="476" id="nullPointer" msg="Possible null pointer dereference: data" severity="warning" verbose="Possible null pointer dereference: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="36" />
        </error>
        <error cwe="563" id="redundantAssignment" msg="Variable 'tmpData.intOne' is reassigned a value before the old one has been used." severity="style" verbose="Variable 'tmpData.intOne' is reassigned a value before the old one has been used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="113" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="112" />
        </error>
        <error cwe="563" id="redundantAssignment" msg="Variable 'tmpData.intOne' is reassigned a value before the old one has been used." severity="style" verbose="Variable 'tmpData.intOne' is reassigned a value before the old one has been used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="136" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="135" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="28" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="28" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="33" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="33" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="50" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="50" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '!='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="55" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="55" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="79" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="79" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="84" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="84" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '!='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="103" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="103" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="118" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="118" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="131" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="131" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="141" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_03.cpp" line="141" />
        </error>
        <error cwe="563" id="redundantAssignment" msg="Variable 'tmpData.intOne' is reassigned a value before the old one has been used." severity="style" verbose="Variable 'tmpData.intOne' is reassigned a value before the old one has been used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" line="37" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" line="36" />
        </error>
        <error cwe="563" id="redundantAssignment" msg="Variable 'tmpData.intOne' is reassigned a value before the old one has been used." severity="style" verbose="Variable 'tmpData.intOne' is reassigned a value before the old one has been used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" line="123" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" line="122" />
        </error>
        <error cwe="563" id="redundantAssignment" msg="Variable 'tmpData.intOne' is reassigned a value before the old one has been used." severity="style" verbose="Variable 'tmpData.intOne' is reassigned a value before the old one has been used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" line="133" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" line="132" />
        </error>
        <error cwe="398" id="duplicateBranch" inconclusive="true" msg="Found duplicate branches for 'if' and 'else'." severity="style" verbose="Finding the same code in an 'if' and related 'else' branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" line="74" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" line="79" />
        </error>
        <error cwe="398" id="duplicateBranch" inconclusive="true" msg="Found duplicate branches for 'if' and 'else'." severity="style" verbose="Finding the same code in an 'if' and related 'else' branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" line="84" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" line="97" />
        </error>
        <error cwe="398" id="duplicateBranch" inconclusive="true" msg="Found duplicate branches for 'if' and 'else'." severity="style" verbose="Finding the same code in an 'if' and related 'else' branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" line="118" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" line="128" />
        </error>
        <error cwe="398" id="duplicateBranch" inconclusive="true" msg="Found duplicate branches for 'if' and 'else'." severity="style" verbose="Finding the same code in an 'if' and related 'else' branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" line="138" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__class_12.cpp" line="145" />
        </error>
        <error cwe="563" id="redundantAssignment" msg="Variable 'data' is reassigned a value before the old one has been used." severity="style" verbose="Variable 'data' is reassigned a value before the old one has been used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" line="32" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" line="30" />
        </error>
        <error cwe="563" id="redundantAssignment" msg="Variable 'data' is reassigned a value before the old one has been used." severity="style" verbose="Variable 'data' is reassigned a value before the old one has been used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" line="77" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" line="75" />
        </error>
        <error cwe="665" id="unassignedVariable" msg="Variable 'data' is not assigned a value." severity="style" verbose="Variable 'data' is not assigned a value.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" line="26" />
        </error>
        <error cwe="665" id="unassignedVariable" msg="Variable 'data' is not assigned a value." severity="style" verbose="Variable 'data' is not assigned a value.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" line="49" />
        </error>
        <error cwe="563" id="unreadVariable" msg="Variable 'tmpData' is assigned a value that is never used." severity="style" verbose="Variable 'tmpData' is assigned a value that is never used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" line="56" />
        </error>
        <error cwe="665" id="unassignedVariable" msg="Variable 'data' is not assigned a value." severity="style" verbose="Variable 'data' is not assigned a value.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" line="71" />
        </error>
        <error cwe="825" id="deadpointer" msg="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 57." severity="error" verbose="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 57.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_32.c" line="59" />
        </error>
        <error cwe="825" id="deadpointer" msg="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 48." severity="error" verbose="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 48.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_54a.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int64_t_54a.c" line="50" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="27" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="32" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="47" />
        </error>
        <error cwe="570" id="knownConditionTrueFalse" msg="Condition '5!=5' is always false" severity="style" verbose="Condition '5!=5' is always false">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="52" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="75" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="80" />
        </error>
        <error cwe="570" id="knownConditionTrueFalse" msg="Condition '5!=5' is always false" severity="style" verbose="Condition '5!=5' is always false">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="98" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="111" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="122" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="130" />
        </error>
        <error cwe="476" id="nullPointer" msg="Possible null pointer dereference: data" severity="warning" verbose="Possible null pointer dereference: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="35" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="27" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="27" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="32" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="32" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="47" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="47" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '!='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="52" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="52" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="75" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="75" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="80" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="80" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '!='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="98" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="98" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="111" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="111" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="122" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="122" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="130" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="130" />
        </error>
        <error cwe="825" id="deadpointer" msg="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 108." severity="error" verbose="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 108.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="114" />
        </error>
        <error cwe="825" id="deadpointer" msg="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 127." severity="error" verbose="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 127.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__int_03.c" line="133" />
        </error>
        <error cwe="476" id="nullPointer" msg="Possible null pointer dereference: data" severity="warning" verbose="Possible null pointer dereference: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__long_02.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__long_02.c" line="35" />
        </error>
        <error cwe="825" id="deadpointer" msg="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 108." severity="error" verbose="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 108.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__long_02.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__long_02.c" line="114" />
        </error>
        <error cwe="825" id="deadpointer" msg="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 127." severity="error" verbose="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 127.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__long_02.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__long_02.c" line="133" />
        </error>
        <error cwe="825" id="deadpointer" msg="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 48." severity="error" verbose="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 48.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__long_52a.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__long_52a.c" line="50" />
        </error>
        <error cwe="825" id="deadpointer" msg="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 115." severity="error" verbose="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 115.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__struct_06.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__struct_06.c" line="121" />
        </error>
        <error cwe="825" id="deadpointer" msg="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 136." severity="error" verbose="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 136.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__struct_06.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__struct_06.c" line="142" />
        </error>
        <error cwe="825" id="deadpointer" msg="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 54." severity="error" verbose="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 54.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__struct_33.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__struct_33.cpp" line="57" />
        </error>
        <error cwe="825" id="deadpointer" msg="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 54." severity="error" verbose="Dead pointer usage. Pointer 'data' is dead if it has been assigned '&amp;tmpData' at line 54.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__struct_33.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__struct_33.cpp" line="59" />
        </error>
        <error cwe="476" id="nullPointer" msg="Possible null pointer dereference: data" severity="warning" verbose="Possible null pointer dereference: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__wchar_t_15.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE476_NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__wchar_t_15.c" line="43" />
        </error>
        <error cwe="398" id="postfixOperator" msg="Prefer prefix ++/-- operators for non-primitive types." severity="performance" verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE672_Operation_on_Resource_After_Expiration_or_Release\CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_66b.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE672_Operation_on_Resource_After_Expiration_or_Release\CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_66b.cpp" line="38" />
        </error>
        <error cwe="398" id="postfixOperator" msg="Prefer prefix ++/-- operators for non-primitive types." severity="performance" verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE672_Operation_on_Resource_After_Expiration_or_Release\CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_66b.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE672_Operation_on_Resource_After_Expiration_or_Release\CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_66b.cpp" line="62" />
        </error>
        <error cwe="398" id="postfixOperator" msg="Prefer prefix ++/-- operators for non-primitive types." severity="performance" verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE672_Operation_on_Resource_After_Expiration_or_Release\CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_66b.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE672_Operation_on_Resource_After_Expiration_or_Release\CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_66b.cpp" line="82" />
        </error>
        <error cwe="398" id="duplicateBranch" inconclusive="true" msg="Found duplicate branches for 'if' and 'else'." severity="style" verbose="Finding the same code in an 'if' and related 'else' branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE482_Comparing_Instead_of_Assigning\CWE482_Comparing_Instead_of_Assigning__basic_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE482_Comparing_Instead_of_Assigning\CWE482_Comparing_Instead_of_Assigning__basic_12.c" line="53" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE482_Comparing_Instead_of_Assigning\CWE482_Comparing_Instead_of_Assigning__basic_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE482_Comparing_Instead_of_Assigning\CWE482_Comparing_Instead_of_Assigning__basic_12.c" line="64" />
        </error>
        <error cwe="482" id="suspiciousEqualityComparison" inconclusive="true" msg="Found suspicious equality comparison. Did you intend to assign a value instead?" severity="warning" verbose="Found suspicious equality comparison. Did you intend to assign a value instead?">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE482_Comparing_Instead_of_Assigning\CWE482_Comparing_Instead_of_Assigning__basic_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE482_Comparing_Instead_of_Assigning\CWE482_Comparing_Instead_of_Assigning__basic_12.c" line="29" />
        </error>
        <error cwe="570" id="unsignedLessThanZero" msg="Checking if unsigned variable 'uIntBad' is less than zero." severity="style" verbose="The unsigned variable 'uIntBad' will never be negative so it is either pointless or an error to check if it is.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE570_Expression_Always_False\CWE570_Expression_Always_False__unsigned_int_01.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE570_Expression_Always_False\CWE570_Expression_Always_False__unsigned_int_01.c" line="16" />
        </error>
        <error cwe="398" id="duplicateBranch" inconclusive="true" msg="Found duplicate branches for 'if' and 'else'." severity="style" verbose="Finding the same code in an 'if' and related 'else' branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__char_fread_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__char_fread_12.c" line="60" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__char_fread_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__char_fread_12.c" line="74" />
        </error>
        <error cwe="563" id="redundantAssignment" msg="Variable 'fConnected' is reassigned a value before the old one has been used." severity="style" verbose="Variable 'fConnected' is reassigned a value before the old one has been used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_06.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_06.c" line="52" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_06.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_06.c" line="39" />
        </error>
        <error cwe="563" id="unreadVariable" msg="Variable 'fConnected' is assigned a value that is never used." severity="style" verbose="Variable 'fConnected' is assigned a value that is never used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_06.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_06.c" line="52" />
        </error>
        <error cwe="563" id="unreadVariable" msg="Variable 'fConnected' is assigned a value that is never used." severity="style" verbose="Variable 'fConnected' is assigned a value that is never used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_06.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_06.c" line="94" />
        </error>
        <error cwe="563" id="unreadVariable" msg="Variable 'fConnected' is assigned a value that is never used." severity="style" verbose="Variable 'fConnected' is assigned a value that is never used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_06.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_06.c" line="127" />
        </error>
        <error cwe="398" id="duplicateBranch" inconclusive="true" msg="Found duplicate branches for 'if' and 'else'." severity="style" verbose="Finding the same code in an 'if' and related 'else' branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__w32ImpersonateSelf_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__w32ImpersonateSelf_12.c" line="47" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__w32ImpersonateSelf_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE252_Unchecked_Return_Value\CWE252_Unchecked_Return_Value__w32ImpersonateSelf_12.c" line="55" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__malloc_free_struct_04.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__malloc_free_struct_04.c" line="64" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__malloc_free_struct_04.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__malloc_free_struct_04.c" line="98" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__malloc_free_wchar_t_07.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__malloc_free_wchar_t_07.c" line="57" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__malloc_free_wchar_t_07.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__malloc_free_wchar_t_07.c" line="85" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="32" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="45" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="63" />
        </error>
        <error cwe="570" id="knownConditionTrueFalse" msg="Condition '5!=5' is always false" severity="style" verbose="Condition '5!=5' is always false">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="76" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="96" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="109" />
        </error>
        <error cwe="570" id="knownConditionTrueFalse" msg="Condition '5!=5' is always false" severity="style" verbose="Condition '5!=5' is always false">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="124" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="141" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="155" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="167" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="32" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="32" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="45" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="45" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="63" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="63" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '!='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="76" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="76" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="96" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="96" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="109" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="109" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '!='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="124" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="124" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="141" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="141" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="155" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="155" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="167" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="167" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="60" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="93" />
        </error>
        <error cwe="401" id="memleak" msg="Memory leak: data" severity="error" verbose="Memory leak: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="147" />
        </error>
        <error cwe="401" id="memleak" msg="Memory leak: data" severity="error" verbose="Memory leak: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_03.cpp" line="173" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_05.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_05.cpp" line="66" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_05.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_05.cpp" line="99" />
        </error>
        <error cwe="401" id="memleak" msg="Memory leak: data" severity="error" verbose="Memory leak: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_05.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_05.cpp" line="153" />
        </error>
        <error cwe="401" id="memleak" msg="Memory leak: data" severity="error" verbose="Memory leak: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_05.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_int_05.cpp" line="179" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_wchar_t_14.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_wchar_t_14.cpp" line="54" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_wchar_t_14.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_array_wchar_t_14.cpp" line="82" />
        </error>
        <error cwe="563" id="unreadVariable" msg="Variable 'data' is assigned a value that is never used." severity="style" verbose="Variable 'data' is assigned a value that is never used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_struct_63b.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_struct_63b.cpp" line="51" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_wchar_t_09.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_wchar_t_09.cpp" line="54" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_wchar_t_09.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_wchar_t_09.cpp" line="81" />
        </error>
        <error cwe="401" id="memleak" msg="Memory leak: data" severity="error" verbose="Memory leak: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_wchar_t_09.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_wchar_t_09.cpp" line="123" />
        </error>
        <error cwe="401" id="memleak" msg="Memory leak: data" severity="error" verbose="Memory leak: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_wchar_t_09.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__new_delete_wchar_t_09.cpp" line="143" />
        </error>
        <error cwe="398" id="duplicateBranch" inconclusive="true" msg="Found duplicate branches for 'if' and 'else'." severity="style" verbose="Finding the same code in an 'if' and related 'else' branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" line="102" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" line="114" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'i' can be reduced." severity="style" verbose="The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" line="20" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'j' can be reduced." severity="style" verbose="The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" line="21" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'reversedString' can be reduced." severity="style" verbose="The scope of the variable 'reversedString' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" line="22" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'i' can be reduced." severity="style" verbose="The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" line="44" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'j' can be reduced." severity="style" verbose="The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" line="45" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'reversedString' can be reduced." severity="style" verbose="The scope of the variable 'reversedString' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_12.c" line="46" />
        </error>
        <error cwe="686" id="invalidPrintfArgType_s" msg="%s in format string (no. 1) requires 'char *' but the argument type is 'int'." severity="warning" verbose="%s in format string (no. 1) requires 'char *' but the argument type is 'int'.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument\CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument\CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_12.c" line="30" />
        </error>
        <error cwe="398" id="duplicateBranch" inconclusive="true" msg="Found duplicate branches for 'if' and 'else'." severity="style" verbose="Finding the same code in an 'if' and related 'else' branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__freopen_w32_close_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__freopen_w32_close_12.c" line="59" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__freopen_w32_close_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__freopen_w32_close_12.c" line="67" />
        </error>
        <error cwe="563" id="redundantAssignment" msg="Variable 'data' is reassigned a value before the old one has been used." severity="style" verbose="Variable 'data' is reassigned a value before the old one has been used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_44.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_44.c" line="49" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_44.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_44.c" line="47" />
        </error>
        <error cwe="563" id="redundantAssignment" msg="Variable 'data' is reassigned a value before the old one has been used." severity="style" verbose="Variable 'data' is reassigned a value before the old one has been used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_44.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_44.c" line="75" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_44.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_44.c" line="73" />
        </error>
        <error cwe="563" id="redundantAssignment" msg="Variable 'data' is reassigned a value before the old one has been used." severity="style" verbose="Variable 'data' is reassigned a value before the old one has been used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_73a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_73a.cpp" line="46" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_73a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_73a.cpp" line="44" />
        </error>
        <error cwe="563" id="redundantAssignment" msg="Variable 'data' is reassigned a value before the old one has been used." severity="style" verbose="Variable 'data' is reassigned a value before the old one has been used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_73a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_73a.cpp" line="68" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_73a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_73a.cpp" line="66" />
        </error>
        <error cwe="563" id="redundantAssignment" msg="Variable 'data' is reassigned a value before the old one has been used." severity="style" verbose="Variable 'data' is reassigned a value before the old one has been used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_82a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_82a.cpp" line="33" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_82a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_82a.cpp" line="31" />
        </error>
        <error cwe="563" id="redundantAssignment" msg="Variable 'data' is reassigned a value before the old one has been used." severity="style" verbose="Variable 'data' is reassigned a value before the old one has been used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_82a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_82a.cpp" line="50" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_82a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE404_Improper_Resource_Shutdown\CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_82a.cpp" line="48" />
        </error>
        <error cwe="563" id="unreadVariable" msg="Variable 'data' is assigned a value that is never used." severity="style" verbose="Variable 'data' is assigned a value that is never used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE775_Missing_Release_of_File_Descriptor_or_Handle\CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_73b.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE775_Missing_Release_of_File_Descriptor_or_Handle\CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_73b.cpp" line="30" />
        </error>
        <error cwe="563" id="unreadVariable" msg="Variable 'data' is assigned a value that is never used." severity="style" verbose="Variable 'data' is assigned a value that is never used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE775_Missing_Release_of_File_Descriptor_or_Handle\CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_72b.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE775_Missing_Release_of_File_Descriptor_or_Handle\CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_72b.cpp" line="32" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" line="22" />
        </error>
        <error cwe="570" id="knownConditionTrueFalse" msg="Condition '5!=5' is always false" severity="style" verbose="Condition '5!=5' is always false">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" line="42" />
        </error>
        <error cwe="571" id="knownConditionTrueFalse" msg="Condition '5==5' is always true" severity="style" verbose="Condition '5==5' is always true">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" line="63" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" line="22" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" line="22" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '!='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" line="42" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" line="42" />
        </error>
        <error cwe="398" id="duplicateExpression" msg="Same expression on both sides of '=='." severity="style" verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" line="63" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" line="63" />
        </error>
        <error cwe="467" id="pointerSize" msg="Size of pointer 'badChar' used instead of size of its data." severity="warning" verbose="Size of pointer 'badChar' used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write 'sizeof(*badChar)'.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" line="27" />
        </error>
        <error cwe="467" id="pointerSize" msg="Size of pointer 'badShort' used instead of size of its data." severity="warning" verbose="Size of pointer 'badShort' used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write 'sizeof(*badShort)'.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__short_01.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__short_01.c" line="25" />
        </error>
        <error cwe="467" id="pointerSize" msg="Size of pointer 'badShort' used instead of size of its data." severity="warning" verbose="Size of pointer 'badShort' used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write 'sizeof(*badShort)'.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__short_13.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE467_Use_of_sizeof_on_Pointer_Type\CWE467_Use_of_sizeof_on_Pointer_Type__short_13.c" line="27" />
        </error>
        <error cwe="398" id="duplicateBranch" inconclusive="true" msg="Found duplicate branches for 'if' and 'else'." severity="style" verbose="Finding the same code in an 'if' and related 'else' branch is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE398_Poor_Code_Quality\CWE398_Poor_Code_Quality__empty_else_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE398_Poor_Code_Quality\CWE398_Poor_Code_Quality__empty_else_12.c" line="64" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE398_Poor_Code_Quality\CWE398_Poor_Code_Quality__empty_else_12.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE398_Poor_Code_Quality\CWE398_Poor_Code_Quality__empty_else_12.c" line="81" />
        </error>
        <error cwe="398" id="uninitMemberVar" msg="Member variable 'BadClass::id' is not initialized in the constructor." severity="warning" verbose="Member variable 'BadClass::id' is not initialized in the constructor.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_class_member_variable_01_bad.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_class_member_variable_01_bad.cpp" line="16" />
        </error>
        <error cwe="398" id="functionStatic" inconclusive="true" msg="Technically the member function 'CWE563_Unused_Variable__unused_class_member_variable_01::BadClass::printMembers' can be static." severity="performance" verbose="The member function 'CWE563_Unused_Variable__unused_class_member_variable_01::BadClass::printMembers' can be made a static function. Making a function static can bring a performance benefit since no 'this' instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances?">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_class_member_variable_01_bad.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_class_member_variable_01_bad.cpp" line="21" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_char_11.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_char_11.c" line="43" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_char_11.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_char_11.c" line="61" />
        </error>
        <error cwe="563" id="unreadVariable" msg="Variable 'data' is assigned a value that is never used." severity="style" verbose="Variable 'data' is assigned a value that is never used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_char_11.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_char_11.c" line="27" />
        </error>
        <error cwe="563" id="unreadVariable" msg="Variable 'data' is assigned a value that is never used." severity="style" verbose="Variable 'data' is assigned a value that is never used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_int64_t_74b.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_int64_t_74b.cpp" line="32" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_int_08.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_int_08.c" line="56" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_int_08.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_int_08.c" line="74" />
        </error>
        <error cwe="563" id="unreadVariable" msg="Variable 'data' is assigned a value that is never used." severity="style" verbose="Variable 'data' is assigned a value that is never used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_int_08.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_int_08.c" line="40" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_long_09.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_long_09.c" line="43" />
        </error>
        <error cwe="398" id="variableScope" msg="The scope of the variable 'data' can be reduced." severity="style" verbose="The scope of the variable 'data' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it's safe to move 'int i = 0;' here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move 'int i = 0;' here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_long_09.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_long_09.c" line="61" />
        </error>
        <error cwe="563" id="unreadVariable" msg="Variable 'data' is assigned a value that is never used." severity="style" verbose="Variable 'data' is assigned a value that is never used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_long_09.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_long_09.c" line="27" />
        </error>
        <error cwe="563" id="unreadVariable" msg="Variable 'data' is assigned a value that is never used." severity="style" verbose="Variable 'data' is assigned a value that is never used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_long_74b.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_init_variable_long_74b.cpp" line="32" />
        </error>
        <error cwe="908" id="uninitvar" msg="Uninitialized variable: data" severity="error" verbose="Uninitialized variable: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_22a.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_22a.c" line="34" />
        </error>
        <error cwe="908" id="uninitvar" msg="Uninitialized variable: data" severity="error" verbose="Uninitialized variable: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_22a.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_22a.c" line="54" />
        </error>
        <error cwe="908" id="uninitvar" msg="Uninitialized variable: data" severity="error" verbose="Uninitialized variable: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_22a.c" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_22a.c" line="66" />
        </error>
        <error cwe="665" id="unassignedVariable" msg="Variable 'data' is not assigned a value." severity="style" verbose="Variable 'data' is not assigned a value.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" line="34" />
        </error>
        <error cwe="665" id="unassignedVariable" msg="Variable 'data' is not assigned a value." severity="style" verbose="Variable 'data' is not assigned a value.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" line="54" />
        </error>
        <error cwe="908" id="uninitvar" msg="Uninitialized variable: data" severity="error" verbose="Uninitialized variable: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" line="39" />
        </error>
        <error cwe="908" id="uninitvar" msg="Uninitialized variable: data" severity="error" verbose="Uninitialized variable: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" line="40" />
        </error>
        <error cwe="908" id="uninitvar" msg="Uninitialized variable: data" severity="error" verbose="Uninitialized variable: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" line="41" />
        </error>
        <error cwe="908" id="uninitvar" msg="Uninitialized variable: data" severity="error" verbose="Uninitialized variable: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" line="58" />
        </error>
        <error cwe="908" id="uninitvar" msg="Uninitialized variable: data" severity="error" verbose="Uninitialized variable: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" line="59" />
        </error>
        <error cwe="908" id="uninitvar" msg="Uninitialized variable: data" severity="error" verbose="Uninitialized variable: data">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" line="60" />
        </error>
        <error cwe="563" id="unreadVariable" msg="Variable 'data' is assigned a value that is never used." severity="style" verbose="Variable 'data' is assigned a value that is never used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_struct_33.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_struct_33.cpp" line="33" />
        </error>
        <error cwe="563" id="unreadVariable" msg="Variable 'data' is assigned a value that is never used." severity="style" verbose="Variable 'data' is assigned a value that is never used.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_struct_33.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_struct_33.cpp" line="52" />
        </error>
        <error cwe="908" id="uninitStructMember" msg="Uninitialized struct member: data.intOne" severity="error" verbose="Uninitialized struct member: data.intOne">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_struct_33.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_struct_33.cpp" line="33" />
        </error>
        <error cwe="908" id="uninitStructMember" msg="Uninitialized struct member: data.intTwo" severity="error" verbose="Uninitialized struct member: data.intTwo">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_struct_33.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_struct_33.cpp" line="33" />
        </error>
        <error cwe="908" id="uninitStructMember" msg="Uninitialized struct member: data.intOne" severity="error" verbose="Uninitialized struct member: data.intOne">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_struct_33.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_struct_33.cpp" line="52" />
        </error>
        <error cwe="908" id="uninitStructMember" msg="Uninitialized struct member: data.intTwo" severity="error" verbose="Uninitialized struct member: data.intTwo">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_struct_33.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_uninit_variable_struct_33.cpp" line="52" />
        </error>
        <error cwe="563" id="redundantAssignment" inconclusive="true" msg="Variable 'data' is reassigned a value before the old one has been used if variable is no semaphore variable." severity="style" verbose="Variable 'data' is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_value_char_84_goodG2B.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_value_char_84_goodG2B.cpp" line="28" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_value_char_84_goodG2B.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_value_char_84_goodG2B.cpp" line="26" />
        </error>
        <error cwe="563" id="redundantAssignment" inconclusive="true" msg="Variable 'data' is reassigned a value before the old one has been used if variable is no semaphore variable." severity="style" verbose="Variable 'data' is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_value_int64_t_84_goodG2B.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_value_int64_t_84_goodG2B.cpp" line="28" />
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_value_int64_t_84_goodG2B.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_value_int64_t_84_goodG2B.cpp" line="26" />
        </error>
        <error cwe="398" id="useInitializationList" msg="Variable 'data' is assigned in constructor body. Consider performing initialization in initialization list." severity="performance" verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don't explicitly write them to the initialization list. You could avoid assigning 'data' a value by passing the value to the constructor in the initialization list.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_value_struct_83_bad.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_value_struct_83_bad.cpp" line="26" />
        </error>
        <error cwe="398" id="useInitializationList" msg="Variable 'data' is assigned in constructor body. Consider performing initialization in initialization list." severity="performance" verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don't explicitly write them to the initialization list. You could avoid assigning 'data' a value by passing the value to the constructor in the initialization list.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_value_struct_84_goodB2G.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_value_struct_84_goodB2G.cpp" line="26" />
        </error>
        <error cwe="686" id="invalidPrintfArgType_int" msg="%lx in format string (no. 1) requires 'unsigned long' but the argument type is 'wchar_t'." severity="warning" verbose="%lx in format string (no. 1) requires 'unsigned long' but the argument type is 'wchar_t'.">
            <location file="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_value_wchar_t_81_goodB2G.cpp" file0="C:\Juliet_Test_Suite_v1.2_for_C_Cpp\testcases\CWE563_Unused_Variable\CWE563_Unused_Variable__unused_value_wchar_t_81_goodB2G.cpp" line="28" />
        </error>
        </errors><cppcheck version="1.76.1" /></results></xml>