<?xml version="1.0" encoding="utf-8"?>
<container>
  <testcase id="92088" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/088/CWE252_Unchecked_Return_Value__char_fgets_01.c" language="C" size="2485" checksum="1cbba0cf6098b771dcb9f22816900cada866931c">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92089" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/089/CWE252_Unchecked_Return_Value__char_fgets_02.c" language="C" size="3521" checksum="c87dc4d62fc6ea648f54f98ade8ea3ceebf666ba">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92090" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/090/CWE252_Unchecked_Return_Value__char_fgets_03.c" language="C" size="3542" checksum="940053829e549f423924efacb095f43251d5a0be">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92091" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/091/CWE252_Unchecked_Return_Value__char_fgets_04.c" language="C" size="3907" checksum="c2fc94e659f560b44110086c3c5ee50d1d24610e">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92092" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/092/CWE252_Unchecked_Return_Value__char_fgets_05.c" language="C" size="3878" checksum="044b7ac09386ccd01338c2fd827d726e1ef31dfe">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92093" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/093/CWE252_Unchecked_Return_Value__char_fgets_06.c" language="C" size="3848" checksum="535bd5a678e73bf60f2f62c21c5d194f28b6a7ed">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92094" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/094/CWE252_Unchecked_Return_Value__char_fgets_07.c" language="C" size="3828" checksum="895b6e7aaa94a9b0283c2caaa7a993298faced7c">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92095" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/095/CWE252_Unchecked_Return_Value__char_fgets_08.c" language="C" size="3928" checksum="38e53aa4ea02730ba8eb40a9120df050fcfa5146">
      <mixed line="48" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92096" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/096/CWE252_Unchecked_Return_Value__char_fgets_09.c" language="C" size="3636" checksum="96e7326f66ee6d4e0b36abe7c5430d9395cbb384">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92097" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/097/CWE252_Unchecked_Return_Value__char_fgets_10.c" language="C" size="3587" checksum="f0ef0c574297f3b61ca9db4a948d7001a67634bf">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92098" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/098/CWE252_Unchecked_Return_Value__char_fgets_11.c" language="C" size="3650" checksum="3a95e2a575c21d08cc635a4ec84c8383627e4d93">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92099" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/099/CWE252_Unchecked_Return_Value__char_fgets_12.c" language="C" size="3952" checksum="7c39cdfde0ee6ab1976eb024d697d5a336f4e521">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92100" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/100/CWE252_Unchecked_Return_Value__char_fgets_13.c" language="C" size="3654" checksum="a9e9dee10715704b8a7015fa28ddcb7e115e5e26">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92101" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/101/CWE252_Unchecked_Return_Value__char_fgets_14.c" language="C" size="3605" checksum="d5d940f4fc2610f41c8da56788ef066091db8808">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92102" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/102/CWE252_Unchecked_Return_Value__char_fgets_15.c" language="C" size="3754" checksum="68393a9fd641f5f6fa1a3eeeea28cc88dbbb2c02">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92103" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/103/CWE252_Unchecked_Return_Value__char_fgets_16.c" language="C" size="2738" checksum="c509f468b731ab102eae817b5b7069dad55d8f64">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92104" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/104/CWE252_Unchecked_Return_Value__char_fgets_17.c" language="C" size="2763" checksum="8b73451c3a596329f96abbc92d7e92981b2083b5">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92105" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgets() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgets() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/105/CWE252_Unchecked_Return_Value__char_fgets_18.c" language="C" size="2609" checksum="81d05bd8d008869afb5a2d4b9fc82f6e60368091">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92106" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/106/CWE252_Unchecked_Return_Value__char_fprintf_01.c" language="C" size="1767" checksum="77f25d34a97a0aea466a1d8634aca2a22b33337a">
      <mixed line="27" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92107" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/107/CWE252_Unchecked_Return_Value__char_fprintf_02.c" language="C" size="2336" checksum="39d0bc1b9160e20f040a857bd793bee58c3a6e19">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92108" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/108/CWE252_Unchecked_Return_Value__char_fprintf_03.c" language="C" size="2357" checksum="648af13ba67de278bbd371b6e2216680ff3508f8">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92109" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/109/CWE252_Unchecked_Return_Value__char_fprintf_04.c" language="C" size="2722" checksum="6d6a911dff187db23e05080a785d3a6e9b8a31be">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92110" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/110/CWE252_Unchecked_Return_Value__char_fprintf_05.c" language="C" size="2693" checksum="802a6db4ff38d1a182ba35470309171f68787981">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92111" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/111/CWE252_Unchecked_Return_Value__char_fprintf_06.c" language="C" size="2663" checksum="7d1c115be5b44f1ed81d3aacc4eb2412ee1d5daf">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92112" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/112/CWE252_Unchecked_Return_Value__char_fprintf_07.c" language="C" size="2643" checksum="3d369ff0961397671c35f0d391dd87d0e8b4e4f9">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92113" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/113/CWE252_Unchecked_Return_Value__char_fprintf_08.c" language="C" size="2743" checksum="0fd9bbf3dc483951207fc59ab2d80174beb6533f">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92114" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/114/CWE252_Unchecked_Return_Value__char_fprintf_09.c" language="C" size="2451" checksum="8633a497ab392186e30d7d65d792d6280fa96331">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92115" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/115/CWE252_Unchecked_Return_Value__char_fprintf_10.c" language="C" size="2402" checksum="1296031c8ca0a8f2cd037a62e278e39f740c6c08">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92116" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/116/CWE252_Unchecked_Return_Value__char_fprintf_11.c" language="C" size="2465" checksum="e0d7efa2fc1d5c5517e9c9672ffe804ab4c4f8b9">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92117" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/117/CWE252_Unchecked_Return_Value__char_fprintf_12.c" language="C" size="2368" checksum="a9012e3c4bde2dba3ccf82d4d6a0a586a0068a70">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92118" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/118/CWE252_Unchecked_Return_Value__char_fprintf_13.c" language="C" size="2469" checksum="380b7ec9c24030dc4e3cb001efd246de05e9ae65">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92119" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/119/CWE252_Unchecked_Return_Value__char_fprintf_14.c" language="C" size="2420" checksum="1f22a9386a237b5307856d90b96bbc35a4b33b01">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92120" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/120/CWE252_Unchecked_Return_Value__char_fprintf_15.c" language="C" size="2733" checksum="3a87ead3af2f6c2c145f8b5330679cc83a9fa1cf">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92121" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/121/CWE252_Unchecked_Return_Value__char_fprintf_16.c" language="C" size="1952" checksum="1b8cdb819a8e5275b33d0abbda1504187060d119">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92122" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/122/CWE252_Unchecked_Return_Value__char_fprintf_17.c" language="C" size="1977" checksum="ec92d224d33ed180e402c2002c0132fc333f85ca">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92123" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fprintf() fails<br/> BadSink : Do not check if fprintf() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/123/CWE252_Unchecked_Return_Value__char_fprintf_18.c" language="C" size="1891" checksum="ae563014fd7091d7e180ff7fbe16dcfbe361af0b">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92124" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/124/CWE252_Unchecked_Return_Value__char_fputc_01.c" language="C" size="1732" checksum="d0eb3372f4fa1b965c536cde098e15fee43fd78d">
      <mixed line="27" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92125" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/125/CWE252_Unchecked_Return_Value__char_fputc_02.c" language="C" size="2292" checksum="0a2a951d8445ed0a72aed9481f4b1498a3c6b55c">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92126" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/126/CWE252_Unchecked_Return_Value__char_fputc_03.c" language="C" size="2313" checksum="6c38fd113351b3061758788f4926b9abdc129fc0">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92127" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/127/CWE252_Unchecked_Return_Value__char_fputc_04.c" language="C" size="2678" checksum="0d7e1c4ce6ca74825b4a7a2ca339f4e9dac9d0bd">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92128" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/128/CWE252_Unchecked_Return_Value__char_fputc_05.c" language="C" size="2649" checksum="111fce839270d94bbc043a73a3561b9b8a4d0470">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92129" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/129/CWE252_Unchecked_Return_Value__char_fputc_06.c" language="C" size="2619" checksum="c87e4176647f7526e462b73aa2e4a5cec2c9c088">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92130" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/130/CWE252_Unchecked_Return_Value__char_fputc_07.c" language="C" size="2599" checksum="d7206b3d471d6257526bbb7a9bb835a89217d4c5">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92131" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/131/CWE252_Unchecked_Return_Value__char_fputc_08.c" language="C" size="2699" checksum="10e3a78e72d91e7774b72d04e6997bbe80656cca">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92132" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/132/CWE252_Unchecked_Return_Value__char_fputc_09.c" language="C" size="2407" checksum="7e0708a80e491a00e5d8479ebb525a39520fdf7a">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92133" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/133/CWE252_Unchecked_Return_Value__char_fputc_10.c" language="C" size="2358" checksum="bce6d6ef50877dced2aad2dfd3981b5512f8f3e6">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92134" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/134/CWE252_Unchecked_Return_Value__char_fputc_11.c" language="C" size="2421" checksum="876c1ee2b1c4840f0ffc9b733d5b660747c96a05">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92135" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/135/CWE252_Unchecked_Return_Value__char_fputc_12.c" language="C" size="2315" checksum="1104e6a7d2baabd3c91cf0b0df1f28adf5b43cf1">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92136" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/136/CWE252_Unchecked_Return_Value__char_fputc_13.c" language="C" size="2425" checksum="51c10f47d29c2da625e3e84b10a2939ded6c9068">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92137" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/137/CWE252_Unchecked_Return_Value__char_fputc_14.c" language="C" size="2376" checksum="f17b4b3c79060b560a11378e5e47ff3aa32898e9">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92138" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/138/CWE252_Unchecked_Return_Value__char_fputc_15.c" language="C" size="2689" checksum="66c90b525de0a2d1b2abbb6516e5a559b9b48041">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92139" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/139/CWE252_Unchecked_Return_Value__char_fputc_16.c" language="C" size="1917" checksum="18bed934e743e9cdc570d4c19ace327b675af6d3">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92140" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/140/CWE252_Unchecked_Return_Value__char_fputc_17.c" language="C" size="1942" checksum="ada406ca761c648953a1c3dc2802ac79a3ae0e58">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92141" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputc() fails<br/> BadSink : Do not check if fputc() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/141/CWE252_Unchecked_Return_Value__char_fputc_18.c" language="C" size="1856" checksum="662148a4c155c1bebed0d278d6304705b208a63d">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92142" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/142/CWE252_Unchecked_Return_Value__char_fputs_01.c" language="C" size="1732" checksum="c8a1af056b03046c5b08438ecbcb729162f90fbe">
      <mixed line="27" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92143" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/143/CWE252_Unchecked_Return_Value__char_fputs_02.c" language="C" size="2292" checksum="092bab9c021fb6d0c8440dea57f45e61ec78e9c3">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92144" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/144/CWE252_Unchecked_Return_Value__char_fputs_03.c" language="C" size="2313" checksum="aa1295ff5de68b324aea768571c6c2832b0215fb">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92145" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/145/CWE252_Unchecked_Return_Value__char_fputs_04.c" language="C" size="2678" checksum="c58b471ee85b9b05534ec0d0da4d032319ccc1b0">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92146" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/146/CWE252_Unchecked_Return_Value__char_fputs_05.c" language="C" size="2649" checksum="54cac7cff5e39ff06c668c7c46f38b20724a76a0">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92147" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/147/CWE252_Unchecked_Return_Value__char_fputs_06.c" language="C" size="2619" checksum="12b426e6f06f7315e17f97ac4213b39e6dfbbcd3">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92148" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/148/CWE252_Unchecked_Return_Value__char_fputs_07.c" language="C" size="2599" checksum="ea8f65acba4cd8476ffd4a01bc526c665e83d6d0">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92149" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/149/CWE252_Unchecked_Return_Value__char_fputs_08.c" language="C" size="2699" checksum="7ae21be262173290b94407710d2888a02e419c58">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92150" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/150/CWE252_Unchecked_Return_Value__char_fputs_09.c" language="C" size="2407" checksum="ad6a674df9d342b4341ce424cf4726d7b44c5c25">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92151" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/151/CWE252_Unchecked_Return_Value__char_fputs_10.c" language="C" size="2358" checksum="346a97bc9399b4de73171b2857d3127a64d61d8d">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92152" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/152/CWE252_Unchecked_Return_Value__char_fputs_11.c" language="C" size="2421" checksum="71a904b33da33cde3bd36e484495bf0c5f063762">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92153" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/153/CWE252_Unchecked_Return_Value__char_fputs_12.c" language="C" size="2315" checksum="c1681b0f0d6472ac1c3ef202f4ff021a9ef663ac">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92154" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/154/CWE252_Unchecked_Return_Value__char_fputs_13.c" language="C" size="2425" checksum="6de785a8a770a414fe1fa13bfaa033088259620d">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92155" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/155/CWE252_Unchecked_Return_Value__char_fputs_14.c" language="C" size="2376" checksum="33f3f18624e420cc3127214c4a5ce44beb5f8d2c">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92156" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/156/CWE252_Unchecked_Return_Value__char_fputs_15.c" language="C" size="2689" checksum="a3968aa1faac9cb5919500e1245c72c6b0c06a5d">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92157" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/157/CWE252_Unchecked_Return_Value__char_fputs_16.c" language="C" size="1917" checksum="e78eaa95f38df96a366b547dd0d3a34610a70961">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92158" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/158/CWE252_Unchecked_Return_Value__char_fputs_17.c" language="C" size="1942" checksum="2de5a26ed504dc9dba89e871a07da318c820c072">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92159" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputs() fails<br/> BadSink : Do not check if fputs() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/159/CWE252_Unchecked_Return_Value__char_fputs_18.c" language="C" size="1856" checksum="2f60a55e60be2b4e6a684b5bd8ce0953f75e2dd5">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92160" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/160/CWE252_Unchecked_Return_Value__char_fread_01.c" language="C" size="2342" checksum="c4bdd70077ed43430f0ab009d3e6afe9da0976e2">
      <mixed line="32" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92161" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/161/CWE252_Unchecked_Return_Value__char_fread_02.c" language="C" size="3286" checksum="bb263b6d256edd5aaae977e73c7bda77ac1b1b61">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92162" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/162/CWE252_Unchecked_Return_Value__char_fread_03.c" language="C" size="3307" checksum="cb4845c4ba845274f311dfb2c80ba3f22a7d0a32">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92163" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/163/CWE252_Unchecked_Return_Value__char_fread_04.c" language="C" size="3672" checksum="6e5c46decb5cf2f2bc78479ae0cc63564e470237">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92164" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/164/CWE252_Unchecked_Return_Value__char_fread_05.c" language="C" size="3643" checksum="e471800f240ad14e692adba13b2a97111e3e2cf3">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92165" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/165/CWE252_Unchecked_Return_Value__char_fread_06.c" language="C" size="3613" checksum="f3f47b64cd9453685f6e91bac78655ad545c68e2">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92166" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/166/CWE252_Unchecked_Return_Value__char_fread_07.c" language="C" size="3593" checksum="6bda39247a3ef9f6b26b001c633730596dfea42a">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92167" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/167/CWE252_Unchecked_Return_Value__char_fread_08.c" language="C" size="3693" checksum="6597a1d26729248adb0ee8f91649216e67380606">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92168" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/168/CWE252_Unchecked_Return_Value__char_fread_09.c" language="C" size="3401" checksum="24d25b6479e508baf5cff55aa4964eab84e3d6b1">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92169" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/169/CWE252_Unchecked_Return_Value__char_fread_10.c" language="C" size="3352" checksum="9f9374da2ecf7763b3d4523fa473e8d7be94647b">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92170" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/170/CWE252_Unchecked_Return_Value__char_fread_11.c" language="C" size="3415" checksum="246a82814b303b219828fb6c330fed81228d0404">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92171" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/171/CWE252_Unchecked_Return_Value__char_fread_12.c" language="C" size="3645" checksum="30b58d591b0cf7fb785cdd61009fffee29c3319b">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92172" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/172/CWE252_Unchecked_Return_Value__char_fread_13.c" language="C" size="3419" checksum="7537068b4c360ad20a812364186e1469050dc2dd">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92173" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/173/CWE252_Unchecked_Return_Value__char_fread_14.c" language="C" size="3370" checksum="ecc60cc8e2947947cc6d0719232d56e32e595bb4">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92174" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/174/CWE252_Unchecked_Return_Value__char_fread_15.c" language="C" size="3551" checksum="f62513fac706e4820cd47a6bc66c582f840b5dc2">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92175" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/175/CWE252_Unchecked_Return_Value__char_fread_16.c" language="C" size="2575" checksum="01c5a10aefa94f6d58caafa39297647e5c9c4bcd">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92176" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/176/CWE252_Unchecked_Return_Value__char_fread_17.c" language="C" size="2600" checksum="d0b61474a8bf85497873c47cd83b198dca752af2">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92177" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/177/CWE252_Unchecked_Return_Value__char_fread_18.c" language="C" size="2466" checksum="18c1b1039a5259cdc8746dbd286e599647ad0e13">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92178" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/178/CWE252_Unchecked_Return_Value__char_fscanf_01.c" language="C" size="2293" checksum="dbaad308a16dc8136b778ff9235a3f1539a840b1">
      <mixed line="32" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92179" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/179/CWE252_Unchecked_Return_Value__char_fscanf_02.c" language="C" size="3208" checksum="e41b7b6ce3f59acd95bf391d16e946c19c27dd5d">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92180" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/180/CWE252_Unchecked_Return_Value__char_fscanf_03.c" language="C" size="3229" checksum="90e2db36577e6cd369587e95995b33e5c7f4147f">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92181" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/181/CWE252_Unchecked_Return_Value__char_fscanf_04.c" language="C" size="3594" checksum="19d71cd0d58f9c8749e803e7aee7d9316a597dcc">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92182" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/182/CWE252_Unchecked_Return_Value__char_fscanf_05.c" language="C" size="3565" checksum="a609c27403f7a282c3bf0ee409c92bd3c674de8f">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92183" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/183/CWE252_Unchecked_Return_Value__char_fscanf_06.c" language="C" size="3535" checksum="17a8235ff65baab4fc5b089905e349f7114959bd">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92184" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/184/CWE252_Unchecked_Return_Value__char_fscanf_07.c" language="C" size="3515" checksum="039b857d980d5b62e913b3ad888bff74849d32d2">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92185" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/185/CWE252_Unchecked_Return_Value__char_fscanf_08.c" language="C" size="3615" checksum="ffb39faa41ced1d799e7614d5d826bb4f7e14e84">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92186" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/186/CWE252_Unchecked_Return_Value__char_fscanf_09.c" language="C" size="3323" checksum="418fede78a8ff09dfd8bb5e83a2f86b77b789256">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92187" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/187/CWE252_Unchecked_Return_Value__char_fscanf_10.c" language="C" size="3274" checksum="7329529a5f5a003a75a44d093c680f7aa80ceba9">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92188" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/188/CWE252_Unchecked_Return_Value__char_fscanf_11.c" language="C" size="3337" checksum="6addb77ca268e6e7d931d9352ac83d72af4db02f">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92189" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/189/CWE252_Unchecked_Return_Value__char_fscanf_12.c" language="C" size="3538" checksum="56e3828b40277f3d54e52184bd4dbebc017cfd71">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92190" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/190/CWE252_Unchecked_Return_Value__char_fscanf_13.c" language="C" size="3341" checksum="4076c154f953049e24c994d14f24ccb66d777476">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92191" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/191/CWE252_Unchecked_Return_Value__char_fscanf_14.c" language="C" size="3292" checksum="f498b81920389969f738e31e0df60787aca2f125">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92192" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/192/CWE252_Unchecked_Return_Value__char_fscanf_15.c" language="C" size="3473" checksum="9e9bc2f31e5f1ffeafd1f67b270aa05b69ed8f1c">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92193" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/193/CWE252_Unchecked_Return_Value__char_fscanf_16.c" language="C" size="2526" checksum="4819c280a947062e142a59b3e60f05a53ab618aa">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92194" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/194/CWE252_Unchecked_Return_Value__char_fscanf_17.c" language="C" size="2551" checksum="f90e42d895ff795ea3681edb7aba9f438f2051fb">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92195" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fscanf() fails<br/> BadSink : Do not check if fscanf() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/195/CWE252_Unchecked_Return_Value__char_fscanf_18.c" language="C" size="2417" checksum="3134ca70ac0799d8bf3a7eb3bffe62bfc51bfb7f">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92196" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/196/CWE252_Unchecked_Return_Value__char_fwrite_01.c" language="C" size="1836" checksum="78e5f99d742ef7ecfe90944f1fe9e81211efe982">
      <mixed line="27" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92197" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/197/CWE252_Unchecked_Return_Value__char_fwrite_02.c" language="C" size="2451" checksum="74cdb04f7a48308b29651046ed9a3b721ecad169">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92198" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/198/CWE252_Unchecked_Return_Value__char_fwrite_03.c" language="C" size="2472" checksum="a128cb9f7eec6ebb81313dde99e3730c2d7796c0">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92199" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/199/CWE252_Unchecked_Return_Value__char_fwrite_04.c" language="C" size="2837" checksum="127f13fd1750991247f5456f24cf94b56d41810b">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92200" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/200/CWE252_Unchecked_Return_Value__char_fwrite_05.c" language="C" size="2808" checksum="7ed71742c5a538de66311a2c857a06b7d1272b92">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92201" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/201/CWE252_Unchecked_Return_Value__char_fwrite_06.c" language="C" size="2778" checksum="bdfc4260c278e11310e4015182b657e4f02d9689">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92202" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/202/CWE252_Unchecked_Return_Value__char_fwrite_07.c" language="C" size="2758" checksum="e37a24ac7cad63909494301dfef8c90ccb8f01b1">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92203" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/203/CWE252_Unchecked_Return_Value__char_fwrite_08.c" language="C" size="2858" checksum="d4dddcebfe26184f95e96efb1cef33f5c2784cf9">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92204" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/204/CWE252_Unchecked_Return_Value__char_fwrite_09.c" language="C" size="2566" checksum="742de7c97d49fe4dd1c7788d046e8cd54671067b">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92205" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/205/CWE252_Unchecked_Return_Value__char_fwrite_10.c" language="C" size="2517" checksum="ceccd252669e96e65e272cb53666f163b7777a69">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92206" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/206/CWE252_Unchecked_Return_Value__char_fwrite_11.c" language="C" size="2580" checksum="0e0168905a7cf03e239f933ecd537d0bb55d6977">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92207" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/207/CWE252_Unchecked_Return_Value__char_fwrite_12.c" language="C" size="2529" checksum="a82b5a5821e482b674e39e433b4cb48719c20a3d">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92208" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/208/CWE252_Unchecked_Return_Value__char_fwrite_13.c" language="C" size="2584" checksum="3c095fc5d7b38124ff321215df25ba7ca966189c">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92209" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/209/CWE252_Unchecked_Return_Value__char_fwrite_14.c" language="C" size="2535" checksum="0f09fa6d5e2fafb28e354c34ab71a61c27bbaf1f">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92210" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/210/CWE252_Unchecked_Return_Value__char_fwrite_15.c" language="C" size="2848" checksum="8e35ed1a0258228a0ea85a686c15e53e23f4f9a0">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92211" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/211/CWE252_Unchecked_Return_Value__char_fwrite_16.c" language="C" size="2021" checksum="8575c6d80abdf568a7980f08aeed3b6a342f476c">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92212" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/212/CWE252_Unchecked_Return_Value__char_fwrite_17.c" language="C" size="2046" checksum="52e13daed78264812e1ebcde6215d0fb360a712a">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92213" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/213/CWE252_Unchecked_Return_Value__char_fwrite_18.c" language="C" size="1960" checksum="3fd6bd5ae4bc14cf4ca341551f96fa289040ea84">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92214" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/214/CWE252_Unchecked_Return_Value__char_putc_01.c" language="C" size="1721" checksum="6b414bf390d66146ac3d210a2d083be0c8cc5a64">
      <mixed line="27" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92215" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/215/CWE252_Unchecked_Return_Value__char_putc_02.c" language="C" size="2279" checksum="45518a93ead3221039e78c74e53dc1ff14b65c6d">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92216" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/216/CWE252_Unchecked_Return_Value__char_putc_03.c" language="C" size="2300" checksum="360a225642565880aa683048fd82969310dc534d">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92217" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/217/CWE252_Unchecked_Return_Value__char_putc_04.c" language="C" size="2665" checksum="48bd168fa38d4b4e23ec65d8efa4f770b9ba68c7">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92218" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/218/CWE252_Unchecked_Return_Value__char_putc_05.c" language="C" size="2636" checksum="2241d5ca9d0883ae02321d7cd6717852ee59f6a6">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92219" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/219/CWE252_Unchecked_Return_Value__char_putc_06.c" language="C" size="2606" checksum="ff1f10b40627f432a46d57e765a7aad60f6e7950">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92220" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/220/CWE252_Unchecked_Return_Value__char_putc_07.c" language="C" size="2586" checksum="5a518a86d1644a440e9ff3ca3f501021a88d4125">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92221" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/221/CWE252_Unchecked_Return_Value__char_putc_08.c" language="C" size="2686" checksum="c79657b1a5154063d83bb1cad54442fc55025e30">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92222" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/222/CWE252_Unchecked_Return_Value__char_putc_09.c" language="C" size="2394" checksum="f8f390ca40555d252bc234375197c45a9333dba5">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92223" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/223/CWE252_Unchecked_Return_Value__char_putc_10.c" language="C" size="2345" checksum="7657738335e11ad8e6ceb38014a44cd535259928">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92224" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/224/CWE252_Unchecked_Return_Value__char_putc_11.c" language="C" size="2408" checksum="cc2fa7a276216e6c7ffafbbc8bae4a22d82434b6">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92225" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/225/CWE252_Unchecked_Return_Value__char_putc_12.c" language="C" size="2300" checksum="0be0748fb0571a18312cb0760da2fa7dfd31fa38">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92226" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/226/CWE252_Unchecked_Return_Value__char_putc_13.c" language="C" size="2412" checksum="883a6b18e07747364fd8db4c839d5d807be24457">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92227" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/227/CWE252_Unchecked_Return_Value__char_putc_14.c" language="C" size="2363" checksum="43ff80ac294e824c55737f4457f10587a94c1985">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92228" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/228/CWE252_Unchecked_Return_Value__char_putc_15.c" language="C" size="2676" checksum="1f7080e147dbc1d98662295b34b3e99731fdb3fc">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92229" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/229/CWE252_Unchecked_Return_Value__char_putc_16.c" language="C" size="1906" checksum="22f989b0cad91ee0751e132bc5aed718556ecd79">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92230" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/230/CWE252_Unchecked_Return_Value__char_putc_17.c" language="C" size="1931" checksum="f27fc9677ade5b57a002894b808dbdbf5ee7a290">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92231" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putc() fails<br/> BadSink : Do not check if putc() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/231/CWE252_Unchecked_Return_Value__char_putc_18.c" language="C" size="1845" checksum="6742e84ebd7711fdada9e768d60012243d2efb77">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92232" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/232/CWE252_Unchecked_Return_Value__char_putchar_01.c" language="C" size="1738" checksum="8e73aa0439498a7b9fd6dff9e439883a98885bc9">
      <mixed line="27" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92233" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/233/CWE252_Unchecked_Return_Value__char_putchar_02.c" language="C" size="2294" checksum="9bab684d327310d6b20de859c74040eff1335f92">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92234" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/234/CWE252_Unchecked_Return_Value__char_putchar_03.c" language="C" size="2315" checksum="401e74e62f85086f84a2ad2749a260c39e1c95c4">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92235" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/235/CWE252_Unchecked_Return_Value__char_putchar_04.c" language="C" size="2680" checksum="2803cd920855298c29fdbe7f49133b895079a56d">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92236" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/236/CWE252_Unchecked_Return_Value__char_putchar_05.c" language="C" size="2651" checksum="5235b76ffd64fc99d6ac10692abbe16b6c22f8e0">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92237" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/237/CWE252_Unchecked_Return_Value__char_putchar_06.c" language="C" size="2621" checksum="90743fe184d5c2a2145366dcfe9878be63df27f7">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92238" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/238/CWE252_Unchecked_Return_Value__char_putchar_07.c" language="C" size="2601" checksum="d268b1f1a22ce0f39f0f41b6525b816cb919fb69">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92239" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/239/CWE252_Unchecked_Return_Value__char_putchar_08.c" language="C" size="2701" checksum="88499e46116a82cae90f751375915bee8d63c31d">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92240" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/240/CWE252_Unchecked_Return_Value__char_putchar_09.c" language="C" size="2409" checksum="948e1005df0c40e47dc012033631f7bb413290c2">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92241" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/241/CWE252_Unchecked_Return_Value__char_putchar_10.c" language="C" size="2360" checksum="e350cf98e18dfc08c0ac0c93c0b55d69c1203de5">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92242" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/242/CWE252_Unchecked_Return_Value__char_putchar_11.c" language="C" size="2423" checksum="d6fed2651d7b2700785a4c656d49a482465b781c">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92243" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/243/CWE252_Unchecked_Return_Value__char_putchar_12.c" language="C" size="2313" checksum="38d36ee2aaba751918768e9a3f96471587b3638b">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92244" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/244/CWE252_Unchecked_Return_Value__char_putchar_13.c" language="C" size="2427" checksum="50348d2204859ed467572cbfe78044b6b445d1fd">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92245" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/245/CWE252_Unchecked_Return_Value__char_putchar_14.c" language="C" size="2378" checksum="7da23e59b5f46153deb29c36fe580ae0e361e9ed">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92246" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/246/CWE252_Unchecked_Return_Value__char_putchar_15.c" language="C" size="2691" checksum="49e2773ca334eed45397dad49fb74ae538ff50fa">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92247" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/247/CWE252_Unchecked_Return_Value__char_putchar_16.c" language="C" size="1923" checksum="fb175dbc169ef839bd4a7ce3ca15e9aeae540031">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92248" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/248/CWE252_Unchecked_Return_Value__char_putchar_17.c" language="C" size="1948" checksum="a638dd43baa477240a55b04cb57be7ba564beac7">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92249" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putchar() fails<br/> BadSink : Do not check if putchar() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/249/CWE252_Unchecked_Return_Value__char_putchar_18.c" language="C" size="1862" checksum="a52bad6929707ea85bc7275cc3f774d7e51e0bd6">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92250" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/250/CWE252_Unchecked_Return_Value__char_puts_01.c" language="C" size="1775" checksum="9d9244f780a7dbdf8fdcf890a00b7c0e83a717ed">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92251" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/251/CWE252_Unchecked_Return_Value__char_puts_02.c" language="C" size="2325" checksum="5c096d9e143ad8e81069647fe626032f3c1cd5bd">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92252" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/252/CWE252_Unchecked_Return_Value__char_puts_03.c" language="C" size="2346" checksum="bb561c0ad291ccb52a26b189bf385ace89789f7c">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92253" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/253/CWE252_Unchecked_Return_Value__char_puts_04.c" language="C" size="2711" checksum="e53f35ca4443f04f913c89fb8542e7d5161481b6">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92254" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/254/CWE252_Unchecked_Return_Value__char_puts_05.c" language="C" size="2682" checksum="bfed1eebf6db0eb8e21112e58c1f38799a845513">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92255" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/255/CWE252_Unchecked_Return_Value__char_puts_06.c" language="C" size="2652" checksum="de620e82e65f24e2c01956722e409b7e7509a437">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92256" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/256/CWE252_Unchecked_Return_Value__char_puts_07.c" language="C" size="2632" checksum="cd45fd095a190164eadae9382b22ba3b10926571">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92257" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/257/CWE252_Unchecked_Return_Value__char_puts_08.c" language="C" size="2732" checksum="80efb7f333a48fac67f66ce62b560230f9211ca3">
      <mixed line="48" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92258" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/258/CWE252_Unchecked_Return_Value__char_puts_09.c" language="C" size="2440" checksum="884f992eca9a1f98f6d1c8745da24e63e318f3f2">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92259" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/259/CWE252_Unchecked_Return_Value__char_puts_10.c" language="C" size="2391" checksum="a8995100456fafa830ac8dc3c5ad2a6b6ada110f">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92260" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/260/CWE252_Unchecked_Return_Value__char_puts_11.c" language="C" size="2454" checksum="8e7732c71eb8f9b8ec7521a83c959ad892b31178">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92261" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/261/CWE252_Unchecked_Return_Value__char_puts_12.c" language="C" size="2338" checksum="cd7b54343eee313ef387f1fbc0f7a2c41336ac62">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92262" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/262/CWE252_Unchecked_Return_Value__char_puts_13.c" language="C" size="2458" checksum="cdf18525e2fefeca0bdec9307c033215ba2c747b">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92263" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/263/CWE252_Unchecked_Return_Value__char_puts_14.c" language="C" size="2409" checksum="8df4ad6b71b3205df9310166637e899ca36ce63e">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92264" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/264/CWE252_Unchecked_Return_Value__char_puts_15.c" language="C" size="2722" checksum="b95f9193e01f46043642083fde990139c587bdab">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92265" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/265/CWE252_Unchecked_Return_Value__char_puts_16.c" language="C" size="1960" checksum="3ae19773f5200c9c59561dc36415052bb1edd644">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92266" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/266/CWE252_Unchecked_Return_Value__char_puts_17.c" language="C" size="1985" checksum="a285a5dca2dc2754e3996399a512d5ce21a660d4">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92267" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/267/CWE252_Unchecked_Return_Value__char_puts_18.c" language="C" size="1899" checksum="a17e710c01d7e9d0e019c6c2196f57969b5d596d">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92268" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/268/CWE252_Unchecked_Return_Value__char_remove_01.c" language="C" size="1822" checksum="854159678e459904ddf60b41133329166e98566b">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92269" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/269/CWE252_Unchecked_Return_Value__char_remove_02.c" language="C" size="2384" checksum="f309bdb2a2bc76058c1a53ede595c7c81200a4ec">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92270" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/270/CWE252_Unchecked_Return_Value__char_remove_03.c" language="C" size="2405" checksum="2b2dd9bbbb23bee36195c208ff66895b0254dc67">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92271" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/271/CWE252_Unchecked_Return_Value__char_remove_04.c" language="C" size="2770" checksum="23598e7bb6dcffc5f1aefdf0e2dd511bd2cca610">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92272" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/272/CWE252_Unchecked_Return_Value__char_remove_05.c" language="C" size="2741" checksum="bbe31a11860b121a7e1c58d61eb64f999516e2b1">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92273" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/273/CWE252_Unchecked_Return_Value__char_remove_06.c" language="C" size="2711" checksum="216c243834ee1017f2ebdfe059fa12cae4698e5a">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92274" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/274/CWE252_Unchecked_Return_Value__char_remove_07.c" language="C" size="2691" checksum="4a0480e46429108d511b55bef30924b4cba781e0">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92275" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/275/CWE252_Unchecked_Return_Value__char_remove_08.c" language="C" size="2791" checksum="34eb849e238934f727e7b15750c1f1c9fcd40bc0">
      <mixed line="48" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92276" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/276/CWE252_Unchecked_Return_Value__char_remove_09.c" language="C" size="2499" checksum="c2ff37b4bbcb8ba6f11d7fca1449acf279d154c3">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92277" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/277/CWE252_Unchecked_Return_Value__char_remove_10.c" language="C" size="2450" checksum="58108e6f211ce63e0b5875b6d0cfc58c8c908f6b">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92278" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/278/CWE252_Unchecked_Return_Value__char_remove_11.c" language="C" size="2513" checksum="67a68953c221c30a43d00a75646523efe6240f44">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92279" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/279/CWE252_Unchecked_Return_Value__char_remove_12.c" language="C" size="2409" checksum="e644cd544a8b978fd48880335e5fe9aa1c462d58">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92280" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/280/CWE252_Unchecked_Return_Value__char_remove_13.c" language="C" size="2517" checksum="1e53f54563b8c9977f06a3795685f5f47570372c">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92281" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/281/CWE252_Unchecked_Return_Value__char_remove_14.c" language="C" size="2468" checksum="168e25103674e6dc9b982b506560dae0c1726324">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92282" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/282/CWE252_Unchecked_Return_Value__char_remove_15.c" language="C" size="2781" checksum="0906c6a5a6bc1a1d04740217c138b357bb394238">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92283" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/283/CWE252_Unchecked_Return_Value__char_remove_16.c" language="C" size="2007" checksum="1cb9c2aa5656c2b049bb4ca393c106efbc9281ab">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92284" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/284/CWE252_Unchecked_Return_Value__char_remove_17.c" language="C" size="2032" checksum="a1040150c4b7d9462bd4ff0a3ea261f27f9ed006">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92285" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/285/CWE252_Unchecked_Return_Value__char_remove_18.c" language="C" size="1946" checksum="22b890de7adc7009d434ed6e332418bbb12a5241">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92286" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/286/CWE252_Unchecked_Return_Value__char_rename_01.c" language="C" size="1967" checksum="ff6cdd1fddde06b2bb29d63a4bcc37b5603fbc63">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92287" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/287/CWE252_Unchecked_Return_Value__char_rename_02.c" language="C" size="2552" checksum="2a5183b292691627bbce32568bf252471dcb265d">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92288" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/288/CWE252_Unchecked_Return_Value__char_rename_03.c" language="C" size="2573" checksum="eb9c1af26c5f08ea87796f56757010bd05d4ce64">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92289" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/289/CWE252_Unchecked_Return_Value__char_rename_04.c" language="C" size="2938" checksum="d705a9c6034753b32014cd6f20d467e23576b473">
      <mixed line="44" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92290" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/290/CWE252_Unchecked_Return_Value__char_rename_05.c" language="C" size="2909" checksum="0f31c42a16cda2e2a669688d930f68efe395ea60">
      <mixed line="44" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92291" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/291/CWE252_Unchecked_Return_Value__char_rename_06.c" language="C" size="2879" checksum="6aeb8877be1892825692a22e6189b6b0f74b61c1">
      <mixed line="43" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92292" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/292/CWE252_Unchecked_Return_Value__char_rename_07.c" language="C" size="2859" checksum="aa43d8d3c86064d6db25b1454987e5ab76408d72">
      <mixed line="43" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92293" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/293/CWE252_Unchecked_Return_Value__char_rename_08.c" language="C" size="2959" checksum="93dedd34e0d1cdc115b7fe9f7dba555f1fc1ad58">
      <mixed line="51" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92294" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/294/CWE252_Unchecked_Return_Value__char_rename_09.c" language="C" size="2667" checksum="a8689eac50b89164aa7529f757855e04334a643a">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92295" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/295/CWE252_Unchecked_Return_Value__char_rename_10.c" language="C" size="2618" checksum="b52d5fdb84c3a52de4d06cfdec90fb6a59b9e2bf">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92296" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/296/CWE252_Unchecked_Return_Value__char_rename_11.c" language="C" size="2681" checksum="8f0844ebf2863c5fa24635c812e6237d70f70833">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92297" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/297/CWE252_Unchecked_Return_Value__char_rename_12.c" language="C" size="2600" checksum="33e5ad2fc4fb340c688c9bbea71d463b3305ebaa">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92298" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/298/CWE252_Unchecked_Return_Value__char_rename_13.c" language="C" size="2685" checksum="e27b673db32f503f235b491fc71b39ad239755e9">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92299" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/299/CWE252_Unchecked_Return_Value__char_rename_14.c" language="C" size="2636" checksum="23174dc7f64dc8f5bed8f15f1860db2878af5de1">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92300" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/300/CWE252_Unchecked_Return_Value__char_rename_15.c" language="C" size="2949" checksum="780d88d29ec71c3aafc57f3b080bb115214cdd45">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92301" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/301/CWE252_Unchecked_Return_Value__char_rename_16.c" language="C" size="2152" checksum="3d37d69fa7554f6001333d141d698c9bf2063b75">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92302" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/302/CWE252_Unchecked_Return_Value__char_rename_17.c" language="C" size="2177" checksum="85f020a6c35389ea7a54ca3282ba6fc12eaa0854">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92303" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/303/CWE252_Unchecked_Return_Value__char_rename_18.c" language="C" size="2091" checksum="4a9b3880f9356f848a169617d253d0164752ff56">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92304" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/304/CWE252_Unchecked_Return_Value__char_scanf_01.c" language="C" size="2268" checksum="24a85c168a628cb48b07d2562d924a695a61c164">
      <mixed line="32" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92305" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/305/CWE252_Unchecked_Return_Value__char_scanf_02.c" language="C" size="3174" checksum="44be85fb11dfdb2aaeb458ab9a34543fbf2aa04c">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92306" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/306/CWE252_Unchecked_Return_Value__char_scanf_03.c" language="C" size="3195" checksum="e021b65c6e3b37a89edf16ed4be72636f5218582">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92307" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/307/CWE252_Unchecked_Return_Value__char_scanf_04.c" language="C" size="3560" checksum="80c4cf84d251987f182794d83db8c05dd73bc561">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92308" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/308/CWE252_Unchecked_Return_Value__char_scanf_05.c" language="C" size="3531" checksum="92cc22eae192131a0c3e913db31f955cd6eefe94">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92309" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/309/CWE252_Unchecked_Return_Value__char_scanf_06.c" language="C" size="3501" checksum="4c9f4853c0e16e55c1ce6e838db3acdcdccccb8f">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92310" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/310/CWE252_Unchecked_Return_Value__char_scanf_07.c" language="C" size="3481" checksum="aaaebbc42e18e7bc48c5d23db14bd2df60ee6819">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92311" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/311/CWE252_Unchecked_Return_Value__char_scanf_08.c" language="C" size="3581" checksum="8333551e78531fb9b737f6f2d0d359ea8f44b484">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92312" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/312/CWE252_Unchecked_Return_Value__char_scanf_09.c" language="C" size="3289" checksum="74dcb33b08b3bbbf3b6064ee8a56a3b582aab39d">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92313" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/313/CWE252_Unchecked_Return_Value__char_scanf_10.c" language="C" size="3240" checksum="53d1412086ba0103e77ca8e5432d34ca6974e32c">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92314" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/314/CWE252_Unchecked_Return_Value__char_scanf_11.c" language="C" size="3303" checksum="9041c0005ee5432c8e2e5eaec439902c85e92171">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92315" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/315/CWE252_Unchecked_Return_Value__char_scanf_12.c" language="C" size="3495" checksum="43eec6e3148696712f20b17cc258ea1c871db5f6">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92316" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/316/CWE252_Unchecked_Return_Value__char_scanf_13.c" language="C" size="3307" checksum="13e9a06c9fe982fe3acee7af4c49cd6c47524631">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92317" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/317/CWE252_Unchecked_Return_Value__char_scanf_14.c" language="C" size="3258" checksum="8e7d620b27954b3e57d878293a5df425062cd8ef">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92318" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/318/CWE252_Unchecked_Return_Value__char_scanf_15.c" language="C" size="3439" checksum="287ce9d36d6e5fbf6c54286f0eeadedb739b877a">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92319" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/319/CWE252_Unchecked_Return_Value__char_scanf_16.c" language="C" size="2501" checksum="8fc2a6fa767484ababcbd894b370e7556c15cb11">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92320" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/320/CWE252_Unchecked_Return_Value__char_scanf_17.c" language="C" size="2526" checksum="d58fdd0af329ce2c472fad67f6bf792343b715c3">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92321" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if scanf() fails<br/> BadSink : Do not check if scanf() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/321/CWE252_Unchecked_Return_Value__char_scanf_18.c" language="C" size="2392" checksum="e420e00ebb7a1865cd1fe004ec863331cb6afc0f">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92322" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/322/CWE252_Unchecked_Return_Value__char_snprintf_01.c" language="C" size="2451" checksum="e546d7f163dc110206cebf74b2c81e6649aa11e3">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92323" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/323/CWE252_Unchecked_Return_Value__char_snprintf_02.c" language="C" size="3381" checksum="6573f16332b66842cbf820c7d2de2008b7334f57">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92324" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/324/CWE252_Unchecked_Return_Value__char_snprintf_03.c" language="C" size="3402" checksum="4065c565c68ac9ad3caf5761168ba257286ac8df">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92325" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/325/CWE252_Unchecked_Return_Value__char_snprintf_04.c" language="C" size="3767" checksum="4389f76fed13e9743115bec43b49ef979a89d9a8">
      <mixed line="48" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92326" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/326/CWE252_Unchecked_Return_Value__char_snprintf_05.c" language="C" size="3738" checksum="5f1befb7f050340974459413635e231b89de1ae2">
      <mixed line="48" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92327" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/327/CWE252_Unchecked_Return_Value__char_snprintf_06.c" language="C" size="3708" checksum="32cf2e4075e28736ecf464da822be46f41c866e5">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92328" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/328/CWE252_Unchecked_Return_Value__char_snprintf_07.c" language="C" size="3688" checksum="4c44bca032af4e00aab6e16762724947cd2821bd">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92329" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/329/CWE252_Unchecked_Return_Value__char_snprintf_08.c" language="C" size="3788" checksum="2371b42fde42f8c47990ef21223ff4cea790e67f">
      <mixed line="55" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92330" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/330/CWE252_Unchecked_Return_Value__char_snprintf_09.c" language="C" size="3496" checksum="c6c17e73b97bb14bae113653369108a6cade76c9">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92331" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/331/CWE252_Unchecked_Return_Value__char_snprintf_10.c" language="C" size="3447" checksum="919e90dc55acdaab40feac07215f667867dcad49">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92332" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/332/CWE252_Unchecked_Return_Value__char_snprintf_11.c" language="C" size="3510" checksum="5614c9c3ebe9f8effa51979618112366f0436c95">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92333" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/333/CWE252_Unchecked_Return_Value__char_snprintf_12.c" language="C" size="3726" checksum="56e3dea79c4e1defaa3fc0815749741634a7c116">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92334" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/334/CWE252_Unchecked_Return_Value__char_snprintf_13.c" language="C" size="3514" checksum="03b07d58f3f04279a72eb4e6b02d2b58c4240912">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92335" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/335/CWE252_Unchecked_Return_Value__char_snprintf_14.c" language="C" size="3465" checksum="c54539bb7ff469cdef0867aefad0259c49d3d8b9">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92336" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/336/CWE252_Unchecked_Return_Value__char_snprintf_15.c" language="C" size="3646" checksum="4392ceefbe8340d3ab16679d033a168b809ce893">
      <mixed line="43" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92337" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/337/CWE252_Unchecked_Return_Value__char_snprintf_16.c" language="C" size="2684" checksum="41987685e12b511097f87327ff2da5bcf052896f">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92338" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/338/CWE252_Unchecked_Return_Value__char_snprintf_17.c" language="C" size="2709" checksum="da5b786e7146c254c10d57c2893851560674fb2e">
      <mixed line="43" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92339" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snprintf() fails<br/> BadSink : Do not check if snprintf() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/339/CWE252_Unchecked_Return_Value__char_snprintf_18.c" language="C" size="2575" checksum="1ddeaaa4b4a7901753f901b31c355a13520e292c">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92340" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/340/CWE252_Unchecked_Return_Value__char_sscanf_01.c" language="C" size="2313" checksum="bb4e4db42e6dac3bc082b235fa7c3e26bd4d5085">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92341" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/341/CWE252_Unchecked_Return_Value__char_sscanf_02.c" language="C" size="3226" checksum="b14a696bae034efb046ad29162f37f69d7a2398c">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92342" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/342/CWE252_Unchecked_Return_Value__char_sscanf_03.c" language="C" size="3247" checksum="a8a73c75623151e1ce58b4e96a858be26358858d">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92343" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/343/CWE252_Unchecked_Return_Value__char_sscanf_04.c" language="C" size="3612" checksum="103b60708ead36688773cac01f9bf420b47931a5">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92344" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/344/CWE252_Unchecked_Return_Value__char_sscanf_05.c" language="C" size="3583" checksum="c2023602c4363e8388a6ed218e366e86d5c9e4b6">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92345" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/345/CWE252_Unchecked_Return_Value__char_sscanf_06.c" language="C" size="3553" checksum="ce5d11589f42cf2fbf13b8ed666d2ed0fd787864">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92346" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/346/CWE252_Unchecked_Return_Value__char_sscanf_07.c" language="C" size="3533" checksum="93e94b5c9046c378b9ef13115cbfc0241200f433">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92347" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/347/CWE252_Unchecked_Return_Value__char_sscanf_08.c" language="C" size="3633" checksum="d6b4dc96f7eef6d3b1b2030509414deaec72fbea">
      <mixed line="49" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92348" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/348/CWE252_Unchecked_Return_Value__char_sscanf_09.c" language="C" size="3341" checksum="fb60606d6e225a841b2d6f83f6165522dd31bfe1">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92349" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/349/CWE252_Unchecked_Return_Value__char_sscanf_10.c" language="C" size="3292" checksum="7aaa2cb51aa0d4143b66c43fe0ba2e3bf649508a">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92350" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/350/CWE252_Unchecked_Return_Value__char_sscanf_11.c" language="C" size="3355" checksum="13ab98778ea340e18bd3df15a94f9cd62209c284">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92351" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/351/CWE252_Unchecked_Return_Value__char_sscanf_12.c" language="C" size="3554" checksum="408422c33159da2f907de29c968646d2a331404b">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92352" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/352/CWE252_Unchecked_Return_Value__char_sscanf_13.c" language="C" size="3359" checksum="7fe8b8cc5699d62c54cc0e54b816232875a96d1c">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92353" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/353/CWE252_Unchecked_Return_Value__char_sscanf_14.c" language="C" size="3310" checksum="4451f3ba8182e0eccc673805779b4b82d8281cfd">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92354" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/354/CWE252_Unchecked_Return_Value__char_sscanf_15.c" language="C" size="3491" checksum="bc165af12996728d4484e9cd3070240e937f81f0">
      <mixed line="37" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92355" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/355/CWE252_Unchecked_Return_Value__char_sscanf_16.c" language="C" size="2546" checksum="a942349334b6d870a52b8a1792cc7828f56491e2">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92356" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/356/CWE252_Unchecked_Return_Value__char_sscanf_17.c" language="C" size="2571" checksum="644694f6147c35cc44b9bc09f843b2cb6f55f586">
      <mixed line="37" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92357" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if sscanf() fails<br/> BadSink : Do not check if sscanf() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/357/CWE252_Unchecked_Return_Value__char_sscanf_18.c" language="C" size="2437" checksum="f8309abdfd1c195cd11020d45169889e9d3b10f2">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92358" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/358/CWE252_Unchecked_Return_Value__char_w32CreateMutex_01.c" language="C" size="2475" checksum="666e958f5999ad3aeaeebf4c3f11337a1f5158ea">
      <mixed line="31" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92359" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/359/CWE252_Unchecked_Return_Value__char_w32CreateMutex_02.c" language="C" size="3431" checksum="2de93f6c869dcbb8c9afb349c8b6290513908ba9">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92360" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/360/CWE252_Unchecked_Return_Value__char_w32CreateMutex_03.c" language="C" size="3452" checksum="5b2902910446bb895615111fb424dda2313bb2e9">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92361" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/361/CWE252_Unchecked_Return_Value__char_w32CreateMutex_04.c" language="C" size="3817" checksum="7619d9b16b76197f0f3771a96c24a9a0fdae1e5e">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92362" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/362/CWE252_Unchecked_Return_Value__char_w32CreateMutex_05.c" language="C" size="3788" checksum="9700745c8fb9f486c6f63be1729c38fd2eeef927">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92363" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/363/CWE252_Unchecked_Return_Value__char_w32CreateMutex_06.c" language="C" size="3758" checksum="70dc73b6d4a0ad0b8758bf9b4c71e9dbc1ce0be9">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92364" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/364/CWE252_Unchecked_Return_Value__char_w32CreateMutex_07.c" language="C" size="3738" checksum="10770262c04572481c6e1956ce40ff717beb4ca2">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92365" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/365/CWE252_Unchecked_Return_Value__char_w32CreateMutex_08.c" language="C" size="3838" checksum="36dcf5f7f1af93b63c81dd6ae77e76124869adaf">
      <mixed line="46" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92366" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/366/CWE252_Unchecked_Return_Value__char_w32CreateMutex_09.c" language="C" size="3546" checksum="4d26323e87669d58a9b00472564367e7028d7f3f">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92367" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/367/CWE252_Unchecked_Return_Value__char_w32CreateMutex_10.c" language="C" size="3497" checksum="11b2644e433dd41775b0fc23e4969dec7be32d30">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92368" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/368/CWE252_Unchecked_Return_Value__char_w32CreateMutex_11.c" language="C" size="3560" checksum="b1cee66cdac8fed344a3f48758da3aceb0c6ca7f">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92369" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/369/CWE252_Unchecked_Return_Value__char_w32CreateMutex_12.c" language="C" size="3798" checksum="caabf038c5dd10a83b3e5335a17337f2f10041c7">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92370" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/370/CWE252_Unchecked_Return_Value__char_w32CreateMutex_13.c" language="C" size="3564" checksum="4a4f503d7d38aa270d986901a5f55f0b83dd2bec">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92371" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/371/CWE252_Unchecked_Return_Value__char_w32CreateMutex_14.c" language="C" size="3515" checksum="9e5336d7616a08afc94f3b4a518bc508a06de5a8">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92372" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/372/CWE252_Unchecked_Return_Value__char_w32CreateMutex_15.c" language="C" size="3688" checksum="ea78abc7f7edc24018714bc2aa6a6e4e363d1490">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92373" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/373/CWE252_Unchecked_Return_Value__char_w32CreateMutex_16.c" language="C" size="2712" checksum="fe53d7c0363e8ac12020508560015d8c431f1c4e">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92374" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/374/CWE252_Unchecked_Return_Value__char_w32CreateMutex_17.c" language="C" size="2737" checksum="a2683843d600ac2c12b6b04557d7f0f52a2bcadd">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92375" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexA() and handle it properly<br/> BadSink : Do not check if CreateMutexA() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/375/CWE252_Unchecked_Return_Value__char_w32CreateMutex_18.c" language="C" size="2599" checksum="0d04e9cf84bffad7519f509de84b5938403600c1">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92376" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/376/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_01.c" language="C" size="3795" checksum="fe6ad9b13b26a65b8302f16875902d9d79de2d71">
      <mixed line="45" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92377" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/377/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_02.c" language="C" size="5567" checksum="a0456db4cdcd48d4dc39598930a67b309c05a95e">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92378" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/378/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_03.c" language="C" size="5588" checksum="1a7d7051c66de08dae8b28978091a4d454fbd602">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92379" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/379/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_04.c" language="C" size="5953" checksum="6a3bfe945363408945a282495de75263bd0ab32f">
      <mixed line="53" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92380" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/380/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_05.c" language="C" size="5924" checksum="7b2ebfd882d2ca8d8541967c7b8c17df4eddbb7a">
      <mixed line="53" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92381" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/381/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_06.c" language="C" size="5894" checksum="c45af7c831a203212d990f6bb89c99934b603c7d">
      <mixed line="52" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92382" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/382/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_07.c" language="C" size="5874" checksum="5afc698f93d8bb692b1c07437f75266b121ac351">
      <mixed line="52" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92383" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/383/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_08.c" language="C" size="5974" checksum="3b0b0045841b2def5ea74cca4abf6dd4cc02c2dc">
      <mixed line="60" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92384" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/384/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_09.c" language="C" size="5682" checksum="0feeb678682519c959295ed2f98165d87b244079">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92385" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/385/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_10.c" language="C" size="5633" checksum="31883e2904097718f409f64fa8edec521aaca0ac">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92386" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/386/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_11.c" language="C" size="5696" checksum="c6fddcffe2a41db13520e8fdfba912563f5db6c0">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92387" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/387/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_12.c" language="C" size="6646" checksum="e359ca63639a822f21b328b2c1e840a704ac45d7">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92388" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/388/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_13.c" language="C" size="5700" checksum="88221e91cecc6f72b50edb7130f7ec4e0c8387b2">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92389" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/389/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_14.c" language="C" size="5651" checksum="e1adfc6f0016e5c4fbead38b0b0a75ca92d6dd9d">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92390" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/390/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_15.c" language="C" size="5668" checksum="c12301ab4bfe1f8f262018df826ec9f8a4cc440e">
      <mixed line="48" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92391" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/391/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_16.c" language="C" size="4136" checksum="b16789ef620fdd64bb35ff8313ef482165c7e594">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92392" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/392/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_17.c" language="C" size="4161" checksum="46f2245a9be40610c6326c434187c526e368713c">
      <mixed line="48" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92393" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeA() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeA() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/393/CWE252_Unchecked_Return_Value__char_w32CreateNamedPipe_18.c" language="C" size="3919" checksum="de7f82b26b99694509b5b407529cb5ba78b9063a">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92394" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/394/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_01.c" language="C" size="1884" checksum="00300b7da44d49d2371d371e173903b61321aca4">
      <mixed line="26" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92395" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/395/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_02.c" language="C" size="2451" checksum="ec951ccc66f29194428d4c53c61dfdb1353a7982">
      <mixed line="28" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92396" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/396/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_03.c" language="C" size="2472" checksum="f6331bc3852a486b85bb913ccee29c168f78cc97">
      <mixed line="28" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92397" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/397/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_04.c" language="C" size="2837" checksum="d3ca80eb5a74814cf2275d57e60d953016e3c628">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92398" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/398/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_05.c" language="C" size="2808" checksum="689c90b385e21355c09481b4e3d43c99e26e55fb">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92399" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/399/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_06.c" language="C" size="2778" checksum="cfce1d6cccf60d25fec4997302b0ba857be06372">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92400" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/400/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_07.c" language="C" size="2758" checksum="26b5c9c187f693d799090fe340e9067aa0c5ca00">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92401" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/401/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_08.c" language="C" size="2858" checksum="81d63c5522a8338c67269d210b83e60c7dd7a752">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92402" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/402/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_09.c" language="C" size="2566" checksum="dce40cdc4f633f81864a1c65bbce67c072dbcdb6">
      <mixed line="28" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92403" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/403/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_10.c" language="C" size="2517" checksum="8238786b50e0c0ebbf7cec9ecf0fff6f396b672b">
      <mixed line="28" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92404" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/404/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_11.c" language="C" size="2580" checksum="cee464024ff2a48cc0e01735d954f4d6f7b1a501">
      <mixed line="28" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92405" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/405/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_12.c" language="C" size="2481" checksum="5810fc90a1ed22d6d6e7c7256be781f2dd9a5b95">
      <mixed line="28" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92406" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/406/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_13.c" language="C" size="2584" checksum="80b017d6d14959e1fe7ff48736b2fae95d201d75">
      <mixed line="28" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92407" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/407/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_14.c" language="C" size="2535" checksum="89bb5bc78d232a10a1f220834c7c9be8c35672ad">
      <mixed line="28" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92408" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/408/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_15.c" language="C" size="2848" checksum="68f79279c089616ce494e66e08937e533782a533">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92409" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/409/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_16.c" language="C" size="2069" checksum="665ae1ecd7674d4555cfe0411ad478269371469d">
      <mixed line="28" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92410" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/410/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_17.c" language="C" size="2094" checksum="7c2f4cde01413fe04d355dcd9e7483efd55b8bce">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92411" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks:<br/> GoodSink: Check the return value of ImpersonateSelf() and handle it properly<br/> BadSink : Do not check if ImpersonateSelf() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/411/CWE252_Unchecked_Return_Value__w32ImpersonateSelf_18.c" language="C" size="2008" checksum="44278d5f4da742b56254d2d54793de203686e435">
      <mixed line="28" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92412" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/412/CWE252_Unchecked_Return_Value__wchar_t_fgets_01.c" language="C" size="2523" checksum="5e25b5f04aab1ecfd8a361ff41b087d065b613f8">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92413" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/413/CWE252_Unchecked_Return_Value__wchar_t_fgets_02.c" language="C" size="3570" checksum="26b0f5cfcc3d29e5fd7825ff6518c4522ca576c2">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92414" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/414/CWE252_Unchecked_Return_Value__wchar_t_fgets_03.c" language="C" size="3591" checksum="1559a24cb294f62df31bb1b6de6d8cd5b21c2180">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92415" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/415/CWE252_Unchecked_Return_Value__wchar_t_fgets_04.c" language="C" size="3956" checksum="770245da2f0f9af6c8bc1f4c958db2fb4e9a0703">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92416" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/416/CWE252_Unchecked_Return_Value__wchar_t_fgets_05.c" language="C" size="3927" checksum="8f7ff08a4d21883239364e036bb117b5a9b5b752">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92417" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/417/CWE252_Unchecked_Return_Value__wchar_t_fgets_06.c" language="C" size="3897" checksum="89f7c44798dd2d21282693dc54ce4dd69891a63c">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92418" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/418/CWE252_Unchecked_Return_Value__wchar_t_fgets_07.c" language="C" size="3877" checksum="e261eecd639f199f9c955a07d54409ba31f0e9f4">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92419" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/419/CWE252_Unchecked_Return_Value__wchar_t_fgets_08.c" language="C" size="3977" checksum="9f300add9cb4d6d5ec19b1e0cc395a163a531bb0">
      <mixed line="48" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92420" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/420/CWE252_Unchecked_Return_Value__wchar_t_fgets_09.c" language="C" size="3685" checksum="453f263b580d33e12e324827e514710da2c6b198">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92421" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/421/CWE252_Unchecked_Return_Value__wchar_t_fgets_10.c" language="C" size="3636" checksum="bd8aae70e48cbe9634a57a682c6745fd0c44f77d">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92422" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/422/CWE252_Unchecked_Return_Value__wchar_t_fgets_11.c" language="C" size="3699" checksum="20d809b9290827dae4fc5cd83be29c7b128dac4e">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92423" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/423/CWE252_Unchecked_Return_Value__wchar_t_fgets_12.c" language="C" size="4012" checksum="407a535680b78bdd6d74d1e367dd8f794f577e9e">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92424" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/424/CWE252_Unchecked_Return_Value__wchar_t_fgets_13.c" language="C" size="3703" checksum="bb13976ed862b216418669bc9cff580196c983c9">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92425" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/425/CWE252_Unchecked_Return_Value__wchar_t_fgets_14.c" language="C" size="3654" checksum="be00cdef55e8a99c9783920c72e8cfe9890a7570">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92426" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/426/CWE252_Unchecked_Return_Value__wchar_t_fgets_15.c" language="C" size="3803" checksum="9e99a028766f04e8793337a55f20da2e2456699b">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92427" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/427/CWE252_Unchecked_Return_Value__wchar_t_fgets_16.c" language="C" size="2776" checksum="d48f7b60c678c23313b32fb2ecc1b622f814604a">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92428" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/428/CWE252_Unchecked_Return_Value__wchar_t_fgets_17.c" language="C" size="2801" checksum="0f55479d89c08e765af811568ca87cd4952f6635">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92429" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fgets<br/> GoodSink: Check if fgetws() fails before trying to use the destination buffer<br/> BadSink : Do not check if fgetws() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/429/CWE252_Unchecked_Return_Value__wchar_t_fgets_18.c" language="C" size="2647" checksum="736e87e5468b535bf5e9f69ca3dcd1603af92058">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92430" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/430/CWE252_Unchecked_Return_Value__wchar_t_fprintf_01.c" language="C" size="1791" checksum="050c920dcb7020271ef46e45491c5286fd831779">
      <mixed line="27" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92431" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/431/CWE252_Unchecked_Return_Value__wchar_t_fprintf_02.c" language="C" size="2364" checksum="a9c0e29427267c0aad33aa35753f6414b3eb5767">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92432" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/432/CWE252_Unchecked_Return_Value__wchar_t_fprintf_03.c" language="C" size="2385" checksum="f2e87afd387149a7b9477b40646e4a0484365f18">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92433" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/433/CWE252_Unchecked_Return_Value__wchar_t_fprintf_04.c" language="C" size="2750" checksum="52200bd64a6965c3f9c435a89aa47f04caa7a524">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92434" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/434/CWE252_Unchecked_Return_Value__wchar_t_fprintf_05.c" language="C" size="2721" checksum="a6d4864a147aaf8aceb41a813263f14aef548ea2">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92435" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/435/CWE252_Unchecked_Return_Value__wchar_t_fprintf_06.c" language="C" size="2691" checksum="89acce4772ceb9d16b1c6bc530c2351f91c14c10">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92436" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/436/CWE252_Unchecked_Return_Value__wchar_t_fprintf_07.c" language="C" size="2671" checksum="e46c6ef2427af15999d69a9a5ea203d938eff09f">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92437" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/437/CWE252_Unchecked_Return_Value__wchar_t_fprintf_08.c" language="C" size="2771" checksum="565d4f50ad173fb8504e056e7d079e49c1a4e850">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92438" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/438/CWE252_Unchecked_Return_Value__wchar_t_fprintf_09.c" language="C" size="2479" checksum="63fd96bb63ca29d696fce5ea16e1e3682fe7aa5a">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92439" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/439/CWE252_Unchecked_Return_Value__wchar_t_fprintf_10.c" language="C" size="2430" checksum="82c476b7061bd2ae42ccaa51ffd95dcef3b41c93">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92440" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/440/CWE252_Unchecked_Return_Value__wchar_t_fprintf_11.c" language="C" size="2493" checksum="bb46abaf98d0e70248fb827e14aca63274d90f9d">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92441" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/441/CWE252_Unchecked_Return_Value__wchar_t_fprintf_12.c" language="C" size="2400" checksum="c0968589f4e630e57c046a9e41edc74ad29df818">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92442" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/442/CWE252_Unchecked_Return_Value__wchar_t_fprintf_13.c" language="C" size="2497" checksum="9874c620afe650c02b9d45ad4cbfc15342618661">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92443" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/443/CWE252_Unchecked_Return_Value__wchar_t_fprintf_14.c" language="C" size="2448" checksum="146c350506f1587745d9ff8aa35de2646f239610">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92444" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/444/CWE252_Unchecked_Return_Value__wchar_t_fprintf_15.c" language="C" size="2761" checksum="8ecf554bb9bc8dba6ba6bc60f44232d9b2886104">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92445" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/445/CWE252_Unchecked_Return_Value__wchar_t_fprintf_16.c" language="C" size="1976" checksum="952aa0f532ed9d92ed3797762532f41b5c3aad7a">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92446" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/446/CWE252_Unchecked_Return_Value__wchar_t_fprintf_17.c" language="C" size="2001" checksum="79a614ebee9c27ad58f7c1b3498900e2e553310c">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92447" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fprintf<br/> GoodSink: Check if fwprintf() fails<br/> BadSink : Do not check if fwprintf() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/447/CWE252_Unchecked_Return_Value__wchar_t_fprintf_18.c" language="C" size="1915" checksum="cd42324cd322ca366b4fff4743f666cfa38e1279">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92448" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/448/CWE252_Unchecked_Return_Value__wchar_t_fputc_01.c" language="C" size="1763" checksum="b295ea32ed76f6964c5a4fe95c8d711e32df56bb">
      <mixed line="27" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92449" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/449/CWE252_Unchecked_Return_Value__wchar_t_fputc_02.c" language="C" size="2331" checksum="cd5aa93d9cd00b167ad9dc4e3df4cbed79473b66">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92450" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/450/CWE252_Unchecked_Return_Value__wchar_t_fputc_03.c" language="C" size="2352" checksum="0d3f03ae05e1f8f65fb823282090366b9c354d80">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92451" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/451/CWE252_Unchecked_Return_Value__wchar_t_fputc_04.c" language="C" size="2717" checksum="51539260d1a9fac15a4642bbcad283e9b4171870">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92452" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/452/CWE252_Unchecked_Return_Value__wchar_t_fputc_05.c" language="C" size="2688" checksum="6b025607180265b1e4382a2c9ff181523843f7d7">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92453" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/453/CWE252_Unchecked_Return_Value__wchar_t_fputc_06.c" language="C" size="2658" checksum="fe56bb86e772843a83a410a5442c28b54ef18e7d">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92454" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/454/CWE252_Unchecked_Return_Value__wchar_t_fputc_07.c" language="C" size="2638" checksum="f48bfa53fadb44bfffc504f55f58a0a237d7ec50">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92455" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/455/CWE252_Unchecked_Return_Value__wchar_t_fputc_08.c" language="C" size="2738" checksum="cc7f7c2afdd292e5e6562631b63fefce8e5974d0">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92456" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/456/CWE252_Unchecked_Return_Value__wchar_t_fputc_09.c" language="C" size="2446" checksum="340a31b2700d94f5ad3ef788d0be8eec0e2a67f7">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92457" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/457/CWE252_Unchecked_Return_Value__wchar_t_fputc_10.c" language="C" size="2397" checksum="112b27a7bdbd81ad3b818447bea3e955022c674c">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92458" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/458/CWE252_Unchecked_Return_Value__wchar_t_fputc_11.c" language="C" size="2460" checksum="0131bd4998262349107437733736dd31800ca641">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92459" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/459/CWE252_Unchecked_Return_Value__wchar_t_fputc_12.c" language="C" size="2362" checksum="14914c2031d322015057b70ca126aa8cf2eee06b">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92460" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/460/CWE252_Unchecked_Return_Value__wchar_t_fputc_13.c" language="C" size="2464" checksum="e4d52778ce135f6797092c439bc72daf4b18d614">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92461" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/461/CWE252_Unchecked_Return_Value__wchar_t_fputc_14.c" language="C" size="2415" checksum="2c1b9100bb53a7dcbee9ded93391d3633dccbbbf">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92462" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/462/CWE252_Unchecked_Return_Value__wchar_t_fputc_15.c" language="C" size="2728" checksum="2db48d888e22c862f88759f08d04218da8d7114e">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92463" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/463/CWE252_Unchecked_Return_Value__wchar_t_fputc_16.c" language="C" size="1948" checksum="071256e3225d331f4deaef04d2f3c3c018a2b799">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92464" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/464/CWE252_Unchecked_Return_Value__wchar_t_fputc_17.c" language="C" size="1973" checksum="8c26cf1e098c32336b7bed0a66054f1ee8749347">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92465" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputc<br/> GoodSink: Check if fputwc() fails<br/> BadSink : Do not check if fputwc() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/465/CWE252_Unchecked_Return_Value__wchar_t_fputc_18.c" language="C" size="1887" checksum="0d24b1319c1de768568f242c2f95cf9d6ff66d7c">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92466" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/466/CWE252_Unchecked_Return_Value__wchar_t_fputs_01.c" language="C" size="1755" checksum="e1620687246fd3699132ad02acd3ee259ace9cb7">
      <mixed line="27" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92467" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/467/CWE252_Unchecked_Return_Value__wchar_t_fputs_02.c" language="C" size="2319" checksum="275d4387a3e599b96a272f5d5853162b99e52702">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92468" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/468/CWE252_Unchecked_Return_Value__wchar_t_fputs_03.c" language="C" size="2340" checksum="90305b3e8ea99045de813bf55f2dc7028989779b">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92469" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/469/CWE252_Unchecked_Return_Value__wchar_t_fputs_04.c" language="C" size="2705" checksum="a6123d8214a7053c274ce6541bd1cff608a33792">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92470" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/470/CWE252_Unchecked_Return_Value__wchar_t_fputs_05.c" language="C" size="2676" checksum="061472e03d62a6e3839438fadcb63a2d37cd0f71">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92471" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/471/CWE252_Unchecked_Return_Value__wchar_t_fputs_06.c" language="C" size="2646" checksum="d82d6c9f3210f9c53f2158d93b6132e0b74e0b18">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92472" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/472/CWE252_Unchecked_Return_Value__wchar_t_fputs_07.c" language="C" size="2626" checksum="3e328197eb557317961d5b93ac3fdb47a87e9e1e">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92473" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/473/CWE252_Unchecked_Return_Value__wchar_t_fputs_08.c" language="C" size="2726" checksum="34edc696f5b596cf2ad3b6b008554ad52108c2f0">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92474" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/474/CWE252_Unchecked_Return_Value__wchar_t_fputs_09.c" language="C" size="2434" checksum="21160811f65f073041e52e798c771249533e7e83">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92475" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/475/CWE252_Unchecked_Return_Value__wchar_t_fputs_10.c" language="C" size="2385" checksum="a3e3ac15be72f9024a6c5e2366acefbdca78e60e">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92476" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/476/CWE252_Unchecked_Return_Value__wchar_t_fputs_11.c" language="C" size="2448" checksum="f35a64e3a1b05cf034b90f1bb8af215212edcf29">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92477" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/477/CWE252_Unchecked_Return_Value__wchar_t_fputs_12.c" language="C" size="2346" checksum="12c45bcc0aa6d4a4e3fd1a2316b7438e48c36779">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92478" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/478/CWE252_Unchecked_Return_Value__wchar_t_fputs_13.c" language="C" size="2452" checksum="debe3c8f76d11dcd195fdb88f4c39f3a3cc82be1">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92479" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/479/CWE252_Unchecked_Return_Value__wchar_t_fputs_14.c" language="C" size="2403" checksum="45847d6a6c59b0cb381bc8b698e47789d534f8bd">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92480" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/480/CWE252_Unchecked_Return_Value__wchar_t_fputs_15.c" language="C" size="2716" checksum="e9089a91f26621a3471efa2e107adca454d483b3">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92481" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/481/CWE252_Unchecked_Return_Value__wchar_t_fputs_16.c" language="C" size="1940" checksum="538519af6d8d93a6c35c6bd7b30b21cceb81b105">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92482" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/482/CWE252_Unchecked_Return_Value__wchar_t_fputs_17.c" language="C" size="1965" checksum="900e2ce5d7e99896830edb372f9f8fca061ec6c6">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92483" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fputs<br/> GoodSink: Check if fputws() fails<br/> BadSink : Do not check if fputws() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/483/CWE252_Unchecked_Return_Value__wchar_t_fputs_18.c" language="C" size="1879" checksum="1dbc54935eb4254fe29364212b3a25282f494c46">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92484" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/484/CWE252_Unchecked_Return_Value__wchar_t_fread_01.c" language="C" size="2385" checksum="38e38444dc5a21507bca499a8fa6b00f220eb20c">
      <mixed line="32" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92485" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/485/CWE252_Unchecked_Return_Value__wchar_t_fread_02.c" language="C" size="3343" checksum="f55f3806a01f1daaff72c93ad0c805541d6f30ab">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92486" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/486/CWE252_Unchecked_Return_Value__wchar_t_fread_03.c" language="C" size="3364" checksum="4f933fd915d2adf1016955f5446720d9d983fa9f">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92487" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/487/CWE252_Unchecked_Return_Value__wchar_t_fread_04.c" language="C" size="3729" checksum="54376dded652ea1d2c089e2108f000c4edcc7dbd">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92488" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/488/CWE252_Unchecked_Return_Value__wchar_t_fread_05.c" language="C" size="3700" checksum="4b9d67d3ecf7ab1903d9abc74d337d71c1e34031">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92489" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/489/CWE252_Unchecked_Return_Value__wchar_t_fread_06.c" language="C" size="3670" checksum="a245215697d056fd458bb55bd309523c5a06fa71">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92490" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/490/CWE252_Unchecked_Return_Value__wchar_t_fread_07.c" language="C" size="3650" checksum="e47d1a4aef5a6e244e86032b7621618c0ef1202c">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92491" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/491/CWE252_Unchecked_Return_Value__wchar_t_fread_08.c" language="C" size="3750" checksum="8934d26ebc7d0bcbb5fb4b152ff3971000d389d2">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92492" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/492/CWE252_Unchecked_Return_Value__wchar_t_fread_09.c" language="C" size="3458" checksum="d9761d7254d4518b96e91183f70020e27a0facd5">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92493" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/493/CWE252_Unchecked_Return_Value__wchar_t_fread_10.c" language="C" size="3409" checksum="f7a26e520fadfd0e3aede04eea8e7e63337e07ad">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92494" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/494/CWE252_Unchecked_Return_Value__wchar_t_fread_11.c" language="C" size="3472" checksum="0fb1528a84149c1102c024320d457490b0a41006">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92495" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/495/CWE252_Unchecked_Return_Value__wchar_t_fread_12.c" language="C" size="3716" checksum="3a94bc23bf8d80957885d75ce8b391d8be1eb1cd">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92496" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/496/CWE252_Unchecked_Return_Value__wchar_t_fread_13.c" language="C" size="3476" checksum="729b5393c64e8c8787632208750eb90543c76432">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92497" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/497/CWE252_Unchecked_Return_Value__wchar_t_fread_14.c" language="C" size="3427" checksum="e29b47c9600b42dbe8868174056d1e573464e6a1">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92498" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/498/CWE252_Unchecked_Return_Value__wchar_t_fread_15.c" language="C" size="3608" checksum="853f1b1b395a1be8bc1fadc2fa0345e80005976c">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92499" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/499/CWE252_Unchecked_Return_Value__wchar_t_fread_16.c" language="C" size="2618" checksum="016739d409a26c8c86da9a75472f8628748d0674">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92500" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/500/CWE252_Unchecked_Return_Value__wchar_t_fread_17.c" language="C" size="2643" checksum="33d03f62fbd3c34d2d6865a33f5a7f3001dc40c8">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92501" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fread<br/> GoodSink: Check if fread() fails<br/> BadSink : Do not check if fread() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/501/CWE252_Unchecked_Return_Value__wchar_t_fread_18.c" language="C" size="2509" checksum="3550e6878e5c0a88e55d7a63f8a5744cc298ee91">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92502" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/502/CWE252_Unchecked_Return_Value__wchar_t_fscanf_01.c" language="C" size="2331" checksum="9f1ace4ab73cb2a4ef618950a004ccb88b3b119a">
      <mixed line="32" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92503" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/503/CWE252_Unchecked_Return_Value__wchar_t_fscanf_02.c" language="C" size="3257" checksum="95c8c83fd8fedafb12644349be8620cfebce397d">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92504" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/504/CWE252_Unchecked_Return_Value__wchar_t_fscanf_03.c" language="C" size="3278" checksum="e1a87f4992fa97af45bc4b232c53020362dd7c1c">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92505" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/505/CWE252_Unchecked_Return_Value__wchar_t_fscanf_04.c" language="C" size="3643" checksum="e45da31a03c03358e828b84d7c65f93737332643">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92506" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/506/CWE252_Unchecked_Return_Value__wchar_t_fscanf_05.c" language="C" size="3614" checksum="3e1b5d02462cef2056855a2e7ae5949b26082ef7">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92507" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/507/CWE252_Unchecked_Return_Value__wchar_t_fscanf_06.c" language="C" size="3584" checksum="21cf956aa52dbad24484ae117a907d4da178fd7c">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92508" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/508/CWE252_Unchecked_Return_Value__wchar_t_fscanf_07.c" language="C" size="3564" checksum="5e925524ec778ad1f0772103c93a24e9f3325d93">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92509" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/509/CWE252_Unchecked_Return_Value__wchar_t_fscanf_08.c" language="C" size="3664" checksum="ecde42041bce770cf7f2419dbdebf30ed962582c">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92510" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/510/CWE252_Unchecked_Return_Value__wchar_t_fscanf_09.c" language="C" size="3372" checksum="4d1ec6d42aeea19b82a1118ccd7a036dad7b5a87">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92511" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/511/CWE252_Unchecked_Return_Value__wchar_t_fscanf_10.c" language="C" size="3323" checksum="fd7c14f88f7725e72525957a6666f8fc994bc430">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92512" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/512/CWE252_Unchecked_Return_Value__wchar_t_fscanf_11.c" language="C" size="3386" checksum="932bbaa851d127aa3dfdb766a4f6b9a57f700238">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92513" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/513/CWE252_Unchecked_Return_Value__wchar_t_fscanf_12.c" language="C" size="3598" checksum="f2eea3e7205c5cd0b81a5e577637f5ec692fde0c">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92514" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/514/CWE252_Unchecked_Return_Value__wchar_t_fscanf_13.c" language="C" size="3390" checksum="531471f6bfb93d8996f46d018be3e173b898d5ca">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92515" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/515/CWE252_Unchecked_Return_Value__wchar_t_fscanf_14.c" language="C" size="3341" checksum="b00493d8a024da30b9ea920cab722aeca2e6d3f0">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92516" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/516/CWE252_Unchecked_Return_Value__wchar_t_fscanf_15.c" language="C" size="3522" checksum="56e92f7fac61d3ad09f87f774055f17e887fe0be">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92517" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/517/CWE252_Unchecked_Return_Value__wchar_t_fscanf_16.c" language="C" size="2564" checksum="86c397b82034c911e03ee5d6b415408baa2840a1">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92518" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/518/CWE252_Unchecked_Return_Value__wchar_t_fscanf_17.c" language="C" size="2589" checksum="71f88aa5e9e8c4ddf43610f9c4fc5c51866de942">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92519" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fscanf<br/> GoodSink: Check if fwscanf() fails<br/> BadSink : Do not check if fwscanf() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/519/CWE252_Unchecked_Return_Value__wchar_t_fscanf_18.c" language="C" size="2455" checksum="3cdc0a8318d460a9b4020e5a667d7e87e915b462">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92520" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/520/CWE252_Unchecked_Return_Value__wchar_t_fwrite_01.c" language="C" size="1868" checksum="f61ba6eec653e5432cb09a6d91dfdc1d69372cd6">
      <mixed line="27" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92521" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/521/CWE252_Unchecked_Return_Value__wchar_t_fwrite_02.c" language="C" size="2492" checksum="ee9ef6b7f6b5abf576c7cf9d20756bf561b7735c">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92522" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/522/CWE252_Unchecked_Return_Value__wchar_t_fwrite_03.c" language="C" size="2513" checksum="3e843184ca06766a07bf8d091a80a454790c0440">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92523" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/523/CWE252_Unchecked_Return_Value__wchar_t_fwrite_04.c" language="C" size="2878" checksum="79c962cf9645e9168d16356818eb78f8d3dae0db">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92524" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/524/CWE252_Unchecked_Return_Value__wchar_t_fwrite_05.c" language="C" size="2849" checksum="43a57f75e819297b533912a15c94df7bc0a524a6">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92525" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/525/CWE252_Unchecked_Return_Value__wchar_t_fwrite_06.c" language="C" size="2819" checksum="bae6699e882464fb33ff3b6e7bb193f7525a823d">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92526" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/526/CWE252_Unchecked_Return_Value__wchar_t_fwrite_07.c" language="C" size="2799" checksum="65904c0af713951b274dc4e6890e96b96afb03ee">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92527" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/527/CWE252_Unchecked_Return_Value__wchar_t_fwrite_08.c" language="C" size="2899" checksum="1153c024ae1ee961b9964c4548b962797f59849a">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92528" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/528/CWE252_Unchecked_Return_Value__wchar_t_fwrite_09.c" language="C" size="2607" checksum="42620c542a8853fe0568e3de408474c7f308e71d">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92529" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/529/CWE252_Unchecked_Return_Value__wchar_t_fwrite_10.c" language="C" size="2558" checksum="45cd858691b09c24ce3d7c80b5ab117df527507b">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92530" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/530/CWE252_Unchecked_Return_Value__wchar_t_fwrite_11.c" language="C" size="2621" checksum="3e9cee86db2f451a8c5d9d9bc086cfce6c07036b">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92531" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/531/CWE252_Unchecked_Return_Value__wchar_t_fwrite_12.c" language="C" size="2579" checksum="9b418552b232b9d5d2e5f574fc123f4139d537f9">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92532" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/532/CWE252_Unchecked_Return_Value__wchar_t_fwrite_13.c" language="C" size="2625" checksum="a91226554384b126225c693dac5a6e4c3652b155">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92533" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/533/CWE252_Unchecked_Return_Value__wchar_t_fwrite_14.c" language="C" size="2576" checksum="f898971dc0a62fea5ee360cb98b29e1dc622c231">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92534" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/534/CWE252_Unchecked_Return_Value__wchar_t_fwrite_15.c" language="C" size="2889" checksum="797359c7dc5e3550f4c4c65762c4058f83ffd801">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92535" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/535/CWE252_Unchecked_Return_Value__wchar_t_fwrite_16.c" language="C" size="2053" checksum="5c82e90e5bcf7bf143af11449968e6c61ee743d1">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92536" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/536/CWE252_Unchecked_Return_Value__wchar_t_fwrite_17.c" language="C" size="2078" checksum="647dc3db543ef3581e9043f49d9ddb72d5b52459">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92537" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: fwrite<br/> GoodSink: Check if fwrite() fails<br/> BadSink : Do not check if fwrite() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/537/CWE252_Unchecked_Return_Value__wchar_t_fwrite_18.c" language="C" size="1992" checksum="75873ba6f55d5b641795281d9160af6055abd35b">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92538" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/538/CWE252_Unchecked_Return_Value__wchar_t_putc_01.c" language="C" size="1752" checksum="23854eca17e663356c44dda9c1bff0c91c24f127">
      <mixed line="27" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92539" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/539/CWE252_Unchecked_Return_Value__wchar_t_putc_02.c" language="C" size="2318" checksum="26d6ac7de88661b6de2376964a56cd3bf2374241">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92540" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/540/CWE252_Unchecked_Return_Value__wchar_t_putc_03.c" language="C" size="2339" checksum="a0df581436496b9c39ba142c7e9ce0fadd9aa005">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92541" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/541/CWE252_Unchecked_Return_Value__wchar_t_putc_04.c" language="C" size="2704" checksum="6aa9dd87a47bc92938ce656462a9cb538eef4cd9">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92542" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/542/CWE252_Unchecked_Return_Value__wchar_t_putc_05.c" language="C" size="2675" checksum="d433f200da99655d4a0f1ff74cb9b6ad79a1b3c7">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92543" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/543/CWE252_Unchecked_Return_Value__wchar_t_putc_06.c" language="C" size="2645" checksum="e519dbd169b094b35494dc7b81b7e80c416c144e">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92544" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/544/CWE252_Unchecked_Return_Value__wchar_t_putc_07.c" language="C" size="2625" checksum="e928ac6575599c9859a3c8d46cb939499b1382bd">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92545" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/545/CWE252_Unchecked_Return_Value__wchar_t_putc_08.c" language="C" size="2725" checksum="3ec837421339bb66efa0f1e25b9619cdd5ead8bc">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92546" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/546/CWE252_Unchecked_Return_Value__wchar_t_putc_09.c" language="C" size="2433" checksum="83b74322295d028fe14276096b5dbc6a445bdd11">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92547" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/547/CWE252_Unchecked_Return_Value__wchar_t_putc_10.c" language="C" size="2384" checksum="c99b78190aa29bb2ba588f34761978b491936199">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92548" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/548/CWE252_Unchecked_Return_Value__wchar_t_putc_11.c" language="C" size="2447" checksum="3c8d85542d9611397c9bea6763deabd503c91208">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92549" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/549/CWE252_Unchecked_Return_Value__wchar_t_putc_12.c" language="C" size="2347" checksum="a9d053a57b1f5ca49be2c0c47140299e6dfab31a">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92550" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/550/CWE252_Unchecked_Return_Value__wchar_t_putc_13.c" language="C" size="2451" checksum="05c966ed3697add1259a47bd1b3bee3bb435d7ee">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92551" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/551/CWE252_Unchecked_Return_Value__wchar_t_putc_14.c" language="C" size="2402" checksum="14b67a65861a639a11bcb5d84fccbe3b7c522ca7">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92552" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/552/CWE252_Unchecked_Return_Value__wchar_t_putc_15.c" language="C" size="2715" checksum="5a848e60adf16a24bcda9f7b67828877ac5fdcec">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92553" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/553/CWE252_Unchecked_Return_Value__wchar_t_putc_16.c" language="C" size="1937" checksum="138f6676a9aaf564d052da54131c716d98f93262">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92554" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/554/CWE252_Unchecked_Return_Value__wchar_t_putc_17.c" language="C" size="1962" checksum="180495cbc58b25bdf75dd0e39f05f7f98e42cbc8">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92555" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putc<br/> GoodSink: Check if putwc() fails<br/> BadSink : Do not check if putwc() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/555/CWE252_Unchecked_Return_Value__wchar_t_putc_18.c" language="C" size="1876" checksum="6722c58924dab34311c0d91b2721187f7cac59ef">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92556" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/556/CWE252_Unchecked_Return_Value__wchar_t_putchar_01.c" language="C" size="1769" checksum="d5d044eb9fce6ee45a8c6ba4e5e76c7cf3fd3e8c">
      <mixed line="27" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92557" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/557/CWE252_Unchecked_Return_Value__wchar_t_putchar_02.c" language="C" size="2333" checksum="1b5097888207922c84bbb74c84d4aaa2fe7e7606">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92558" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/558/CWE252_Unchecked_Return_Value__wchar_t_putchar_03.c" language="C" size="2354" checksum="532db7af81146a0040ebf99a84a39ff36f8ee6dc">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92559" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/559/CWE252_Unchecked_Return_Value__wchar_t_putchar_04.c" language="C" size="2719" checksum="05fedaebad9f58ee4ba89bac94893dbe85568ae8">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92560" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/560/CWE252_Unchecked_Return_Value__wchar_t_putchar_05.c" language="C" size="2690" checksum="e26d364091957448ed77d4f5cbc7bbf17fc33597">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92561" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/561/CWE252_Unchecked_Return_Value__wchar_t_putchar_06.c" language="C" size="2660" checksum="8ee6a445418c8002362338c60b03a3aee83915ca">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92562" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/562/CWE252_Unchecked_Return_Value__wchar_t_putchar_07.c" language="C" size="2640" checksum="13909ed2824fc0abd9294cc39942744d0bbff199">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92563" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/563/CWE252_Unchecked_Return_Value__wchar_t_putchar_08.c" language="C" size="2740" checksum="523eae5c6570f60db2e97a313f39af48f6ae1645">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92564" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/564/CWE252_Unchecked_Return_Value__wchar_t_putchar_09.c" language="C" size="2448" checksum="7f7c8c7a924c914ce48f431e7a0950cc57375811">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92565" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/565/CWE252_Unchecked_Return_Value__wchar_t_putchar_10.c" language="C" size="2399" checksum="985925272bb0fa77dbb36482ebc56f5d99788421">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92566" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/566/CWE252_Unchecked_Return_Value__wchar_t_putchar_11.c" language="C" size="2462" checksum="c821f14d2f822dfae196a3f4837b95491447a41c">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92567" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/567/CWE252_Unchecked_Return_Value__wchar_t_putchar_12.c" language="C" size="2360" checksum="eabbac0684735e1884f19b762645788137624093">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92568" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/568/CWE252_Unchecked_Return_Value__wchar_t_putchar_13.c" language="C" size="2466" checksum="a3108bb609b0ff0e853b95f266bf8d69114f6a33">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92569" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/569/CWE252_Unchecked_Return_Value__wchar_t_putchar_14.c" language="C" size="2417" checksum="a7558bd451b5e2e464eca09300dab416905fe257">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92570" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/570/CWE252_Unchecked_Return_Value__wchar_t_putchar_15.c" language="C" size="2730" checksum="ed1a921aebd4ee39337223da9a218f5ddb7457e5">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92571" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/571/CWE252_Unchecked_Return_Value__wchar_t_putchar_16.c" language="C" size="1954" checksum="2a0191f61e23709288842576424d22d8e71cd31d">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92572" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/572/CWE252_Unchecked_Return_Value__wchar_t_putchar_17.c" language="C" size="1979" checksum="4adb3fbb53f67831e28fb82aa3adedf62149f3ea">
      <mixed line="30" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92573" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: putchar<br/> GoodSink: Check if putwchar() fails<br/> BadSink : Do not check if putwchar() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/573/CWE252_Unchecked_Return_Value__wchar_t_putchar_18.c" language="C" size="1893" checksum="a78123cba992fa974684f64c3d6190ae2b08f59b">
      <mixed line="29" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92574" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/574/CWE252_Unchecked_Return_Value__wchar_t_puts_01.c" language="C" size="1795" checksum="72fc0b716e694b9384c69ecaf1317a72e00ba058">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92575" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/575/CWE252_Unchecked_Return_Value__wchar_t_puts_02.c" language="C" size="2347" checksum="91ea2743cb4cd2ec9ee36996623ff6582205a93b">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92576" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/576/CWE252_Unchecked_Return_Value__wchar_t_puts_03.c" language="C" size="2368" checksum="51511f5ebc13a5bf31a51f249efe42a5a34fc48b">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92577" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/577/CWE252_Unchecked_Return_Value__wchar_t_puts_04.c" language="C" size="2733" checksum="8a8cef05d72904733094db75b8a4d2ec0f6e7ccd">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92578" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/578/CWE252_Unchecked_Return_Value__wchar_t_puts_05.c" language="C" size="2704" checksum="bcb6bbda91030a08a70e4d25eb7cc97dab285b90">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92579" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/579/CWE252_Unchecked_Return_Value__wchar_t_puts_06.c" language="C" size="2674" checksum="3445d5aeaa9c2b5628be2ad18403862f34814d5e">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92580" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/580/CWE252_Unchecked_Return_Value__wchar_t_puts_07.c" language="C" size="2654" checksum="89d4be6652d4c19b96cc54fa4e3982bfb89e9230">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92581" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/581/CWE252_Unchecked_Return_Value__wchar_t_puts_08.c" language="C" size="2754" checksum="f5e38dd78f320bfb4a5277cd7482c493a7c14acb">
      <mixed line="48" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92582" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/582/CWE252_Unchecked_Return_Value__wchar_t_puts_09.c" language="C" size="2462" checksum="6c31c8707c674233416c3b2af100c30a3315565f">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92583" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/583/CWE252_Unchecked_Return_Value__wchar_t_puts_10.c" language="C" size="2413" checksum="4772b0cffc3944410a7658bfc8455c1bbd15cf4c">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92584" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/584/CWE252_Unchecked_Return_Value__wchar_t_puts_11.c" language="C" size="2476" checksum="15531b5b247fdd6b2c95204f96e2c5519357488c">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92585" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/585/CWE252_Unchecked_Return_Value__wchar_t_puts_12.c" language="C" size="2362" checksum="844f4c65a9023015f1e52f073fc9928da6a511d7">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92586" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/586/CWE252_Unchecked_Return_Value__wchar_t_puts_13.c" language="C" size="2480" checksum="ce915b5bf42b740b4b8f4476a953226bf68499fa">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92587" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/587/CWE252_Unchecked_Return_Value__wchar_t_puts_14.c" language="C" size="2431" checksum="dcff95d728f204dee7d18ffd21558c2d4e190903">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92588" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/588/CWE252_Unchecked_Return_Value__wchar_t_puts_15.c" language="C" size="2744" checksum="b60b6349a953b9bca2de142a2b091db1c8ba58f8">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92589" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/589/CWE252_Unchecked_Return_Value__wchar_t_puts_16.c" language="C" size="1980" checksum="4471a76203b941202dd917438ad0478d99853161">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92590" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/590/CWE252_Unchecked_Return_Value__wchar_t_puts_17.c" language="C" size="2005" checksum="fe64bf23542d503548eea83dccc28e2ca11478d7">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92591" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: puts<br/> GoodSink: Check if puts() fails<br/> BadSink : Do not check if puts() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/591/CWE252_Unchecked_Return_Value__wchar_t_puts_18.c" language="C" size="1919" checksum="9798a9537695883ad3740d13766c5f785504b4c9">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92592" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/592/CWE252_Unchecked_Return_Value__wchar_t_remove_01.c" language="C" size="1841" checksum="1142bd8ba70809bbba402993ca575fa577f4d979">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92593" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/593/CWE252_Unchecked_Return_Value__wchar_t_remove_02.c" language="C" size="2404" checksum="e990d2d2f00cd3f584405d8bfab6ddfd24830ff2">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92594" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/594/CWE252_Unchecked_Return_Value__wchar_t_remove_03.c" language="C" size="2425" checksum="56d8727e6e7d58e4de4ed557af3f42b210634151">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92595" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/595/CWE252_Unchecked_Return_Value__wchar_t_remove_04.c" language="C" size="2790" checksum="ce13afd9c3bfae332a2538850d49d7da1009d5c8">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92596" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/596/CWE252_Unchecked_Return_Value__wchar_t_remove_05.c" language="C" size="2761" checksum="20aa0b6f1a361f6d9e3aad808c499a771878d05e">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92597" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/597/CWE252_Unchecked_Return_Value__wchar_t_remove_06.c" language="C" size="2731" checksum="6c9e61a0f673ff714251abf97fec3e5335c3cf0b">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92598" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/598/CWE252_Unchecked_Return_Value__wchar_t_remove_07.c" language="C" size="2711" checksum="fcb7436fa012067868eea34114cfe87b8f44af57">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92599" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/599/CWE252_Unchecked_Return_Value__wchar_t_remove_08.c" language="C" size="2811" checksum="02b8f692810d665ae3feb5c067bb4c329f9cc940">
      <mixed line="48" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92600" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/600/CWE252_Unchecked_Return_Value__wchar_t_remove_09.c" language="C" size="2519" checksum="0fdd25b3497e4bf8242ab21f02adbc406dfe1fb6">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92601" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/601/CWE252_Unchecked_Return_Value__wchar_t_remove_10.c" language="C" size="2470" checksum="6ab520e150200700a018e43edcbf877db0b10323">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92602" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/602/CWE252_Unchecked_Return_Value__wchar_t_remove_11.c" language="C" size="2533" checksum="2c2e9f81290f8e8ca403e2f4f8035e1da7b8efcb">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92603" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/603/CWE252_Unchecked_Return_Value__wchar_t_remove_12.c" language="C" size="2430" checksum="0b34e54e0bfa84205aed4b3aac9fb06e4d1e57a1">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92604" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/604/CWE252_Unchecked_Return_Value__wchar_t_remove_13.c" language="C" size="2537" checksum="5af5f77e60645e3fea12afcca9715093cad062be">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92605" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/605/CWE252_Unchecked_Return_Value__wchar_t_remove_14.c" language="C" size="2488" checksum="83f6a45e972c163a8f91d1b6b6485dd0313d3d25">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92606" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/606/CWE252_Unchecked_Return_Value__wchar_t_remove_15.c" language="C" size="2801" checksum="7d39874661e41fa07f142e2100156e86f8c51a02">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92607" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/607/CWE252_Unchecked_Return_Value__wchar_t_remove_16.c" language="C" size="2026" checksum="92a03c9ac72642a87e4090638351677d6b2826bb">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92608" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/608/CWE252_Unchecked_Return_Value__wchar_t_remove_17.c" language="C" size="2051" checksum="c8336f1c3995c94300881d8eeb72e26657d55351">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92609" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: remove<br/> GoodSink: Check if remove() fails<br/> BadSink : Do not check if remove() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/609/CWE252_Unchecked_Return_Value__wchar_t_remove_18.c" language="C" size="1965" checksum="7c2314a51f46759ba67704b69ab21365df4e4be4">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92610" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/610/CWE252_Unchecked_Return_Value__wchar_t_rename_01.c" language="C" size="1988" checksum="50edc7ceb59a35bb85c7a1b2b1fb583613c76f14">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92611" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/611/CWE252_Unchecked_Return_Value__wchar_t_rename_02.c" language="C" size="2574" checksum="df6d7ad2463b76189deeb1a50a965fcbdc4ce022">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92612" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/612/CWE252_Unchecked_Return_Value__wchar_t_rename_03.c" language="C" size="2595" checksum="1522428b99d821d8e39f2bebff4aea2dacbada00">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92613" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/613/CWE252_Unchecked_Return_Value__wchar_t_rename_04.c" language="C" size="2960" checksum="50f8a41f819939ced19cb9ca8ac73413c7ce2b6d">
      <mixed line="44" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92614" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/614/CWE252_Unchecked_Return_Value__wchar_t_rename_05.c" language="C" size="2931" checksum="82a8c83bd0657681478bc7eb1041e18b928bca24">
      <mixed line="44" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92615" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/615/CWE252_Unchecked_Return_Value__wchar_t_rename_06.c" language="C" size="2901" checksum="fa69cd58ce0674a3eeec92ed67fc80c79c051c33">
      <mixed line="43" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92616" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/616/CWE252_Unchecked_Return_Value__wchar_t_rename_07.c" language="C" size="2881" checksum="f3f179a915ee5e00d6b6c9ed9228a226457dee94">
      <mixed line="43" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92617" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/617/CWE252_Unchecked_Return_Value__wchar_t_rename_08.c" language="C" size="2981" checksum="9ae4dc5001501ff12de64705b2c85c1ff1116a3e">
      <mixed line="51" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92618" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/618/CWE252_Unchecked_Return_Value__wchar_t_rename_09.c" language="C" size="2689" checksum="7c51117c97ce5ecb575dd38618d52f1b2976322c">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92619" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/619/CWE252_Unchecked_Return_Value__wchar_t_rename_10.c" language="C" size="2640" checksum="cba5a525666277e9b9297b4e5a131d1b056a9c49">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92620" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/620/CWE252_Unchecked_Return_Value__wchar_t_rename_11.c" language="C" size="2703" checksum="1faa80c0402af15256ea5cfbf93fbd689dc0ce05">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92621" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/621/CWE252_Unchecked_Return_Value__wchar_t_rename_12.c" language="C" size="2623" checksum="d66dbb3618d4f5bbac7ebcffa8e7524c8cb16d66">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92622" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/622/CWE252_Unchecked_Return_Value__wchar_t_rename_13.c" language="C" size="2707" checksum="20a33a80b52fe3fc6b0acfc4a8220216d2783a93">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92623" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/623/CWE252_Unchecked_Return_Value__wchar_t_rename_14.c" language="C" size="2658" checksum="728b3b87d0ffbb17aab80fbfc560d05b9a1c57ab">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92624" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/624/CWE252_Unchecked_Return_Value__wchar_t_rename_15.c" language="C" size="2971" checksum="38bcdcc21245cdad11d55dbd6ff8cf78d45322c4">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92625" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/625/CWE252_Unchecked_Return_Value__wchar_t_rename_16.c" language="C" size="2173" checksum="fe9bc52d10bf98ec0e8f9bcf4a707cac8fc3651d">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92626" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/626/CWE252_Unchecked_Return_Value__wchar_t_rename_17.c" language="C" size="2198" checksum="ebd3957c0c09d376f8f32758a97b6afd785a7da4">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92627" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: rename<br/> GoodSink: Check if rename() fails<br/> BadSink : Do not check if rename() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/627/CWE252_Unchecked_Return_Value__wchar_t_rename_18.c" language="C" size="2112" checksum="52ba8e3aa4566f6f261343a93b002a118b1a5e20">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92628" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/628/CWE252_Unchecked_Return_Value__wchar_t_scanf_01.c" language="C" size="2306" checksum="2f1e8356096b461ccf5898d19fbc8a64ae9f840c">
      <mixed line="32" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92629" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/629/CWE252_Unchecked_Return_Value__wchar_t_scanf_02.c" language="C" size="3223" checksum="a748a10ac821ce9b11b145077ac8c170986a33f1">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92630" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/630/CWE252_Unchecked_Return_Value__wchar_t_scanf_03.c" language="C" size="3244" checksum="390cf9dc2953c47478873c81f8be11911f0cf909">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92631" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/631/CWE252_Unchecked_Return_Value__wchar_t_scanf_04.c" language="C" size="3609" checksum="f5d5344e80e5b2f0b9ef18fa1e1d099311345551">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92632" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/632/CWE252_Unchecked_Return_Value__wchar_t_scanf_05.c" language="C" size="3580" checksum="a2d3c0c5a8d704b4fcb6bd26c875b085ca796727">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92633" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/633/CWE252_Unchecked_Return_Value__wchar_t_scanf_06.c" language="C" size="3550" checksum="03a70784f657261c3bd2549ff8365e818e541425">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92634" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/634/CWE252_Unchecked_Return_Value__wchar_t_scanf_07.c" language="C" size="3530" checksum="f34fc9d6f066ca8a25a0025da45f8da709cbd812">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92635" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/635/CWE252_Unchecked_Return_Value__wchar_t_scanf_08.c" language="C" size="3630" checksum="a6ac7e1084bb3aa45afb184a3032221dcc7bf41b">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92636" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/636/CWE252_Unchecked_Return_Value__wchar_t_scanf_09.c" language="C" size="3338" checksum="7b67863deaa98f3a00cabdc7ede6a63b2bbd4211">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92637" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/637/CWE252_Unchecked_Return_Value__wchar_t_scanf_10.c" language="C" size="3289" checksum="e8a5303d003c156d64165a44c49ef2e3b3ae4832">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92638" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/638/CWE252_Unchecked_Return_Value__wchar_t_scanf_11.c" language="C" size="3352" checksum="4a38840700bd82b9db9e32d5f4fe35887fab4caf">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92639" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/639/CWE252_Unchecked_Return_Value__wchar_t_scanf_12.c" language="C" size="3555" checksum="73c5e8e371ca8a8630d9f1814c248a587965d4c9">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92640" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/640/CWE252_Unchecked_Return_Value__wchar_t_scanf_13.c" language="C" size="3356" checksum="d59ae0ba411d6ee4a633d199fb36e4d00548d7e2">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92641" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/641/CWE252_Unchecked_Return_Value__wchar_t_scanf_14.c" language="C" size="3307" checksum="2e003086eca02f15ab4d9c61c7cb9a046c117af4">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92642" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/642/CWE252_Unchecked_Return_Value__wchar_t_scanf_15.c" language="C" size="3488" checksum="59a35032780cb64022601c74f3dcaebdc0528a33">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92643" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/643/CWE252_Unchecked_Return_Value__wchar_t_scanf_16.c" language="C" size="2539" checksum="81417f78e679f3ac5dd2690cdb90f8ad1560aa51">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92644" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/644/CWE252_Unchecked_Return_Value__wchar_t_scanf_17.c" language="C" size="2564" checksum="f8316da65825c3bc7054c585e464874d4d3a5ed6">
      <mixed line="35" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92645" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: scanf<br/> GoodSink: Check if wscanf() fails<br/> BadSink : Do not check if wscanf() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/645/CWE252_Unchecked_Return_Value__wchar_t_scanf_18.c" language="C" size="2430" checksum="bad104453ddad05817cd7e6117c23ec0cdb9a66c">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92646" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/646/CWE252_Unchecked_Return_Value__wchar_t_snprintf_01.c" language="C" size="2489" checksum="f12690ad0bea6e7f2e302781e65e5c5c05bf956d">
      <mixed line="40" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92647" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/647/CWE252_Unchecked_Return_Value__wchar_t_snprintf_02.c" language="C" size="3429" checksum="a43aa431fb65ea493b2423392af3247bb319fe3d">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92648" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/648/CWE252_Unchecked_Return_Value__wchar_t_snprintf_03.c" language="C" size="3450" checksum="846ad2f23273cabd895ecbbc0458db4d5e7114b5">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92649" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/649/CWE252_Unchecked_Return_Value__wchar_t_snprintf_04.c" language="C" size="3815" checksum="c257f719b3f4f4cf64db61fd2258070445a50dd5">
      <mixed line="48" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92650" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/650/CWE252_Unchecked_Return_Value__wchar_t_snprintf_05.c" language="C" size="3786" checksum="5b9714be21f064e845db778fe74de9a22839c384">
      <mixed line="48" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92651" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/651/CWE252_Unchecked_Return_Value__wchar_t_snprintf_06.c" language="C" size="3756" checksum="6a2d47f174999c7313b3a63c22b96543491e5adc">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92652" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/652/CWE252_Unchecked_Return_Value__wchar_t_snprintf_07.c" language="C" size="3736" checksum="57e5196e24e7edc2060a55faea1e29e170c4eb20">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92653" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/653/CWE252_Unchecked_Return_Value__wchar_t_snprintf_08.c" language="C" size="3836" checksum="7f6cdeb96605676964791ecae8c59957264dd8e0">
      <mixed line="55" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92654" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/654/CWE252_Unchecked_Return_Value__wchar_t_snprintf_09.c" language="C" size="3544" checksum="c6c4fc6cefbd6b0400014cc0d35dc5119ddc1454">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92655" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/655/CWE252_Unchecked_Return_Value__wchar_t_snprintf_10.c" language="C" size="3495" checksum="3a0609027f44be8ea78d5d0ddfefdf41c77aae88">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92656" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/656/CWE252_Unchecked_Return_Value__wchar_t_snprintf_11.c" language="C" size="3558" checksum="01e893cdc45cfad485575db5bcacf9654489434b">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92657" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/657/CWE252_Unchecked_Return_Value__wchar_t_snprintf_12.c" language="C" size="3784" checksum="acb642fd91bcf6608eefeb88d92838e73ca0574c">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92658" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/658/CWE252_Unchecked_Return_Value__wchar_t_snprintf_13.c" language="C" size="3562" checksum="b698e6785c1557408096974f0785fe14005c6473">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92659" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/659/CWE252_Unchecked_Return_Value__wchar_t_snprintf_14.c" language="C" size="3513" checksum="5954d628d4caa6e1af9b7b26a490dcf39c4ea886">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92660" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/660/CWE252_Unchecked_Return_Value__wchar_t_snprintf_15.c" language="C" size="3694" checksum="88c6bb9363fbb01a7cfa744ffbd273fe482e9fe2">
      <mixed line="43" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92661" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/661/CWE252_Unchecked_Return_Value__wchar_t_snprintf_16.c" language="C" size="2722" checksum="15fd9647a4ced67eeafd5dba0665025f408e1bff">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92662" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/662/CWE252_Unchecked_Return_Value__wchar_t_snprintf_17.c" language="C" size="2747" checksum="1da131a7791181e8f11d1598d691be0dd50775c8">
      <mixed line="43" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92663" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: snprintf<br/> GoodSink: Check if snwprintf() fails<br/> BadSink : Do not check if snwprintf() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/663/CWE252_Unchecked_Return_Value__wchar_t_snprintf_18.c" language="C" size="2613" checksum="fcbbaeeacf6ba94dda816ee3a23ee14a435ad801">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92664" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/664/CWE252_Unchecked_Return_Value__wchar_t_sscanf_01.c" language="C" size="2352" checksum="b8b05d6e4346cf420d34f3cb150beed10dc5cb9b">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92665" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/665/CWE252_Unchecked_Return_Value__wchar_t_sscanf_02.c" language="C" size="3276" checksum="7bbe86a285a95b6deb1f96d4d5290cfe7e7d66af">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92666" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/666/CWE252_Unchecked_Return_Value__wchar_t_sscanf_03.c" language="C" size="3297" checksum="4a2d940c2370cea4887414a10000847a798d4f8c">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92667" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/667/CWE252_Unchecked_Return_Value__wchar_t_sscanf_04.c" language="C" size="3662" checksum="b0ece2a44ba7c4ef35a54938bb63fce949663b84">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92668" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/668/CWE252_Unchecked_Return_Value__wchar_t_sscanf_05.c" language="C" size="3633" checksum="e463690c6c9b5a22c5e887c61b5fa019f0318ac2">
      <mixed line="42" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92669" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/669/CWE252_Unchecked_Return_Value__wchar_t_sscanf_06.c" language="C" size="3603" checksum="7ca3dcf7161f801d74cbbaa82b524010ac6e5316">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92670" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/670/CWE252_Unchecked_Return_Value__wchar_t_sscanf_07.c" language="C" size="3583" checksum="6cd4ec4b6c49884d2212a8bc47c568c7f39d6317">
      <mixed line="41" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92671" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/671/CWE252_Unchecked_Return_Value__wchar_t_sscanf_08.c" language="C" size="3683" checksum="5a096504d74557d5efe36d8c9886212f063847fc">
      <mixed line="49" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92672" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/672/CWE252_Unchecked_Return_Value__wchar_t_sscanf_09.c" language="C" size="3391" checksum="6b6caa5eace90fb7e49ef779192a8da2c3accace">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92673" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/673/CWE252_Unchecked_Return_Value__wchar_t_sscanf_10.c" language="C" size="3342" checksum="5debff2ffebdd35aed83bda51d5e2246abb9f81b">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92674" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/674/CWE252_Unchecked_Return_Value__wchar_t_sscanf_11.c" language="C" size="3405" checksum="7cfd852653c99c1caaf2c549b123b9f24a088692">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92675" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/675/CWE252_Unchecked_Return_Value__wchar_t_sscanf_12.c" language="C" size="3615" checksum="84d29db42652e91acd9d272cc5d8ce0b99a9f821">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92676" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/676/CWE252_Unchecked_Return_Value__wchar_t_sscanf_13.c" language="C" size="3409" checksum="9e00daeea4e9c973c15f3b7f45122d0ed277dc55">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92677" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/677/CWE252_Unchecked_Return_Value__wchar_t_sscanf_14.c" language="C" size="3360" checksum="f5b0cda2667232f10f10ecffc5c8813fa883de35">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92678" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/678/CWE252_Unchecked_Return_Value__wchar_t_sscanf_15.c" language="C" size="3541" checksum="fb19faf9527069ab42c21ac1a4adf3a2d6b18bfb">
      <mixed line="37" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92679" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/679/CWE252_Unchecked_Return_Value__wchar_t_sscanf_16.c" language="C" size="2585" checksum="2cd730e89efce12de84e01ac89f40b3974a47499">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92680" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/680/CWE252_Unchecked_Return_Value__wchar_t_sscanf_17.c" language="C" size="2610" checksum="9c5e3d5ccd528c6f38a87e87f4b89f47247622ac">
      <mixed line="37" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92681" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: sscanf<br/> GoodSink: Check if swscanf() fails<br/> BadSink : Do not check if swscanf() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/681/CWE252_Unchecked_Return_Value__wchar_t_sscanf_18.c" language="C" size="2476" checksum="7a724221550dca605a5e3a173186d1bd3cfb103a">
      <mixed line="36" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92682" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/682/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_01.c" language="C" size="2490" checksum="009adf0585accf4e242879029fa7d4429670193a">
      <mixed line="31" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92683" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/683/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_02.c" language="C" size="3446" checksum="024cad756eec641c5dcf07ea0565144a8089619e">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92684" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/684/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_03.c" language="C" size="3467" checksum="383ca7ced10f17108dc60f9fba54088509c28b4c">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92685" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/685/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_04.c" language="C" size="3832" checksum="7b094dce40ebe0d4dbd7cbc3e7f01c94d366bd2a">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92686" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/686/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_05.c" language="C" size="3803" checksum="5c5063891fbdbbc70da722a5c71aef2d55d97d13">
      <mixed line="39" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92687" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/687/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_06.c" language="C" size="3773" checksum="9621011623f2b35c6ab6f097fe0e70f93b7873e4">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92688" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/688/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_07.c" language="C" size="3753" checksum="7b9426a57dc475c9c53cdac7636e3bdeeed7d21f">
      <mixed line="38" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92689" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/689/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_08.c" language="C" size="3853" checksum="2579350c7941dc42c828045e45a7b7c920371fdf">
      <mixed line="46" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92690" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/690/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_09.c" language="C" size="3561" checksum="792a03f3e38c46602d595d0c978f6e8594010e0d">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92691" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/691/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_10.c" language="C" size="3512" checksum="3bca1d5bb695a1200b9abbb7799e777286358da6">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92692" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/692/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_11.c" language="C" size="3575" checksum="7614178ee137b8ba65489a6f512710cbd6ee4f3d">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92693" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/693/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_12.c" language="C" size="3813" checksum="97ccc2459deae1aad296fb4886ed0e58619a2093">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92694" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/694/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_13.c" language="C" size="3579" checksum="4838e78f8a266cafb611e35bc17ad381fe4f1212">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92695" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/695/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_14.c" language="C" size="3530" checksum="867e6e830c0093e84a472df16bcb9bf14fc42b36">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92696" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/696/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_15.c" language="C" size="3703" checksum="063ff693ce9e11f6206115abd3982f1d23d1547f">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92697" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/697/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_16.c" language="C" size="2727" checksum="02f9674749ccfec97d8d120185ff5420bc1e589e">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92698" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/698/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_17.c" language="C" size="2752" checksum="c21a1b39500902582f4e3e20ac6974c6929d13a5">
      <mixed line="34" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92699" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateMutex<br/> GoodSink: Check the return value of CreateMutexW() and handle it properly<br/> BadSink : Do not check if CreateMutexW() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/699/CWE252_Unchecked_Return_Value__wchar_t_w32CreateMutex_18.c" language="C" size="2614" checksum="dc032dbd37a8ae7a47ef689ae725ef826ae52bcf">
      <mixed line="33" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92700" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/700/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_01.c" language="C" size="3818" checksum="245944be4460f02cf2340b17ad4c8c4cf1ffe469">
      <mixed line="45" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92701" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/701/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_02.c" language="C" size="5594" checksum="7d3bec33b9d97d156cdb7d31e1b05fd1ed2344ec">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92702" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/702/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_03.c" language="C" size="5615" checksum="011ff5ecf0de6a810d26647ecaeb3241aed3088b">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92703" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/703/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_04.c" language="C" size="5980" checksum="36a662e6479594b3cd2bd09eaaeb9f58178dcf2b">
      <mixed line="53" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92704" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/704/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_05.c" language="C" size="5951" checksum="7f68126a4575e353ae6a7d30287241951dc2ae54">
      <mixed line="53" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92705" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/705/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_06.c" language="C" size="5921" checksum="b32c171aba7b3c7a7df47d5bd875e2d1b5dd6ad9">
      <mixed line="52" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92706" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/706/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_07.c" language="C" size="5901" checksum="dd78d40a82ef16ad3abd6258869fd0d8c2eafa65">
      <mixed line="52" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92707" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/707/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_08.c" language="C" size="6001" checksum="0160030fbc3a301ac54b5f7fc47d5336a95e83d5">
      <mixed line="60" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92708" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/708/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_09.c" language="C" size="5709" checksum="7c6d7ef376b5b91c788d06b73146ff942ff6e37b">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92709" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/709/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_10.c" language="C" size="5660" checksum="fdf13cf3f7362eac4368b1a78e105c6b0fc4a932">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92710" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/710/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_11.c" language="C" size="5723" checksum="a474f8dcdf6de70076ba700d5bc18036278b90c7">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92711" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/711/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_12.c" language="C" size="6677" checksum="c343e8cfc0ee618dab7fdc91e8f0beafc413fc48">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92712" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/712/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_13.c" language="C" size="5727" checksum="80b9477249e5ebda8a282282ab0c8dfeedb76259">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92713" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/713/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_14.c" language="C" size="5678" checksum="819f9d02d6b7e484493380a3a9c931452a63dbfc">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92714" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/714/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_15.c" language="C" size="5695" checksum="618f25a183c3176857fa9f4131fb6f667708fda0">
      <mixed line="48" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92715" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/715/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_16.c" language="C" size="4159" checksum="7e7cd8453222bb447e23046fd314644e08b38c41">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92716" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/716/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_17.c" language="C" size="4184" checksum="96b1f5b53a48ef8f96142175f03b85a41820e570">
      <mixed line="48" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="92717" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 252 Unchecked Return Value<br/> Sinks: w32CreateNamedPipe<br/> GoodSink: Check the return value of CreateNamedPipeW() and handle it properly<br/> BadSink : Do not check if CreateNamedPipeW() fails<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/092/717/CWE252_Unchecked_Return_Value__wchar_t_w32CreateNamedPipe_18.c" language="C" size="3942" checksum="299b5753f6c405d0e00b0f3706a9f15065baac90">
      <mixed line="47" name="CWE-252: Unchecked Return Value"></mixed>
    </file>
  </testcase>
  <testcase id="98300" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/300/CWE398_Poor_Code_Quality__addition_01.c" language="C" size="1966" checksum="d6bfe6d333499404eaee28efd8d89c3a2b93dc4b">
      <mixed line="26" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98301" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/301/CWE398_Poor_Code_Quality__addition_02.c" language="C" size="2657" checksum="078f897ddf79ef8524f1f4598587218007e9b530">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98302" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/302/CWE398_Poor_Code_Quality__addition_03.c" language="C" size="2678" checksum="a9923328da473931ca212d5cb33c178141267aff">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98303" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/303/CWE398_Poor_Code_Quality__addition_04.c" language="C" size="3043" checksum="83cd61932d045932230352b84862b9fb14c85b49">
      <mixed line="34" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98304" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/304/CWE398_Poor_Code_Quality__addition_05.c" language="C" size="3014" checksum="ed26ce88fca044be8ba842cfa131e421a0830b1e">
      <mixed line="34" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98305" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/305/CWE398_Poor_Code_Quality__addition_06.c" language="C" size="2984" checksum="2bcb5e9abab8e883c90f8afdf09c3328d476a8f9">
      <mixed line="33" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98306" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/306/CWE398_Poor_Code_Quality__addition_07.c" language="C" size="2964" checksum="60565d3133802917ffdf6ae5fd29f26c0078be9a">
      <mixed line="33" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98307" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/307/CWE398_Poor_Code_Quality__addition_08.c" language="C" size="3064" checksum="d804984342dd256a00caffe5f40b42f05d556c8f">
      <mixed line="41" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98308" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/308/CWE398_Poor_Code_Quality__addition_09.c" language="C" size="2772" checksum="8ac66c7e1fc00c34b7cfe9478a441dcd58a7a553">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98309" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/309/CWE398_Poor_Code_Quality__addition_10.c" language="C" size="2723" checksum="d5be03dc26194f3d980a99cae971b9437b87224f">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98310" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/310/CWE398_Poor_Code_Quality__addition_11.c" language="C" size="2786" checksum="406227864c0f2b6450689a41c18d52c360ae0959">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98311" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/311/CWE398_Poor_Code_Quality__addition_12.c" language="C" size="2783" checksum="dceae65b2974a1d0402119d5fe9ff944015b7a21">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98312" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/312/CWE398_Poor_Code_Quality__addition_13.c" language="C" size="2790" checksum="53b7560b6cef5fcd87610cc44249ef2d3f38e6c8">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98313" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/313/CWE398_Poor_Code_Quality__addition_14.c" language="C" size="2741" checksum="092c8e21cbf2dd4741da83985029cf1e8af39f4a">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98314" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/314/CWE398_Poor_Code_Quality__addition_15.c" language="C" size="2958" checksum="e8db8c6b3acb7a18bc8f60c593911ded302c90e3">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98315" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/315/CWE398_Poor_Code_Quality__addition_16.c" language="C" size="2179" checksum="399b0dda4c70db23089c6326927896c121729bcc">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98316" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/316/CWE398_Poor_Code_Quality__addition_17.c" language="C" size="2204" checksum="ccd168d5627d1b86e61133513b326e9c27a143d8">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98317" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: addition<br/> GoodSink: Adding two ints and storing the result<br/> BadSink : Adding two ints but not storing the result has no effect<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/317/CWE398_Poor_Code_Quality__addition_18.c" language="C" size="2090" checksum="4223f7fbea0b93d3488f2f468880f76971da6b00">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98318" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/318/CWE398_Poor_Code_Quality__empty_block_01.c" language="C" size="1693" checksum="2318b2d45e5e52aa5f548a3822e34a51b6d821b2">
      <mixed line="23" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98319" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/319/CWE398_Poor_Code_Quality__empty_block_02.c" language="C" size="2267" checksum="7cc2bb97de574cb5827fc9fad5d49f607e7b3800">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98320" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/320/CWE398_Poor_Code_Quality__empty_block_03.c" language="C" size="2288" checksum="16ac6c435a3f6e4865dc1fce7626912973b7ee52">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98321" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/321/CWE398_Poor_Code_Quality__empty_block_04.c" language="C" size="2653" checksum="bcfb1d95b4e0e8635a1dfca292a38679c26419df">
      <mixed line="31" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98322" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/322/CWE398_Poor_Code_Quality__empty_block_05.c" language="C" size="2624" checksum="768bff4f8f67a04131e327541525c0e6aff1c697">
      <mixed line="31" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98323" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/323/CWE398_Poor_Code_Quality__empty_block_06.c" language="C" size="2594" checksum="a6a1488ef3bde43d31fe746e60d5d1600267d098">
      <mixed line="30" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98324" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/324/CWE398_Poor_Code_Quality__empty_block_07.c" language="C" size="2574" checksum="aabb8b747b07bd750ee57a8794eaf981a902d5b2">
      <mixed line="30" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98325" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/325/CWE398_Poor_Code_Quality__empty_block_08.c" language="C" size="2674" checksum="33f0c870315049f15232acdf9383b8f9ba2f9f97">
      <mixed line="38" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98326" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/326/CWE398_Poor_Code_Quality__empty_block_09.c" language="C" size="2382" checksum="8d21f616699633a196efc6f1afc8e0eff7d3bbaa">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98327" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/327/CWE398_Poor_Code_Quality__empty_block_10.c" language="C" size="2333" checksum="63725cf645a248a81141153038e494f039d2f40e">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98328" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/328/CWE398_Poor_Code_Quality__empty_block_11.c" language="C" size="2396" checksum="47e69389bcad5702db955ed2f564076aeb9ce521">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98329" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/329/CWE398_Poor_Code_Quality__empty_block_12.c" language="C" size="2296" checksum="510e0e343d0808e6dcedd5454ce76a5ea0c0ed77">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98330" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/330/CWE398_Poor_Code_Quality__empty_block_13.c" language="C" size="2400" checksum="717ff9d6e3030179dee4885abe5f6d9914e6bbca">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98331" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/331/CWE398_Poor_Code_Quality__empty_block_14.c" language="C" size="2351" checksum="16b95354d3ee75357ead5df9eb57ac63f90654f3">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98332" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/332/CWE398_Poor_Code_Quality__empty_block_15.c" language="C" size="2608" checksum="9bd39a56d594524ab8141f46edcbf1c41c9a5e3d">
      <mixed line="26" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98333" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/333/CWE398_Poor_Code_Quality__empty_block_16.c" language="C" size="1886" checksum="ef35a0bdfbc0a51f911eb56e40793133b7a526a8">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98334" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/334/CWE398_Poor_Code_Quality__empty_block_17.c" language="C" size="1911" checksum="4761dfeadbc6d6a2033a66408da8e29a57a82d7b">
      <mixed line="26" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98335" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_block<br/> GoodSink: Code block contains code<br/> BadSink : An empty code block has no effect<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/335/CWE398_Poor_Code_Quality__empty_block_18.c" language="C" size="1817" checksum="dd2fbb5237830bba254ee761213a0c00fbc64e7f">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98336" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/336/CWE398_Poor_Code_Quality__empty_case_01.c" language="C" size="1946" checksum="16af263a3d64e080b19b6bed5c7fa2371a661997">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98337" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/337/CWE398_Poor_Code_Quality__empty_case_02.c" language="C" size="2724" checksum="3793204d777d09d744a660610d090f0644292fd3">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98338" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/338/CWE398_Poor_Code_Quality__empty_case_03.c" language="C" size="2745" checksum="38e433863a8e8eb2c493db4cec94d327deb4f540">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98339" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/339/CWE398_Poor_Code_Quality__empty_case_04.c" language="C" size="3110" checksum="c7f6b78648567b9d7d81da06c95cf1add81ba0dd">
      <mixed line="35" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98340" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/340/CWE398_Poor_Code_Quality__empty_case_05.c" language="C" size="3081" checksum="22f8de52780ba018e84d2a83ea5dd299f1ca35e8">
      <mixed line="35" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98341" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/341/CWE398_Poor_Code_Quality__empty_case_06.c" language="C" size="3051" checksum="d686074bd2f4c956530a6c60afe1076b9030b122">
      <mixed line="34" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98342" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/342/CWE398_Poor_Code_Quality__empty_case_07.c" language="C" size="3031" checksum="341433edda251a4cc126c53805b479bf2b352c08">
      <mixed line="34" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98343" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/343/CWE398_Poor_Code_Quality__empty_case_08.c" language="C" size="3131" checksum="ccc690c94a3850d22c6f60569d2ba46db68fbbc3">
      <mixed line="42" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98344" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/344/CWE398_Poor_Code_Quality__empty_case_09.c" language="C" size="2839" checksum="44b4e98a68cb67d6e0e1a5767f6b6a22f1ae083b">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98345" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/345/CWE398_Poor_Code_Quality__empty_case_10.c" language="C" size="2790" checksum="1b87217f6795a0b3caf3e4b92536d094a417caf4">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98346" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/346/CWE398_Poor_Code_Quality__empty_case_11.c" language="C" size="2853" checksum="e3e4be4244126be82db98e3ae9fe93cf53684de1">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98347" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/347/CWE398_Poor_Code_Quality__empty_case_12.c" language="C" size="2909" checksum="dc3862621b49d7d56924af834cea529c26dc84c7">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98348" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/348/CWE398_Poor_Code_Quality__empty_case_13.c" language="C" size="2857" checksum="dbd1af609e31a57bc2ad0540b8272e84cc264f7a">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98349" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/349/CWE398_Poor_Code_Quality__empty_case_14.c" language="C" size="2808" checksum="e50ca25b0027c9b658ad23e0648a3aac678c7890">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98350" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/350/CWE398_Poor_Code_Quality__empty_case_15.c" language="C" size="2993" checksum="84752fdb1b9e8b6fbed77b1840156d15ac7eeee7">
      <mixed line="30" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98351" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/351/CWE398_Poor_Code_Quality__empty_case_16.c" language="C" size="2187" checksum="df93676042efb222834ea6252a287e92a3b6e476">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98352" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/352/CWE398_Poor_Code_Quality__empty_case_17.c" language="C" size="2212" checksum="c653c933cf3e96896f2a1264c8b6f49094959ec3">
      <mixed line="30" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98353" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_case<br/> GoodSink: Case statement contains code<br/> BadSink : An empty case statement has no effect<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/353/CWE398_Poor_Code_Quality__empty_case_18.c" language="C" size="2070" checksum="36820021140d9a42d4d304a5fd5a65bbef0705b7">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98354" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/354/CWE398_Poor_Code_Quality__empty_else_01.c" language="C" size="2074" checksum="6a05f8c78cc75c92e9decb5278cc6f8ff50c9258">
      <mixed line="30" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98355" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/355/CWE398_Poor_Code_Quality__empty_else_02.c" language="C" size="2951" checksum="ddc90e52cb05bc98e4f3592ff97d6a477ec00ef5">
      <mixed line="32" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98356" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/356/CWE398_Poor_Code_Quality__empty_else_03.c" language="C" size="2972" checksum="1d68d9f41a57bc22245bca3958809dd220e703c8">
      <mixed line="32" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98357" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/357/CWE398_Poor_Code_Quality__empty_else_04.c" language="C" size="3337" checksum="029abc9c26f6a6ac76760c553e0235f3fc49bd2e">
      <mixed line="38" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98358" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/358/CWE398_Poor_Code_Quality__empty_else_05.c" language="C" size="3308" checksum="e666ee97c88c352f1dd187294f130adeae95fd6c">
      <mixed line="38" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98359" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/359/CWE398_Poor_Code_Quality__empty_else_06.c" language="C" size="3278" checksum="dd3db70bb3b92c6f8e6165efdc2825af7ceb53d9">
      <mixed line="37" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98360" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/360/CWE398_Poor_Code_Quality__empty_else_07.c" language="C" size="3258" checksum="ad3d44bafade887de16f62a98e3125bce8eb0d39">
      <mixed line="37" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98361" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/361/CWE398_Poor_Code_Quality__empty_else_08.c" language="C" size="3358" checksum="991c53bd886832effcf48b28ae1993a2a952d82a">
      <mixed line="45" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98362" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/362/CWE398_Poor_Code_Quality__empty_else_09.c" language="C" size="3066" checksum="11ed7d513d5b39e487cc1c1fc5726b5d8c97759b">
      <mixed line="32" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98363" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/363/CWE398_Poor_Code_Quality__empty_else_10.c" language="C" size="3017" checksum="e73787f1efcd219488aff19841bd108b4a08502d">
      <mixed line="32" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98364" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/364/CWE398_Poor_Code_Quality__empty_else_11.c" language="C" size="3080" checksum="e0715372e6ea1fc1f40b5b9de035f18143dea8c9">
      <mixed line="32" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98365" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/365/CWE398_Poor_Code_Quality__empty_else_12.c" language="C" size="3211" checksum="7e38613030774a37cf29a0340f8b96e5a79dea8e">
      <mixed line="32" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98366" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/366/CWE398_Poor_Code_Quality__empty_else_13.c" language="C" size="3084" checksum="2afb002a185948dbe9444d2e14bd4a9cc79ff469">
      <mixed line="32" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98367" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/367/CWE398_Poor_Code_Quality__empty_else_14.c" language="C" size="3035" checksum="e34d2823efe2bf4224c64546f5a11d55cbd4b506">
      <mixed line="32" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98368" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/368/CWE398_Poor_Code_Quality__empty_else_15.c" language="C" size="3184" checksum="a8356491ceb2f16ff9f5bdb941ed7ea59a19ef96">
      <mixed line="33" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98369" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/369/CWE398_Poor_Code_Quality__empty_else_16.c" language="C" size="2339" checksum="225f72ffdfd8610c59ae072576b39c6e548a3e08">
      <mixed line="32" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98370" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/370/CWE398_Poor_Code_Quality__empty_else_17.c" language="C" size="2364" checksum="ea4d9ddddaffff204034420502f3b7da558f2846">
      <mixed line="33" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98371" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_else<br/> GoodSink: Else statement contains code<br/> BadSink : An empty else statement has no effect<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/371/CWE398_Poor_Code_Quality__empty_else_18.c" language="C" size="2198" checksum="6b7a26c871af802041c53756dbdf4d20921a8134">
      <mixed line="32" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98372" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/372/CWE398_Poor_Code_Quality__empty_for_01.c" language="C" size="1859" checksum="e33e6a9de0acc1e3fd53ab60e48f043bcf34f9ba">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98373" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/373/CWE398_Poor_Code_Quality__empty_for_02.c" language="C" size="2573" checksum="35220dbdb709f0c4856706b9291f03cfe473804d">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98374" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/374/CWE398_Poor_Code_Quality__empty_for_03.c" language="C" size="2594" checksum="07886fbcbf9f2cfc746d6478ee8e57d9220610f1">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98375" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/375/CWE398_Poor_Code_Quality__empty_for_04.c" language="C" size="2959" checksum="ec25a842adb41811a3b4068128f9ea15e70cbb96">
      <mixed line="33" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98376" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/376/CWE398_Poor_Code_Quality__empty_for_05.c" language="C" size="2930" checksum="f304e7d6460f9f6479f7c6bf1fa64de3cf4078f1">
      <mixed line="33" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98377" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/377/CWE398_Poor_Code_Quality__empty_for_06.c" language="C" size="2900" checksum="b5d2f2a840ff135e7cc38970779d2df1daa51bad">
      <mixed line="32" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98378" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/378/CWE398_Poor_Code_Quality__empty_for_07.c" language="C" size="2880" checksum="304c417af2e038d343800badcbf613c0bf14d175">
      <mixed line="32" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98379" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/379/CWE398_Poor_Code_Quality__empty_for_08.c" language="C" size="2980" checksum="f3463f3fdc09b9f98f7131491adb271e5a41c25a">
      <mixed line="40" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98380" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/380/CWE398_Poor_Code_Quality__empty_for_09.c" language="C" size="2688" checksum="9cce9982a99797aacef63e37b26db771c2561cfe">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98381" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/381/CWE398_Poor_Code_Quality__empty_for_10.c" language="C" size="2639" checksum="fa0992d9ea9d5e3ca82ea4fdb8d74530e7b679b4">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98382" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/382/CWE398_Poor_Code_Quality__empty_for_11.c" language="C" size="2702" checksum="86ed84ec4226f8f2c32a539ffe539483b0f1bf32">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98383" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/383/CWE398_Poor_Code_Quality__empty_for_12.c" language="C" size="2710" checksum="209d551749a88cfdd8116027c7bf98ee0878df9d">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98384" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/384/CWE398_Poor_Code_Quality__empty_for_13.c" language="C" size="2706" checksum="7a7b9da34954fd88f163e73cf09422af83a5aeb0">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98385" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/385/CWE398_Poor_Code_Quality__empty_for_14.c" language="C" size="2657" checksum="074ee8eaf700fbf7deaf8f090744f96996d9f194">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98386" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/386/CWE398_Poor_Code_Quality__empty_for_15.c" language="C" size="2866" checksum="8aead74c52c28366d4cebac1697ca3e5fc792251">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98387" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/387/CWE398_Poor_Code_Quality__empty_for_16.c" language="C" size="2084" checksum="20cc7c559fd37eb8f6774b44d3cc90228f1940ec">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98388" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/388/CWE398_Poor_Code_Quality__empty_for_17.c" language="C" size="2109" checksum="e2a84fd2d570e299e5eaf18203abe66749dc06cd">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98389" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_for<br/> GoodSink: For statement contains code<br/> BadSink : An empty for statement has no effect<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/389/CWE398_Poor_Code_Quality__empty_for_18.c" language="C" size="1983" checksum="f164ce38891ed1fb0ffb9fbed9378f9d0db006fc">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98390" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Call an empty function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/390/CWE398_Poor_Code_Quality__empty_function_01.c" language="C" size="1376" checksum="7751149b5ba8f7e799fab77819dcef51f5f62fed">
      <mixed line="10" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98391" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/391/CWE398_Poor_Code_Quality__empty_if_01.c" language="C" size="2054" checksum="45d0cbb55177ee94c124a444445af3591cc2025f">
      <mixed line="26" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98392" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/392/CWE398_Poor_Code_Quality__empty_if_02.c" language="C" size="2929" checksum="432cbf8ae8bb377a2ec1abeeb46df618f9a82141">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98393" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/393/CWE398_Poor_Code_Quality__empty_if_03.c" language="C" size="2950" checksum="459feae0ce8f79172fcb5432c8ee375e6a7dbe0c">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98394" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/394/CWE398_Poor_Code_Quality__empty_if_04.c" language="C" size="3315" checksum="544607f3faf9e4df295fb3f2aa140442690004ba">
      <mixed line="34" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98395" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/395/CWE398_Poor_Code_Quality__empty_if_05.c" language="C" size="3286" checksum="4646f428ef2adff08728ea132fde4f13b7c41b1a">
      <mixed line="34" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98396" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/396/CWE398_Poor_Code_Quality__empty_if_06.c" language="C" size="3256" checksum="e5f6d7649f791c33d68fed18da17b7a5b7551537">
      <mixed line="33" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98397" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/397/CWE398_Poor_Code_Quality__empty_if_07.c" language="C" size="3236" checksum="f442fe35586f483e22e712494eb5f636ce598c35">
      <mixed line="33" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98398" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/398/CWE398_Poor_Code_Quality__empty_if_08.c" language="C" size="3336" checksum="aa035f51d0492e74475da1726708d4297e4e5947">
      <mixed line="41" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98399" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/399/CWE398_Poor_Code_Quality__empty_if_09.c" language="C" size="3044" checksum="a1aaa46c1c5f1c6325bfceb51deb477a0d6e2dec">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98400" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/400/CWE398_Poor_Code_Quality__empty_if_10.c" language="C" size="2995" checksum="419295f1f54a0fabab7b90512c4cfe6cf805db49">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98401" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/401/CWE398_Poor_Code_Quality__empty_if_11.c" language="C" size="3058" checksum="8ca8f54653074f04c93e78886f7a2c90228cb343">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98402" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/402/CWE398_Poor_Code_Quality__empty_if_12.c" language="C" size="3187" checksum="ebb28fe1ca766500fab2fa899a7da228e5b55622">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98403" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/403/CWE398_Poor_Code_Quality__empty_if_13.c" language="C" size="3062" checksum="4804e1c2dee777b4a556b64e9db50d73838cfc18">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98404" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/404/CWE398_Poor_Code_Quality__empty_if_14.c" language="C" size="3013" checksum="e3daff0bdf073f23331fea95512c4875bdd933ec">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98405" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/405/CWE398_Poor_Code_Quality__empty_if_15.c" language="C" size="3162" checksum="80f8a073999927b4c422e2c69d5485dc4ca45730">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98406" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/406/CWE398_Poor_Code_Quality__empty_if_16.c" language="C" size="2319" checksum="8998411b94c02794e43338100f07f88b73af0f24">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98407" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/407/CWE398_Poor_Code_Quality__empty_if_17.c" language="C" size="2344" checksum="9211f1a602d09e1b25d13be2e018fc7dc5ec8a84">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98408" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_if<br/> GoodSink: If statement contains code<br/> BadSink : An empty if statement has no effect<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/408/CWE398_Poor_Code_Quality__empty_if_18.c" language="C" size="2178" checksum="1f61543fd9b25a8b382f050b5a41c485093c6d93">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98409" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/409/CWE398_Poor_Code_Quality__empty_while_01.c" language="C" size="1871" checksum="52b1f22d3b3924dc539cf87847c75441e993ee0a">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98410" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/410/CWE398_Poor_Code_Quality__empty_while_02.c" language="C" size="2584" checksum="dac334a5f4a4d7b4526fd3ccf8eff96ab06d24f6">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98411" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/411/CWE398_Poor_Code_Quality__empty_while_03.c" language="C" size="2605" checksum="025d5bb81e42f813287651fbad133a65888112fa">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98412" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/412/CWE398_Poor_Code_Quality__empty_while_04.c" language="C" size="2970" checksum="a045991e672fd14f82cf5c0784e3e6f7720c7855">
      <mixed line="33" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98413" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/413/CWE398_Poor_Code_Quality__empty_while_05.c" language="C" size="2941" checksum="fbf7da9de77f5e50012d64070f84dc4f411137f1">
      <mixed line="33" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98414" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/414/CWE398_Poor_Code_Quality__empty_while_06.c" language="C" size="2911" checksum="6ade8cd81a6118c23478f7288b7a2517622d4007">
      <mixed line="32" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98415" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/415/CWE398_Poor_Code_Quality__empty_while_07.c" language="C" size="2891" checksum="610458ca9e001ebb01ff50b00d1a5533d8bd4109">
      <mixed line="32" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98416" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/416/CWE398_Poor_Code_Quality__empty_while_08.c" language="C" size="2991" checksum="b4d0dc389a62f7cf5df8a060639c72bbdd0514ac">
      <mixed line="40" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98417" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/417/CWE398_Poor_Code_Quality__empty_while_09.c" language="C" size="2699" checksum="27c0b752663be3bcd9622ff2d19d0888561cd890">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98418" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/418/CWE398_Poor_Code_Quality__empty_while_10.c" language="C" size="2650" checksum="174712bc0989aa1fba73dcfa0e5855619e8d8940">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98419" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/419/CWE398_Poor_Code_Quality__empty_while_11.c" language="C" size="2713" checksum="d5bb6ab06323752d5b3ef7449ecabb0becdf0f00">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98420" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/420/CWE398_Poor_Code_Quality__empty_while_12.c" language="C" size="2720" checksum="b4e3b8ac736de591c814635ecb04f3224580648b">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98421" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/421/CWE398_Poor_Code_Quality__empty_while_13.c" language="C" size="2717" checksum="fe13b2fedf83a0194bccdedbdc00033393f4a251">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98422" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/422/CWE398_Poor_Code_Quality__empty_while_14.c" language="C" size="2668" checksum="b5eeed6c24950897d3c91067747fa9898b91b39c">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98423" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/423/CWE398_Poor_Code_Quality__empty_while_15.c" language="C" size="2877" checksum="0b796315cff3e2d9cc395f9c54dac6e708b50209">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98424" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/424/CWE398_Poor_Code_Quality__empty_while_16.c" language="C" size="2096" checksum="1ee7ada5f3875098cd960906e5c947f7ff90117c">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98425" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/425/CWE398_Poor_Code_Quality__empty_while_17.c" language="C" size="2121" checksum="99942d3dd1919bd5b0f01ec3ec72b90ff29017c3">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98426" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: empty_while<br/> GoodSink: While statement contains code<br/> BadSink : An empty while statement has no effect<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/426/CWE398_Poor_Code_Quality__empty_while_18.c" language="C" size="1995" checksum="f04bcfa71b94016ac8b862ebe615bf8c9edbb3bd">
      <mixed line="27" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98427" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/427/CWE398_Poor_Code_Quality__equals_01.c" language="C" size="1844" checksum="30feb1f173ce446e14badd36cc32345c8bfef36f">
      <mixed line="26" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98428" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/428/CWE398_Poor_Code_Quality__equals_02.c" language="C" size="2516" checksum="2db6c44bfdace5cee0cdf6dbbfa16dc8b5985ce7">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98429" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/429/CWE398_Poor_Code_Quality__equals_03.c" language="C" size="2537" checksum="d0b3ff6ddc3f99baf695c9dcb3f0e0cc71e523b5">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98430" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/430/CWE398_Poor_Code_Quality__equals_04.c" language="C" size="2902" checksum="7a664fa3603504c3a95a282beb625195fdd0c710">
      <mixed line="34" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98431" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/431/CWE398_Poor_Code_Quality__equals_05.c" language="C" size="2873" checksum="49068c86b0c3576c15404a67926fa87d18ee9aac">
      <mixed line="34" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98432" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/432/CWE398_Poor_Code_Quality__equals_06.c" language="C" size="2843" checksum="495d7d540bd58148b684ca02fb4b385bfe3c4d30">
      <mixed line="33" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98433" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/433/CWE398_Poor_Code_Quality__equals_07.c" language="C" size="2823" checksum="178c7803b85b8d5a65527f46b7185383a61e1bdd">
      <mixed line="33" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98434" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/434/CWE398_Poor_Code_Quality__equals_08.c" language="C" size="2923" checksum="8eb41526d5c0e14f7a0218ec900d1f76c70ae9ee">
      <mixed line="41" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98435" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/435/CWE398_Poor_Code_Quality__equals_09.c" language="C" size="2631" checksum="456974a1f8382c87c6d160f5e8ae11ace98a0a36">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98436" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/436/CWE398_Poor_Code_Quality__equals_10.c" language="C" size="2582" checksum="265549a33032fb01e5c178de5f9058b351fbad2c">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98437" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/437/CWE398_Poor_Code_Quality__equals_11.c" language="C" size="2645" checksum="c1974b4d912c0d319f2b85a25f47b5dce15563e3">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98438" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/438/CWE398_Poor_Code_Quality__equals_12.c" language="C" size="2623" checksum="85f695d02a5053588ed225ee4f76d858dc88155c">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98439" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/439/CWE398_Poor_Code_Quality__equals_13.c" language="C" size="2649" checksum="fa1372fd421b16736bf37a5700352085ba956266">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98440" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/440/CWE398_Poor_Code_Quality__equals_14.c" language="C" size="2600" checksum="a303556738256f81ddadf7d9f006ee92ddf7ff61">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98441" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/441/CWE398_Poor_Code_Quality__equals_15.c" language="C" size="2817" checksum="6396b60a23a5edce78e4351fbb5cbdcf61cdfb5a">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98442" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/442/CWE398_Poor_Code_Quality__equals_16.c" language="C" size="2057" checksum="c53cd3c531b0e3d2a9b0c3c2b3805a14da9ef758">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98443" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/443/CWE398_Poor_Code_Quality__equals_17.c" language="C" size="2082" checksum="271fd125346a1ef92740b479818d2f4e61d90bb3">
      <mixed line="29" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98444" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: equals<br/> GoodSink: Set a variable equal to another variable<br/> BadSink : Setting a variable equal to itself has no effect<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/444/CWE398_Poor_Code_Quality__equals_18.c" language="C" size="1968" checksum="26b507ed3344c6b925d720ca0d777a7b45d21541">
      <mixed line="28" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98445" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/445/CWE398_Poor_Code_Quality__five_01.c" language="C" size="1615" checksum="8491f3f4011233665039103678be30bc9ea8d823">
      <mixed line="23" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98446" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/446/CWE398_Poor_Code_Quality__five_02.c" language="C" size="2123" checksum="d46ac9061a4981d61e52cc423eed4d5b0fd5e33d">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98447" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/447/CWE398_Poor_Code_Quality__five_03.c" language="C" size="2144" checksum="6387fbda1610eb65d3d3df853dae2e0962b9fa3e">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98448" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/448/CWE398_Poor_Code_Quality__five_04.c" language="C" size="2509" checksum="fc78535a132e72d494e312e3a93177f6d7ed4660">
      <mixed line="31" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98449" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/449/CWE398_Poor_Code_Quality__five_05.c" language="C" size="2480" checksum="eb51ed828dd6dfd6b90302734ab4d6bf797b7708">
      <mixed line="31" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98450" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/450/CWE398_Poor_Code_Quality__five_06.c" language="C" size="2450" checksum="2a4fd90105630839104541d05a401a719a1d10d7">
      <mixed line="30" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98451" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/451/CWE398_Poor_Code_Quality__five_07.c" language="C" size="2430" checksum="83626ec98b1c6b1f538e77e58ba14c823365961f">
      <mixed line="30" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98452" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/452/CWE398_Poor_Code_Quality__five_08.c" language="C" size="2530" checksum="bfabe6416a42260eed700c0f1409b11d984332b8">
      <mixed line="38" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98453" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/453/CWE398_Poor_Code_Quality__five_09.c" language="C" size="2238" checksum="142589d6afbc2228eb658c5f54fc0b3425294ba5">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98454" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/454/CWE398_Poor_Code_Quality__five_10.c" language="C" size="2189" checksum="2bb93f3005041bbb959fc78473a934aaf5701e0e">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98455" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/455/CWE398_Poor_Code_Quality__five_11.c" language="C" size="2252" checksum="1684502aecaf7141956b3660928a9812122a7af8">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98456" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/456/CWE398_Poor_Code_Quality__five_12.c" language="C" size="2102" checksum="8888090ef1a1b3494eab4da8c90f67d881e42a0e">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98457" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/457/CWE398_Poor_Code_Quality__five_13.c" language="C" size="2256" checksum="064f27f7c9765ffd86cf7e909bb213884c315205">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98458" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/458/CWE398_Poor_Code_Quality__five_14.c" language="C" size="2207" checksum="c7f5b2c905dfe214e2e550aa7cf8a99b7e6e229d">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98459" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/459/CWE398_Poor_Code_Quality__five_15.c" language="C" size="2520" checksum="5730750fb8731849a68ad4242f0d8bb1d595bcea">
      <mixed line="26" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98460" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/460/CWE398_Poor_Code_Quality__five_16.c" language="C" size="1792" checksum="81b6b81918b72ea64cccf18b8e47e817c141bee9">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98461" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/461/CWE398_Poor_Code_Quality__five_17.c" language="C" size="1817" checksum="dda9930720072cc88e219a14e4df89b25fa76f87">
      <mixed line="26" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98462" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: five<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/462/CWE398_Poor_Code_Quality__five_18.c" language="C" size="1739" checksum="7d086c1f3b8b3d43ffc993f3b1f711d44be8187a">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98463" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/463/CWE398_Poor_Code_Quality__semicolon_01.c" language="C" size="1644" checksum="59f9d932ab22e57a4e34fa2dcfbb7da10ebec3bc">
      <mixed line="23" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98464" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/464/CWE398_Poor_Code_Quality__semicolon_02.c" language="C" size="2152" checksum="696008ac8fc9dd203aa580c5b4291336c60f777c">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98465" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/465/CWE398_Poor_Code_Quality__semicolon_03.c" language="C" size="2173" checksum="0b95575621ce5c12284ae435c324f5d4de74be19">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98466" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/466/CWE398_Poor_Code_Quality__semicolon_04.c" language="C" size="2538" checksum="9086125875abbf9e3bb6a4172fb249e875ee3a14">
      <mixed line="31" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98467" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/467/CWE398_Poor_Code_Quality__semicolon_05.c" language="C" size="2509" checksum="394cb71ead6a683627c34efe48c7675bfd0564a0">
      <mixed line="31" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98468" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/468/CWE398_Poor_Code_Quality__semicolon_06.c" language="C" size="2479" checksum="ca9afc376dcc88f7838c6d428084788c02527405">
      <mixed line="30" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98469" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/469/CWE398_Poor_Code_Quality__semicolon_07.c" language="C" size="2459" checksum="3a7697a7e361686e1726e0b0b3d4903095ee58c7">
      <mixed line="30" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98470" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/470/CWE398_Poor_Code_Quality__semicolon_08.c" language="C" size="2559" checksum="d21680472b982bce173a962fac8926bb7b9d6273">
      <mixed line="38" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98471" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/471/CWE398_Poor_Code_Quality__semicolon_09.c" language="C" size="2267" checksum="4b39145eae23ed14c41a2304841655788e368181">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98472" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/472/CWE398_Poor_Code_Quality__semicolon_10.c" language="C" size="2218" checksum="6422c83858a09de0a8ef03c2c9811e651290a0c9">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98473" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/473/CWE398_Poor_Code_Quality__semicolon_11.c" language="C" size="2281" checksum="263c32ee0d4d358bda76ba7c598b16861fec1d75">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98474" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/474/CWE398_Poor_Code_Quality__semicolon_12.c" language="C" size="2131" checksum="14c088193507e8ff97d1a7c17f16194bd3857496">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98475" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/475/CWE398_Poor_Code_Quality__semicolon_13.c" language="C" size="2285" checksum="3f9263a593a3ffa7e715dd36da75aa44ab50267c">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98476" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/476/CWE398_Poor_Code_Quality__semicolon_14.c" language="C" size="2236" checksum="f4fdb959cf75884095dac3000e98b7edd24eb2fc">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98477" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/477/CWE398_Poor_Code_Quality__semicolon_15.c" language="C" size="2549" checksum="c2430a02800b6ee97b84596a0bbaf803fc0da568">
      <mixed line="26" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98478" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/478/CWE398_Poor_Code_Quality__semicolon_16.c" language="C" size="1821" checksum="6d421c8a62ec166e521b2b61f4ab7ea02d7d37b7">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98479" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/479/CWE398_Poor_Code_Quality__semicolon_17.c" language="C" size="1846" checksum="52feceb0e41380e63b564158e9c0009ea344f555">
      <mixed line="26" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="98480" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 398 Poor Code Quality<br/> Sinks: semicolon<br/> GoodSink: Removed statement that has no effect<br/> BadSink : A statement that has no effect<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/098/480/CWE398_Poor_Code_Quality__semicolon_18.c" language="C" size="1768" checksum="ab4247512239674e7a129725708e6442722333bb">
      <mixed line="25" name="CWE-398: Indicator of Poor Code Quality"></mixed>
    </file>
  </testcase>
  <testcase id="100859" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/859/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_01.c" language="C" size="2395" checksum="be3b7d9cd221ccebf39ed5221ef948d62db2806f">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100860" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/860/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_02.c" language="C" size="3150" checksum="39cb6c34550e19a4973f22740051ff95a54c1c65">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100861" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/861/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_03.c" language="C" size="3171" checksum="a7968bea83db75d57597c67eca7fbc9c44e61b93">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100862" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/862/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_04.c" language="C" size="3536" checksum="d6347bd1917882e0f99a21bdabb37f6003f4cea1">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100863" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/863/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_05.c" language="C" size="3507" checksum="02a91bc4ec7d64b21d536e4fae45fef9ffd231da">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100864" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/864/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_06.c" language="C" size="3477" checksum="8fe94d8a6e473e328cbdd44eb0107eb0ef460d6e">
      <mixed line="40" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100865" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/865/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_07.c" language="C" size="3457" checksum="06e981d368904447dbc139a91a92abf65580383d">
      <mixed line="40" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100866" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/866/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_08.c" language="C" size="3557" checksum="6b0306cf12a6a366fa09f17443658ec0cba6a316">
      <mixed line="48" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100867" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/867/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_09.c" language="C" size="3265" checksum="16a2a2420a7095c6d942c01ea6b928689dcfe06f">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100868" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/868/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_10.c" language="C" size="3216" checksum="d0beddd103872c567b14b7f31daad1ba9f6e3ee9">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100869" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/869/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_11.c" language="C" size="3279" checksum="03a17c7f650c38c2717a2eb84b87a59135f465b2">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100870" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/870/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_12.c" language="C" size="2935" checksum="459e5f02e9d53ff7da769abbd5123d87836bd6df">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100871" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/871/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_13.c" language="C" size="3283" checksum="d9620ad23e10bb36f6913eec4e7e0ee4403839f2">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100872" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/872/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_14.c" language="C" size="3234" checksum="668cda5cd1fbbb6cc244dd209f99ab004c1abd81">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100873" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/873/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_15.c" language="C" size="3573" checksum="4ac8c0a665fbae5fb4525ad31c802b3f121e2346">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100874" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/874/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_16.c" language="C" size="2580" checksum="507da90041983c928862f0d325c0d5e19163a6ff">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100875" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/875/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_17.c" language="C" size="2561" checksum="31bec9c07c2b390c81d8e5f6f733196a2c493286">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100876" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/876/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_18.c" language="C" size="2500" checksum="91df79e097d91cf8e144841e96550197901232e4">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100877" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/877/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_21.c" language="C" size="3897" checksum="29abfad63987458b87c9a12cb29e026858b3e9f3">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100878" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/878/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_22a.c" language="C" size="3841" checksum="6d6b5c983703ed60db53af571eb3354309f3bc95"></file>
    <file path="000/100/878/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_22b.c" language="C" size="2549" checksum="5e53afb61992ee5bf2eeb8f44fc41ff753ac34fc">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100879" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/879/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_31.c" language="C" size="2640" checksum="98b850c66c35c11d81f9c2252a618b382e77df61">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100880" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 32 Data flow: two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/880/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_32.c" language="C" size="2879" checksum="9268e65de8417fa6e4145ac55922c6d631b321b0">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100881" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/881/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_33.cpp" language="C++" size="2635" checksum="a53ad68175468e56c95c8464be1345a317dfad30">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100882" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/882/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_34.c" language="C" size="3015" checksum="ad3672bdc6a14eba9fef3008dd9eb7265f6553b3">
      <mixed line="43" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100883" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/883/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_41.c" language="C" size="2607" checksum="09a52f2caf111b4cfcb06638834c364732d50188">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100884" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/884/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_42.c" language="C" size="2656" checksum="a89836d4711cb01d6d02c088dd7e7840f43bdc64">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100885" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/885/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_43.cpp" language="C++" size="2619" checksum="f44c545a378124729c13b4338250b9dc0968e71d">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100886" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/886/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_44.c" language="C" size="2803" checksum="8dc9ac8b52669a014f86000a5fd58459a966e195">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100887" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/887/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_45.c" language="C" size="3104" checksum="5d8a9482020927259285be4f37b6c82ddab59a4a">
      <mixed line="32" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100888" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/888/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_51a.c" language="C" size="2623" checksum="d47672cefaa100af3d5492cb973d01acbe99de9c"></file>
    <file path="000/100/888/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_51b.c" language="C" size="1194" checksum="f32eb842dee33c2e1c1efb15a2266aa7433f7448">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100889" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/889/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_52a.c" language="C" size="2640" checksum="c8c789b5e68cd8ee801a1df59d7f5b8fd310b6e7"></file>
    <file path="000/100/889/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_52b.c" language="C" size="1373" checksum="3eab31bb4cbe4482593b6c8e386319e30399374e"></file>
    <file path="000/100/889/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_52c.c" language="C" size="1211" checksum="0794cd6669027f07df493f6378063d19f8cb88eb">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100890" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/890/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_53a.c" language="C" size="2667" checksum="b8cf07e88d03cdde3b7b0bf3bfe7b3029c5152d6"></file>
    <file path="000/100/890/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_53b.c" language="C" size="1400" checksum="83322846e57007bb3409910e9809d9e4d1296d7e"></file>
    <file path="000/100/890/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_53c.c" language="C" size="1400" checksum="cfad841a70fd854ec282ef5e384e9de6b443dc32"></file>
    <file path="000/100/890/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_53d.c" language="C" size="1238" checksum="fecf338b53ab3b1f493f04098131a510521bbd11">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100891" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/891/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_54a.c" language="C" size="2668" checksum="69e1be62704db6b29fca89678b1a55290b4a8ee7"></file>
    <file path="000/100/891/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_54b.c" language="C" size="1401" checksum="3e6f8633f049fcc81e5c7303cc1c50eaf266d40c"></file>
    <file path="000/100/891/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_54c.c" language="C" size="1401" checksum="0ea4e8f421459df431020df66b7856c11b02f5f5"></file>
    <file path="000/100/891/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_54d.c" language="C" size="1401" checksum="d334957dd04842dde223669e4a6be6044c6c8ba5"></file>
    <file path="000/100/891/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_54e.c" language="C" size="1239" checksum="afd6096edb60633bacc1af545fc570f0e9d00258">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100892" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/892/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_61a.c" language="C" size="2590" checksum="82b3197b9f1a58edba77e6a26b163ded6d8ed7e2">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/892/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_61b.c" language="C" size="1291" checksum="07d73b194c1805983c3151f3cc0698b16091f7eb"></file>
  </testcase>
  <testcase id="100893" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/893/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_62a.cpp" language="C++" size="2347" checksum="6cda4be7c31392dd99fc97ca297a8f8a6a5e029f">
      <mixed line="38" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/893/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_62b.cpp" language="C++" size="1234" checksum="53efb8cccf11ea4291c55ddd440b4dc3bce670a7"></file>
  </testcase>
  <testcase id="100894" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/894/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_63a.c" language="C" size="2594" checksum="576036aecffc8891e28090c68597b74ce8adeb80"></file>
    <file path="000/100/894/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_63b.c" language="C" size="1310" checksum="70bfad7573c27493907fe81fadda9ab95665ca01">
      <mixed line="29" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100895" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/895/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_64a.c" language="C" size="2606" checksum="9521f4b16ff6c8546f80a20ede4d55989ca039be"></file>
    <file path="000/100/895/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_64b.c" language="C" size="1631" checksum="17ff5f441dab3c547af142de403ed7cf49b3453e">
      <mixed line="32" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100896" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/896/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_65a.c" language="C" size="2786" checksum="dd1afcac0216cc1b5045b3a0d0b59f6686621e81"></file>
    <file path="000/100/896/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_65b.c" language="C" size="1288" checksum="2922e8936361f534d8c9a667f71c0b2a46d9b89a">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100897" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/897/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_66a.c" language="C" size="2743" checksum="0aa7d10f390206bc8e1d56f89c4a3feee56e7014"></file>
    <file path="000/100/897/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_66b.c" language="C" size="1361" checksum="f21827555581b9a94ce0e3dd09493aead584cb6a">
      <mixed line="30" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100898" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/898/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_67a.c" language="C" size="3157" checksum="c2f8e7113f639c364e44051275cf962ba56b9f27"></file>
    <file path="000/100/898/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_67b.c" language="C" size="1650" checksum="ae943674137f7f4fe7c79e44821afdb5c45711d7">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100899" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/899/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_68a.c" language="C" size="2957" checksum="e24d97c882c3e6b8afac767fe3bbecd8a117a651"></file>
    <file path="000/100/899/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_68b.c" language="C" size="1564" checksum="c335aa41243e5e27e2cfcc04c2045747d8fd0ea2">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100900" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/900/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_72a.cpp" language="C++" size="2801" checksum="7190ba17099c74f5bcd1588d9a7d68fe7cf52964"></file>
    <file path="000/100/900/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_72b.cpp" language="C++" size="1407" checksum="bf8d9b771e37d25ae01d2b47e78c889cea36e70f">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100901" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/901/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_73a.cpp" language="C++" size="2655" checksum="df7fc09725c39891147a7a96cc20aed64336456e"></file>
    <file path="000/100/901/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_73b.cpp" language="C++" size="1397" checksum="386780bbc27a94c900abd13927784347a92e4ff3">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100902" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/902/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_74a.cpp" language="C++" size="2620" checksum="7bf0a59319e6943f72d931bf3c4b26479255db5e"></file>
    <file path="000/100/902/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_74b.cpp" language="C++" size="1390" checksum="40092912c46a4804d391dcdf191df4c9941d32a5">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100903" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/903/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_81.h" language="C" size="1344" checksum="c7898a2ead2ae455bacea137065157256e8efb80"></file>
    <file path="000/100/903/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_81_bad.cpp" language="C++" size="1097" checksum="c70b71f8949fad31d16364db7b9216983e051fed">
      <mixed line="31" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/903/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_81_goodB2G.cpp" language="C++" size="1061" checksum="6567807e31825758d6b811cb9a07ced56937da5c"></file>
    <file path="000/100/903/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_81a.cpp" language="C++" size="2639" checksum="8a70be66e08121a32517aa45879df5cda6ada351"></file>
  </testcase>
  <testcase id="100904" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/904/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_82.h" language="C" size="1324" checksum="071add0b04e45156726310c63beb864c6f46f582"></file>
    <file path="000/100/904/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_82_bad.cpp" language="C++" size="1089" checksum="3bb70d92ca5fa362384f216303e164ef959fe962">
      <mixed line="31" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/904/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_82_goodB2G.cpp" language="C++" size="1053" checksum="fe52246c1c63aec505efdd0bdbab61604a26bd9a"></file>
    <file path="000/100/904/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_82a.cpp" language="C++" size="2679" checksum="736dd2acf8b19a37c5fd7ac10f7510513a5bc0de"></file>
  </testcase>
  <testcase id="100905" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/905/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_83.h" language="C" size="1357" checksum="bf50a07674d488e97145e6b61fb4072e7ce60b85"></file>
    <file path="000/100/905/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_83_bad.cpp" language="C++" size="1464" checksum="5a34ebd1e3c8ab782358fe9330fd158e19e2ded7">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/905/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_83_goodB2G.cpp" language="C++" size="1440" checksum="b0866f967e34e8635fca526e740d4c9db362aea9"></file>
    <file path="000/100/905/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_83a.cpp" language="C++" size="2157" checksum="4faa1a199c87211f778a056c6511ee949fd63b99"></file>
  </testcase>
  <testcase id="100906" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/906/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_84.h" language="C" size="1382" checksum="27e35e307eea651633036d7ca8bb7ddd25e18a48"></file>
    <file path="000/100/906/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_84_bad.cpp" language="C++" size="1489" checksum="5391dbaa43fbf18ec3f28291b02de8f10653c84e">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/906/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_84_goodB2G.cpp" language="C++" size="1465" checksum="76ad209d675778f013510b5513fd4f3249c5c8c5"></file>
    <file path="000/100/906/CWE404_Improper_Resource_Shutdown__fopen_w32CloseHandle_84a.cpp" language="C++" size="2378" checksum="fe8bbdc480a2078f8e937d08c2d40e3c3e1cf5e2"></file>
  </testcase>
  <testcase id="100907" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/907/CWE404_Improper_Resource_Shutdown__fopen_w32_close_01.c" language="C" size="2323" checksum="c8de9ea0df98350e4acbd1eb58d6b31203fd7c05">
      <mixed line="31" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100908" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/908/CWE404_Improper_Resource_Shutdown__fopen_w32_close_02.c" language="C" size="3078" checksum="187069367418c8b805bf65b398189410119bc23d">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100909" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/909/CWE404_Improper_Resource_Shutdown__fopen_w32_close_03.c" language="C" size="3099" checksum="39739076c0812c4f93915fb1ff9473ef938c0163">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100910" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/910/CWE404_Improper_Resource_Shutdown__fopen_w32_close_04.c" language="C" size="3464" checksum="9058c6f513cde28b1f2959ce905ea59787aeff60">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100911" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/911/CWE404_Improper_Resource_Shutdown__fopen_w32_close_05.c" language="C" size="3435" checksum="fd61f71159b00721621d7b9b49be3616539c01ba">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100912" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/912/CWE404_Improper_Resource_Shutdown__fopen_w32_close_06.c" language="C" size="3405" checksum="304d4ac7598f505e7cda64bdd89cc166b3d5ef1d">
      <mixed line="38" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100913" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/913/CWE404_Improper_Resource_Shutdown__fopen_w32_close_07.c" language="C" size="3385" checksum="ba52eaa948bd18ef42828f564f5f16f9d0bdee6c">
      <mixed line="38" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100914" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/914/CWE404_Improper_Resource_Shutdown__fopen_w32_close_08.c" language="C" size="3485" checksum="313ad30d25325cf2ec7da8112cd88e219343dfe5">
      <mixed line="46" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100915" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/915/CWE404_Improper_Resource_Shutdown__fopen_w32_close_09.c" language="C" size="3193" checksum="a66586d1773a4018a7759ae70ec2126a1d21b6c0">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100916" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/916/CWE404_Improper_Resource_Shutdown__fopen_w32_close_10.c" language="C" size="3144" checksum="e124a40c34d975ae172c94b988d392a181b0f55f">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100917" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/917/CWE404_Improper_Resource_Shutdown__fopen_w32_close_11.c" language="C" size="3207" checksum="935d63653dab2aad5d83f225952106e988405a7c">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100918" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/918/CWE404_Improper_Resource_Shutdown__fopen_w32_close_12.c" language="C" size="2863" checksum="e6ec6e2ff1c7137c69523da475f611d9bb7864dc">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100919" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/919/CWE404_Improper_Resource_Shutdown__fopen_w32_close_13.c" language="C" size="3211" checksum="6f3b9f3847effd413b2ac68fbdfb2b3ad7bca81a">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100920" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/920/CWE404_Improper_Resource_Shutdown__fopen_w32_close_14.c" language="C" size="3162" checksum="3b2dbfef01cc82d100d2b148bfe26347dc6d8302">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100921" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/921/CWE404_Improper_Resource_Shutdown__fopen_w32_close_15.c" language="C" size="3501" checksum="8ec354b1a4677b32233706e0e2f7d54bee1d31db">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100922" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/922/CWE404_Improper_Resource_Shutdown__fopen_w32_close_16.c" language="C" size="2508" checksum="e06f2f08828847eb8df3f31fe765e0542114b95b">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100923" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/923/CWE404_Improper_Resource_Shutdown__fopen_w32_close_17.c" language="C" size="2489" checksum="69597258d07545c7b9655144e367829eb980f5df">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100924" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/924/CWE404_Improper_Resource_Shutdown__fopen_w32_close_18.c" language="C" size="2428" checksum="85d274699664680d187c89014189fdabeb9b4c49">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100925" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/925/CWE404_Improper_Resource_Shutdown__fopen_w32_close_21.c" language="C" size="3825" checksum="f47f4a4591b5cdd2aeffe113495800aaefa483ce">
      <mixed line="31" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100926" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/926/CWE404_Improper_Resource_Shutdown__fopen_w32_close_22a.c" language="C" size="3747" checksum="fb3e613b66b3386962493a245184b3435826bab4"></file>
    <file path="000/100/926/CWE404_Improper_Resource_Shutdown__fopen_w32_close_22b.c" language="C" size="2452" checksum="755db9b017bbc5df6c12c8344ee4cf93a0b9f70b">
      <mixed line="31" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100927" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/927/CWE404_Improper_Resource_Shutdown__fopen_w32_close_31.c" language="C" size="2568" checksum="8fc1cf58cc6673db4bdbdd31b25ee5fc8107f1f4">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100928" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 32 Data flow: two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/928/CWE404_Improper_Resource_Shutdown__fopen_w32_close_32.c" language="C" size="2807" checksum="f3b66e93781beba040ce32340199d5e64405a497">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100929" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/929/CWE404_Improper_Resource_Shutdown__fopen_w32_close_33.cpp" language="C++" size="2573" checksum="d13ef7924e64e52438b7393ab8e7f3cafeb8b500">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100930" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/930/CWE404_Improper_Resource_Shutdown__fopen_w32_close_34.c" language="C" size="2928" checksum="3c1edbe9f6f8b27471bcc1aa2817dd164dbc360b">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100931" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/931/CWE404_Improper_Resource_Shutdown__fopen_w32_close_41.c" language="C" size="2535" checksum="09c3768d70756ade5ed99edeecffa90de31ae5f1">
      <mixed line="26" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100932" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/932/CWE404_Improper_Resource_Shutdown__fopen_w32_close_42.c" language="C" size="2584" checksum="0a2a801d04773dc9c4216f5bd95ab17fe50c25fb">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100933" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/933/CWE404_Improper_Resource_Shutdown__fopen_w32_close_43.cpp" language="C++" size="2557" checksum="c986269e3f2f14cb1f1a16f87b9381a360e78907">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100934" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/934/CWE404_Improper_Resource_Shutdown__fopen_w32_close_44.c" language="C" size="2731" checksum="7f96b2762bc79a1594e4db64f5a776cf696fead4">
      <mixed line="26" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100935" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/935/CWE404_Improper_Resource_Shutdown__fopen_w32_close_45.c" language="C" size="3002" checksum="c9b8847803cdf1ec5eaf099a0f72850b10ce345a">
      <mixed line="30" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100936" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/936/CWE404_Improper_Resource_Shutdown__fopen_w32_close_51a.c" language="C" size="2545" checksum="a71dff834add7259d07d34405c1c63ba32fa9cc3"></file>
    <file path="000/100/936/CWE404_Improper_Resource_Shutdown__fopen_w32_close_51b.c" language="C" size="1132" checksum="ed679fcf67486a2076e7a1c62729e20faf281277">
      <mixed line="26" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100937" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/937/CWE404_Improper_Resource_Shutdown__fopen_w32_close_52a.c" language="C" size="2562" checksum="302036a68168fbbb9c93956133090266e7340d47"></file>
    <file path="000/100/937/CWE404_Improper_Resource_Shutdown__fopen_w32_close_52b.c" language="C" size="1305" checksum="f4f8c09074f8d48461e05544f6b7babecda27849"></file>
    <file path="000/100/937/CWE404_Improper_Resource_Shutdown__fopen_w32_close_52c.c" language="C" size="1149" checksum="73c67cf13e45a6ef44fadfc1e6ae9f514619232e">
      <mixed line="26" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100938" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/938/CWE404_Improper_Resource_Shutdown__fopen_w32_close_53a.c" language="C" size="2589" checksum="7d1861930f97c4049642b4fb3ce4d56caa6539ea"></file>
    <file path="000/100/938/CWE404_Improper_Resource_Shutdown__fopen_w32_close_53b.c" language="C" size="1332" checksum="a4a0a67862cdc0b8dfb3c058d44274210d78b535"></file>
    <file path="000/100/938/CWE404_Improper_Resource_Shutdown__fopen_w32_close_53c.c" language="C" size="1332" checksum="d82319928e39a0f3f1eb1ddc41c806a8f9e5b2ae"></file>
    <file path="000/100/938/CWE404_Improper_Resource_Shutdown__fopen_w32_close_53d.c" language="C" size="1176" checksum="a1c219f0797e02c52e1c14f793d363b87626a4f9">
      <mixed line="26" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100939" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/939/CWE404_Improper_Resource_Shutdown__fopen_w32_close_54a.c" language="C" size="2590" checksum="78f913b6b2cd5578c83affe3c1daeac00fe1c6bf"></file>
    <file path="000/100/939/CWE404_Improper_Resource_Shutdown__fopen_w32_close_54b.c" language="C" size="1333" checksum="f3cfb30b0ca5a36893bd972b2b7b32480eeac3a9"></file>
    <file path="000/100/939/CWE404_Improper_Resource_Shutdown__fopen_w32_close_54c.c" language="C" size="1333" checksum="92a0d217698770d3c4aff46c666f3c6f4b2b43a5"></file>
    <file path="000/100/939/CWE404_Improper_Resource_Shutdown__fopen_w32_close_54d.c" language="C" size="1333" checksum="0c0f2b2aa5ef7ba22e0ac28fe67d8c36f831c41d"></file>
    <file path="000/100/939/CWE404_Improper_Resource_Shutdown__fopen_w32_close_54e.c" language="C" size="1177" checksum="4b86cd4698baedeb19991c1ac213ea6df19aac8e">
      <mixed line="26" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100940" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/940/CWE404_Improper_Resource_Shutdown__fopen_w32_close_61a.c" language="C" size="2498" checksum="04d9b982c5582c3f1ab0ce8813102db219458c56">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/940/CWE404_Improper_Resource_Shutdown__fopen_w32_close_61b.c" language="C" size="1243" checksum="4d06077528f603e4b1067cdb27c35cac4be701ee"></file>
  </testcase>
  <testcase id="100941" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/941/CWE404_Improper_Resource_Shutdown__fopen_w32_close_62a.cpp" language="C++" size="2285" checksum="95c4213b9f400e29f487f9a2855372f72e42aa3e">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/941/CWE404_Improper_Resource_Shutdown__fopen_w32_close_62b.cpp" language="C++" size="1215" checksum="8e29458565edb4cf89a98d4ba193768ed63e151d"></file>
  </testcase>
  <testcase id="100942" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/942/CWE404_Improper_Resource_Shutdown__fopen_w32_close_63a.c" language="C" size="2516" checksum="bcc9da9b11baec9c1867a55f8cd69ec0685f961f"></file>
    <file path="000/100/942/CWE404_Improper_Resource_Shutdown__fopen_w32_close_63b.c" language="C" size="1248" checksum="56ff524dacd8d5d4f7fc5ceee8590d45d4018a12">
      <mixed line="27" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100943" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/943/CWE404_Improper_Resource_Shutdown__fopen_w32_close_64a.c" language="C" size="2528" checksum="0b1142b0af6abba7c417f05aa21a477f33770ef3"></file>
    <file path="000/100/943/CWE404_Improper_Resource_Shutdown__fopen_w32_close_64b.c" language="C" size="1569" checksum="13c2e0374c7b874c8c67d1a817c63b41baf4324e">
      <mixed line="30" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100944" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/944/CWE404_Improper_Resource_Shutdown__fopen_w32_close_65a.c" language="C" size="2708" checksum="31d2b959258c13c85fbc32434ed67435b14dbd10"></file>
    <file path="000/100/944/CWE404_Improper_Resource_Shutdown__fopen_w32_close_65b.c" language="C" size="1226" checksum="d82b67c04ba80c27bf5475d9da0d2a5abb888f51">
      <mixed line="26" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100945" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/945/CWE404_Improper_Resource_Shutdown__fopen_w32_close_66a.c" language="C" size="2665" checksum="71031ff5d08db6d7803fd59449e7b256e1d617fc"></file>
    <file path="000/100/945/CWE404_Improper_Resource_Shutdown__fopen_w32_close_66b.c" language="C" size="1299" checksum="adcb599fcb9ef58f2b0f6708aded596a958dcf3d">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100946" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/946/CWE404_Improper_Resource_Shutdown__fopen_w32_close_67a.c" language="C" size="3049" checksum="e084d385ba2466e86cccc011f216c7edd0525fe1"></file>
    <file path="000/100/946/CWE404_Improper_Resource_Shutdown__fopen_w32_close_67b.c" language="C" size="1568" checksum="d005c6227d99c8e78c46f62fc8f5947a07cd8755">
      <mixed line="32" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100947" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/947/CWE404_Improper_Resource_Shutdown__fopen_w32_close_68a.c" language="C" size="2859" checksum="893caad903c8977cf1117f122ad7685b96ba092f"></file>
    <file path="000/100/947/CWE404_Improper_Resource_Shutdown__fopen_w32_close_68b.c" language="C" size="1482" checksum="0c0fd34c882c53bd872fbe91791afe1a2eab0d7f">
      <mixed line="31" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100948" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/948/CWE404_Improper_Resource_Shutdown__fopen_w32_close_72a.cpp" language="C++" size="2777" checksum="c92f781c58493afd109eb20384a57c96a7bf74fd"></file>
    <file path="000/100/948/CWE404_Improper_Resource_Shutdown__fopen_w32_close_72b.cpp" language="C++" size="1350" checksum="6f1a9db8b6f98b819853d416afe2aa28be405bbc">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100949" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/949/CWE404_Improper_Resource_Shutdown__fopen_w32_close_73a.cpp" language="C++" size="2631" checksum="1e55684d86272aa085721ccbc59c00c203312371"></file>
    <file path="000/100/949/CWE404_Improper_Resource_Shutdown__fopen_w32_close_73b.cpp" language="C++" size="1340" checksum="5912690f88d00a259b069d8287472589c8420877">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100950" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/950/CWE404_Improper_Resource_Shutdown__fopen_w32_close_74a.cpp" language="C++" size="2596" checksum="c79db411650746f4b56050837122339a63506561"></file>
    <file path="000/100/950/CWE404_Improper_Resource_Shutdown__fopen_w32_close_74b.cpp" language="C++" size="1333" checksum="0dc5d042d6b06823aab1bf6398a5bf97776318e0">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100951" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/951/CWE404_Improper_Resource_Shutdown__fopen_w32_close_81.h" language="C" size="1300" checksum="b9127a964c5db52a353a31dbe117485b49161597"></file>
    <file path="000/100/951/CWE404_Improper_Resource_Shutdown__fopen_w32_close_81_bad.cpp" language="C++" size="1030" checksum="e68e67e191681a66c3c9e03b3ec2739ba76b99e8">
      <mixed line="29" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/951/CWE404_Improper_Resource_Shutdown__fopen_w32_close_81_goodB2G.cpp" language="C++" size="1008" checksum="3ecd067830fc79d080dbdaf22f734b5631728cf1"></file>
    <file path="000/100/951/CWE404_Improper_Resource_Shutdown__fopen_w32_close_81a.cpp" language="C++" size="2566" checksum="8e4f398ea067703e08b193b0f1141ef9522c8b7a"></file>
  </testcase>
  <testcase id="100952" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/952/CWE404_Improper_Resource_Shutdown__fopen_w32_close_82.h" language="C" size="1280" checksum="5d4d43f9162359532e2d426bbc302cc4823891c8"></file>
    <file path="000/100/952/CWE404_Improper_Resource_Shutdown__fopen_w32_close_82_bad.cpp" language="C++" size="1022" checksum="0226918a88edfb3821f6f13e7c98a5896c5fc2be">
      <mixed line="29" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/952/CWE404_Improper_Resource_Shutdown__fopen_w32_close_82_goodB2G.cpp" language="C++" size="1000" checksum="865611e9fd3c5b3fe09b994a81824eb6aa625836"></file>
    <file path="000/100/952/CWE404_Improper_Resource_Shutdown__fopen_w32_close_82a.cpp" language="C++" size="2606" checksum="c27976cff0376e92d0270b3e93cecc7c3ae91fba"></file>
  </testcase>
  <testcase id="100953" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/953/CWE404_Improper_Resource_Shutdown__fopen_w32_close_83.h" language="C" size="1308" checksum="65171b4decd5308299d8fde715a60fe0af579d48"></file>
    <file path="000/100/953/CWE404_Improper_Resource_Shutdown__fopen_w32_close_83_bad.cpp" language="C++" size="1382" checksum="99d053ce041ee67be1fb7a424a39b6163c9902ba">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/953/CWE404_Improper_Resource_Shutdown__fopen_w32_close_83_goodB2G.cpp" language="C++" size="1372" checksum="9a676e17b6b0e661cee88a3f68b1387193c518ca"></file>
    <file path="000/100/953/CWE404_Improper_Resource_Shutdown__fopen_w32_close_83a.cpp" language="C++" size="2118" checksum="da0c40393bde9d16bb2e94ced8376904d0342be8"></file>
  </testcase>
  <testcase id="100954" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: fopen Open a file using fopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/954/CWE404_Improper_Resource_Shutdown__fopen_w32_close_84.h" language="C" size="1333" checksum="501640764a6adc12d5171369978a3ccb64d75cdb"></file>
    <file path="000/100/954/CWE404_Improper_Resource_Shutdown__fopen_w32_close_84_bad.cpp" language="C++" size="1407" checksum="c1946878670c6f1994d208eee8f914c5887b983a">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/954/CWE404_Improper_Resource_Shutdown__fopen_w32_close_84_goodB2G.cpp" language="C++" size="1397" checksum="f4245563ea7f8688b768c8f14eb024a5574fc8dc"></file>
    <file path="000/100/954/CWE404_Improper_Resource_Shutdown__fopen_w32_close_84a.cpp" language="C++" size="2329" checksum="1ec7452b7944c32feb8763bfec0d7f4d03eccdef"></file>
  </testcase>
  <testcase id="100955" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/955/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_01.c" language="C" size="2427" checksum="fc17fb7c1414bfec97ca9300367ffeeb638b913f">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100956" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/956/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_02.c" language="C" size="3191" checksum="4c8dcad2119c650d2cd70561837a40288c42a2b5">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100957" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/957/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_03.c" language="C" size="3212" checksum="d85368014de84efe054c24fe8b4aac45f20a6449">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100958" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/958/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_04.c" language="C" size="3577" checksum="447bad51192416d2fece30dece06aa71410c9b0e">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100959" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/959/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_05.c" language="C" size="3548" checksum="50b4bf81aa6fab302ecb1011cd25c2e6b4d87b03">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100960" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/960/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_06.c" language="C" size="3518" checksum="88cf92c3a31527fecfb6337c683062a5d623437a">
      <mixed line="40" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100961" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/961/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_07.c" language="C" size="3498" checksum="0521e07c98fbf660a0c6f42caba1b8d3b269631e">
      <mixed line="40" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100962" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/962/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_08.c" language="C" size="3598" checksum="1e8c8cc50c1d6575a4dba21eff3c3d2a78bab86f">
      <mixed line="48" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100963" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/963/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_09.c" language="C" size="3306" checksum="ee35eb24f138aaca7b2c8c9908c27f54e6aeb5f1">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100964" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/964/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_10.c" language="C" size="3257" checksum="0c4a0c2142a2fe3de555df335540a5a53b956ceb">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100965" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/965/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_11.c" language="C" size="3320" checksum="555569b469a766046ef479f4d019b2be8a46335c">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100966" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/966/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_12.c" language="C" size="2967" checksum="638efef6e0a7c28351d7ffd28517af0b1bf59baf">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100967" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/967/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_13.c" language="C" size="3324" checksum="f4a8a444b5f384f64fb61c4cd2c21174c26bc0af">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100968" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/968/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_14.c" language="C" size="3275" checksum="07db90fa4caec290345478f82041137335f37ddd">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100969" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/969/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_15.c" language="C" size="3614" checksum="d6c1ac4aacb80ad3fd0ca665bdb81b3d5c65faca">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100970" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/970/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_16.c" language="C" size="2612" checksum="726b0890085af54df65171c316a391e99cd0079e">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100971" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/971/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_17.c" language="C" size="2593" checksum="5ce041890850fc39a6a74dc66473162633493b3b">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100972" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/972/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_18.c" language="C" size="2532" checksum="83b0cc32e45de5e9c46eb2042a70912270266112">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100973" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/973/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_21.c" language="C" size="3938" checksum="1e02120aadfde3ce39e32a05d1edeaaed3fb3f2a">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100974" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/974/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_22a.c" language="C" size="3906" checksum="7c36252dc485fb0ec1d29b0c4c0c201641c91449"></file>
    <file path="000/100/974/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_22b.c" language="C" size="2573" checksum="e4fa8cbbed34c801150a09dd696ac4fb94a7459e">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100975" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/975/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_31.c" language="C" size="2672" checksum="cf058d927773dace28074c4fe321c7c9eeb10b40">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100976" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 32 Data flow: two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/976/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_32.c" language="C" size="2911" checksum="083ee7b475288351d55f01e834c1f486ea4a886f">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100977" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/977/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_33.cpp" language="C++" size="2663" checksum="619570083472ac9d62e012a8531f7a70c6ac44e6">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100978" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/978/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_34.c" language="C" size="3053" checksum="c6347a303e0b2eece0b39a01a28bc93db14efc3c">
      <mixed line="43" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100979" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/979/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_41.c" language="C" size="2639" checksum="3a5d65801800263253525a1887655eb488e8db44">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100980" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/980/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_42.c" language="C" size="2688" checksum="0066861be5bbae1060fdf12c54bccc409de0d0dc">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100981" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/981/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_43.cpp" language="C++" size="2647" checksum="81ea4d30e57078cdc6f9bfd1ea9592c857f0242a">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100982" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/982/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_44.c" language="C" size="2835" checksum="71f44acd97ac1db6845abcf8d412dc02ed59e892">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100983" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/983/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_45.c" language="C" size="3148" checksum="4f436deaffa683be211a5e4661feb47f77b682dc">
      <mixed line="32" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100984" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/984/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_51a.c" language="C" size="2663" checksum="e12314ebea74060e8631312d162d3ae37100019d"></file>
    <file path="000/100/984/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_51b.c" language="C" size="1204" checksum="ccc9bb9c624ba4bd8693b39ac2090eb7e11b4827">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100985" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/985/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_52a.c" language="C" size="2680" checksum="4f91c24bb95b89824b00680d0412cae721711911"></file>
    <file path="000/100/985/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_52b.c" language="C" size="1391" checksum="e9e04aa7bf18f1ca4dee67f39e36bff91667697c"></file>
    <file path="000/100/985/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_52c.c" language="C" size="1221" checksum="0578c779c1cadde5f6cf641a8961c867099ae731">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100986" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/986/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_53a.c" language="C" size="2707" checksum="5fb15eef1e145bfedfed4752c65e645472fd9d13"></file>
    <file path="000/100/986/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_53b.c" language="C" size="1418" checksum="8c2c196bab3f295e658d1690ff457d214d88a3d5"></file>
    <file path="000/100/986/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_53c.c" language="C" size="1418" checksum="0da68fd6d96e5007be927e6cb11711144d8f72c8"></file>
    <file path="000/100/986/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_53d.c" language="C" size="1248" checksum="1ebefd9aa8b529cb2eccb91d972dd64d4a6b7491">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100987" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/987/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_54a.c" language="C" size="2708" checksum="fbf47105f87219a142b4f454ac8c6afe4a1884a1"></file>
    <file path="000/100/987/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_54b.c" language="C" size="1419" checksum="faf5c134f264827a4d8210eb44da57f738d9e11c"></file>
    <file path="000/100/987/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_54c.c" language="C" size="1419" checksum="61537d851ff51db8752f491dcb8a9eee22edfa88"></file>
    <file path="000/100/987/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_54d.c" language="C" size="1419" checksum="e293e1f48481b94ccf52991621a23a442abd9ea8"></file>
    <file path="000/100/987/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_54e.c" language="C" size="1249" checksum="bc50bce0e2a915c4ef61445e7f403a8d78afcb17">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100988" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/988/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_61a.c" language="C" size="2612" checksum="611f18f6059af3c410f1e92752ce73cd31fabc30">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/988/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_61b.c" language="C" size="1319" checksum="df852c6ed596e46bbf06f14c9834d9b2edf96b4d"></file>
  </testcase>
  <testcase id="100989" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/989/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_62a.cpp" language="C++" size="2357" checksum="3e4efdbbae1875bcf711c9ae10c02217ad97d3f0">
      <mixed line="38" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/989/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_62b.cpp" language="C++" size="1260" checksum="b6e651a62fce916e812e3fb016f471658b47f844"></file>
  </testcase>
  <testcase id="100990" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/990/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_63a.c" language="C" size="2634" checksum="493267483ad6a0c1639d745e402541bc67f600cd"></file>
    <file path="000/100/990/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_63b.c" language="C" size="1320" checksum="4186961b9f7a175fc7039c81b2034951566f1869">
      <mixed line="29" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100991" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/991/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_64a.c" language="C" size="2646" checksum="dbd5f48c858220d39c92a702b0136652d3c2ce85"></file>
    <file path="000/100/991/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_64b.c" language="C" size="1641" checksum="ff66fad8b53216b4ab30cb4e35182c69ff2d2cfd">
      <mixed line="32" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100992" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/992/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_65a.c" language="C" size="2826" checksum="0cc30c6277148e3f83b9395eef04ffc83fe99d75"></file>
    <file path="000/100/992/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_65b.c" language="C" size="1298" checksum="abbef50d2b8aa1dbafda2c99eb18074aedf00f72">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100993" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/993/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_66a.c" language="C" size="2783" checksum="a7a4af4528b42a75705efa1cd124fe1bcfe6bab9"></file>
    <file path="000/100/993/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_66b.c" language="C" size="1371" checksum="8739517b8b4fa449fae4af126e31813ea83f7d84">
      <mixed line="30" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100994" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/994/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_67a.c" language="C" size="3209" checksum="fad65638c9146ce4f7122c8e476190d6f88669bf"></file>
    <file path="000/100/994/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_67b.c" language="C" size="1668" checksum="00b79b47619d71575b41c01696488dd10fff5b2c">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100995" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/995/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_68a.c" language="C" size="3005" checksum="c18030dfa9ad520e9f8fcf128d6d2d8158e20d78"></file>
    <file path="000/100/995/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_68b.c" language="C" size="1582" checksum="681c1d5e9724676c91dd6e269719e65bb81c20f7">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100996" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/996/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_72a.cpp" language="C++" size="2829" checksum="a1614c41fcecc43fa5887373f962eeaa9038ae93"></file>
    <file path="000/100/996/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_72b.cpp" language="C++" size="1415" checksum="10a96db8088927c5dd6b3e7701d664f39746a552">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100997" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/997/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_73a.cpp" language="C++" size="2683" checksum="1285d7d2f88fde8d82583132d1b4329fbba0e1eb"></file>
    <file path="000/100/997/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_73b.cpp" language="C++" size="1405" checksum="df4d7c1ae6d28891dd3f75211b7fb52d12d32cec">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100998" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/998/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_74a.cpp" language="C++" size="2648" checksum="8b99f6cf57ef70708bc56c78749dd6c3feac3244"></file>
    <file path="000/100/998/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_74b.cpp" language="C++" size="1398" checksum="403b1aa3db0367f709038402d2f7ac7ffb80c997">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="100999" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/100/999/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_81.h" language="C" size="1362" checksum="c5596a235fc08acc88eafa2ee4ce4a637552573b"></file>
    <file path="000/100/999/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_81_bad.cpp" language="C++" size="1109" checksum="6d038257bb706eabe5f677265aae6be78a08b7af">
      <mixed line="31" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/100/999/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_81_goodB2G.cpp" language="C++" size="1073" checksum="2a44f3e594926c92f32837fa0652dbb4706f23d5"></file>
    <file path="000/100/999/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_81a.cpp" language="C++" size="2677" checksum="7d8b63ffd3a8236e597a2994308412475ba767d4"></file>
  </testcase>
  <testcase id="101000" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/000/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_82.h" language="C" size="1342" checksum="56a099149970f6398beca87189313e7dcc49c329"></file>
    <file path="000/101/000/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_82_bad.cpp" language="C++" size="1101" checksum="6e42be9a008e1575d87deddf919a33c28a673ed6">
      <mixed line="31" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/000/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_82_goodB2G.cpp" language="C++" size="1065" checksum="ad441cd7f9d82e17b2661b7854d7f80f9a0a3905"></file>
    <file path="000/101/000/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_82a.cpp" language="C++" size="2717" checksum="0e5c51fb14ab146ae9215a66cc2321d104dbf743"></file>
  </testcase>
  <testcase id="101001" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/001/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_83.h" language="C" size="1377" checksum="1eeb11bc0ff58a8ad65911e28ef5f7ce12c4650f"></file>
    <file path="000/101/001/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_83_bad.cpp" language="C++" size="1491" checksum="b8c0e06f127c83f9be226ae0525a11f89a06ff5b">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/001/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_83_goodB2G.cpp" language="C++" size="1467" checksum="cf60082ba1fa1688898df38053ec158a6f61c066"></file>
    <file path="000/101/001/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_83a.cpp" language="C++" size="2173" checksum="8eee844cc4e66163b7b09d7c1a6d740ab8c62661"></file>
  </testcase>
  <testcase id="101002" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/002/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_84.h" language="C" size="1402" checksum="95650b35b37bd6f1e49ba607070a51081dc9590a"></file>
    <file path="000/101/002/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_84_bad.cpp" language="C++" size="1516" checksum="578e1184783a5b238f23190ddd3cb6560ae68aea">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/002/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_84_goodB2G.cpp" language="C++" size="1492" checksum="5a8849879848b8471144f49870aadb94d36c9a11"></file>
    <file path="000/101/002/CWE404_Improper_Resource_Shutdown__freopen_w32CloseHandle_84a.cpp" language="C++" size="2398" checksum="5013fc52a9b0b5577f511e13d09af6357ef8183c"></file>
  </testcase>
  <testcase id="101003" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/003/CWE404_Improper_Resource_Shutdown__freopen_w32_close_01.c" language="C" size="2355" checksum="897a806ca89f1a4d7cc31338557e2c709812921b">
      <mixed line="31" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101004" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/004/CWE404_Improper_Resource_Shutdown__freopen_w32_close_02.c" language="C" size="3119" checksum="c779dea5bbe14ed82482d63718febbb7f6ae72e7">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101005" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/005/CWE404_Improper_Resource_Shutdown__freopen_w32_close_03.c" language="C" size="3140" checksum="0b88303b43139bb7db1203ad2bd2e1d3dfd624f5">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101006" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/006/CWE404_Improper_Resource_Shutdown__freopen_w32_close_04.c" language="C" size="3505" checksum="02203b58b672b6e36711a11e2c8118e1f8d2c6fc">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101007" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/007/CWE404_Improper_Resource_Shutdown__freopen_w32_close_05.c" language="C" size="3476" checksum="e9e26d62424d90beae4782d58906bf2039ab8c8f">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101008" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/008/CWE404_Improper_Resource_Shutdown__freopen_w32_close_06.c" language="C" size="3446" checksum="df064027889010f23f59b2671d274e1975048fe9">
      <mixed line="38" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101009" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/009/CWE404_Improper_Resource_Shutdown__freopen_w32_close_07.c" language="C" size="3426" checksum="dcf4d0fe08ae1aa34df657ce66b7bab60e5803b3">
      <mixed line="38" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101010" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/010/CWE404_Improper_Resource_Shutdown__freopen_w32_close_08.c" language="C" size="3526" checksum="e283a0f46a80f2232d1b02e01118e50f7b1244a6">
      <mixed line="46" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101011" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/011/CWE404_Improper_Resource_Shutdown__freopen_w32_close_09.c" language="C" size="3234" checksum="ff3b1083fd244c816baa6ee89d6c1243ddc68795">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101012" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/012/CWE404_Improper_Resource_Shutdown__freopen_w32_close_10.c" language="C" size="3185" checksum="fa41675dae69ef84c048d1472b67000412d06b74">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101013" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/013/CWE404_Improper_Resource_Shutdown__freopen_w32_close_11.c" language="C" size="3248" checksum="661da448e59c4f6a1cbba28be53b3e958875b979">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101014" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/014/CWE404_Improper_Resource_Shutdown__freopen_w32_close_12.c" language="C" size="2895" checksum="f021ffcf35c54e422dafb057840d08dad357d2cd">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101015" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/015/CWE404_Improper_Resource_Shutdown__freopen_w32_close_13.c" language="C" size="3252" checksum="bd83dcf53c11500d074f3d167cfb86b903e7253f">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101016" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/016/CWE404_Improper_Resource_Shutdown__freopen_w32_close_14.c" language="C" size="3203" checksum="e13e2d2254bf0be21b02645cdebac6ed5316b347">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101017" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/017/CWE404_Improper_Resource_Shutdown__freopen_w32_close_15.c" language="C" size="3542" checksum="076641658d5f0790b629849e214f0ca6fbe5a8a6">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101018" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/018/CWE404_Improper_Resource_Shutdown__freopen_w32_close_16.c" language="C" size="2540" checksum="d6f3c1b43acbd0f1ac2ccaf1bfe6e449b09a6d85">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101019" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/019/CWE404_Improper_Resource_Shutdown__freopen_w32_close_17.c" language="C" size="2521" checksum="896a17b8e22d6fa928d6b1c5f7b88cf715b3cbc4">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101020" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/020/CWE404_Improper_Resource_Shutdown__freopen_w32_close_18.c" language="C" size="2460" checksum="550b3400be52f18757d85061defbbca456811be0">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101021" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/021/CWE404_Improper_Resource_Shutdown__freopen_w32_close_21.c" language="C" size="3866" checksum="cd96e98f4268089cd45d4519b9ab64ca68b8f033">
      <mixed line="31" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101022" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/022/CWE404_Improper_Resource_Shutdown__freopen_w32_close_22a.c" language="C" size="3812" checksum="63ccc96f92c56d6e37c6179aa78ad1eb0d0c024c"></file>
    <file path="000/101/022/CWE404_Improper_Resource_Shutdown__freopen_w32_close_22b.c" language="C" size="2476" checksum="b40e30f44c55d812f48a8ff9ad9bff29027e9036">
      <mixed line="31" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101023" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/023/CWE404_Improper_Resource_Shutdown__freopen_w32_close_31.c" language="C" size="2600" checksum="df0d28b24c7f95f4421cf208e9b17d3b364f025d">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101024" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 32 Data flow: two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/024/CWE404_Improper_Resource_Shutdown__freopen_w32_close_32.c" language="C" size="2839" checksum="e191de7da74f8eec96a54ca4e654fd98a4e4e322">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101025" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/025/CWE404_Improper_Resource_Shutdown__freopen_w32_close_33.cpp" language="C++" size="2601" checksum="1c04b0dc86059b7d1f0dbcf2e85b2168ba95da5c">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101026" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/026/CWE404_Improper_Resource_Shutdown__freopen_w32_close_34.c" language="C" size="2966" checksum="294b0ca479eaea4ba1c37d21c501c53e2ca9e0e3">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101027" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/027/CWE404_Improper_Resource_Shutdown__freopen_w32_close_41.c" language="C" size="2567" checksum="fd593ddb4347ee99036e1e49dd184e92cd389d1f">
      <mixed line="26" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101028" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/028/CWE404_Improper_Resource_Shutdown__freopen_w32_close_42.c" language="C" size="2616" checksum="65f70b8eb7a4a24aa743d7163a2374ca213a4972">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101029" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/029/CWE404_Improper_Resource_Shutdown__freopen_w32_close_43.cpp" language="C++" size="2585" checksum="8927b943264441ed4458410ff50243201e20fdf3">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101030" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/030/CWE404_Improper_Resource_Shutdown__freopen_w32_close_44.c" language="C" size="2763" checksum="f6e2aa6695949ccc642e7313b6394bb4bf68239c">
      <mixed line="26" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101031" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/031/CWE404_Improper_Resource_Shutdown__freopen_w32_close_45.c" language="C" size="3046" checksum="400de211d27caadf049969399058cf78e341e427">
      <mixed line="30" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101032" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/032/CWE404_Improper_Resource_Shutdown__freopen_w32_close_51a.c" language="C" size="2585" checksum="912edda59bd09a4c6222e2efa0cf89ec975c5321"></file>
    <file path="000/101/032/CWE404_Improper_Resource_Shutdown__freopen_w32_close_51b.c" language="C" size="1142" checksum="ecd9e4dc6d58d10daca78ec2b967a3997f6565b7">
      <mixed line="26" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101033" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/033/CWE404_Improper_Resource_Shutdown__freopen_w32_close_52a.c" language="C" size="2602" checksum="3e0dd57c4a925418bff622706239506b762dd389"></file>
    <file path="000/101/033/CWE404_Improper_Resource_Shutdown__freopen_w32_close_52b.c" language="C" size="1323" checksum="52fccce2080a9a149044dee696f812c48204f650"></file>
    <file path="000/101/033/CWE404_Improper_Resource_Shutdown__freopen_w32_close_52c.c" language="C" size="1159" checksum="6ab4566542335b53670d121b6ab87bf0d554bc1c">
      <mixed line="26" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101034" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/034/CWE404_Improper_Resource_Shutdown__freopen_w32_close_53a.c" language="C" size="2629" checksum="03651f91c270db2bae4b790799fa6194eb52d905"></file>
    <file path="000/101/034/CWE404_Improper_Resource_Shutdown__freopen_w32_close_53b.c" language="C" size="1350" checksum="a2c62aa515f1d59d369006aca12c96af1589fe4a"></file>
    <file path="000/101/034/CWE404_Improper_Resource_Shutdown__freopen_w32_close_53c.c" language="C" size="1350" checksum="d77f7170aff7746b51c4fdcd5b491054db348aa6"></file>
    <file path="000/101/034/CWE404_Improper_Resource_Shutdown__freopen_w32_close_53d.c" language="C" size="1186" checksum="45a20c27577cdebbdff3975d91a19d1276b7a9c7">
      <mixed line="26" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101035" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/035/CWE404_Improper_Resource_Shutdown__freopen_w32_close_54a.c" language="C" size="2630" checksum="8b2987d3695a6a3f1c71f5e2ad651bbdefe6ac29"></file>
    <file path="000/101/035/CWE404_Improper_Resource_Shutdown__freopen_w32_close_54b.c" language="C" size="1351" checksum="3678fb987a1fd39ee3a5e561154b9a2fcc87ef99"></file>
    <file path="000/101/035/CWE404_Improper_Resource_Shutdown__freopen_w32_close_54c.c" language="C" size="1351" checksum="af242ee761e7ca35087f47184d1ecf315aed60a4"></file>
    <file path="000/101/035/CWE404_Improper_Resource_Shutdown__freopen_w32_close_54d.c" language="C" size="1351" checksum="b72174a0883525d96b883ca689fdacafe98e3c09"></file>
    <file path="000/101/035/CWE404_Improper_Resource_Shutdown__freopen_w32_close_54e.c" language="C" size="1187" checksum="ab1bda02f182129662d79b89947412acb248554c">
      <mixed line="26" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101036" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/036/CWE404_Improper_Resource_Shutdown__freopen_w32_close_61a.c" language="C" size="2520" checksum="5de72816d6a0b7047a05c4c7faef20af248b064f">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/036/CWE404_Improper_Resource_Shutdown__freopen_w32_close_61b.c" language="C" size="1271" checksum="8432386db4c7986182a58ad3c4a4db282070637e"></file>
  </testcase>
  <testcase id="101037" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/037/CWE404_Improper_Resource_Shutdown__freopen_w32_close_62a.cpp" language="C++" size="2295" checksum="d4d7db700580a646ce904960e5ba4c05e74d117a">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/037/CWE404_Improper_Resource_Shutdown__freopen_w32_close_62b.cpp" language="C++" size="1241" checksum="2213b15409d8d19971a871365bd635d8a6b0d2d8"></file>
  </testcase>
  <testcase id="101038" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/038/CWE404_Improper_Resource_Shutdown__freopen_w32_close_63a.c" language="C" size="2556" checksum="a1434236497abe886fee0245f5536c6407f6eb07"></file>
    <file path="000/101/038/CWE404_Improper_Resource_Shutdown__freopen_w32_close_63b.c" language="C" size="1258" checksum="84c9154cbdff4005c3653e8837ccce2a75412827">
      <mixed line="27" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101039" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/039/CWE404_Improper_Resource_Shutdown__freopen_w32_close_64a.c" language="C" size="2568" checksum="ce4ab0fd7b2aae1b34f7e8de8c73fa81c0d2844c"></file>
    <file path="000/101/039/CWE404_Improper_Resource_Shutdown__freopen_w32_close_64b.c" language="C" size="1579" checksum="54b0de0c36b575b2ddff3485bcc55116055130ca">
      <mixed line="30" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101040" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/040/CWE404_Improper_Resource_Shutdown__freopen_w32_close_65a.c" language="C" size="2748" checksum="1acf5d1f9864b7d8fca70e9dd67146268d09804d"></file>
    <file path="000/101/040/CWE404_Improper_Resource_Shutdown__freopen_w32_close_65b.c" language="C" size="1236" checksum="5ca596e37984146d13eff9e8017755d9301ea8e4">
      <mixed line="26" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101041" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/041/CWE404_Improper_Resource_Shutdown__freopen_w32_close_66a.c" language="C" size="2705" checksum="b6b997e32aa69a992c79196a1bffae1d65d34e03"></file>
    <file path="000/101/041/CWE404_Improper_Resource_Shutdown__freopen_w32_close_66b.c" language="C" size="1309" checksum="e1e43d2a5b9ad33daa25dcd310df201d221dcf80">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101042" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/042/CWE404_Improper_Resource_Shutdown__freopen_w32_close_67a.c" language="C" size="3101" checksum="8c05ca9b6544c66583169ed9d4e9089ded929243"></file>
    <file path="000/101/042/CWE404_Improper_Resource_Shutdown__freopen_w32_close_67b.c" language="C" size="1586" checksum="88d6bde2bbda108bb32b0933a65a765a9e8e1a9f">
      <mixed line="32" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101043" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/043/CWE404_Improper_Resource_Shutdown__freopen_w32_close_68a.c" language="C" size="2907" checksum="8004a6e9ee07bbb33dbbc2f599a8c686dd2b59c6"></file>
    <file path="000/101/043/CWE404_Improper_Resource_Shutdown__freopen_w32_close_68b.c" language="C" size="1500" checksum="934a815e057d912dd5a702835037b3bd68872f21">
      <mixed line="31" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101044" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/044/CWE404_Improper_Resource_Shutdown__freopen_w32_close_72a.cpp" language="C++" size="2805" checksum="cfa71359c225168da50386950db9fac93c7f34db"></file>
    <file path="000/101/044/CWE404_Improper_Resource_Shutdown__freopen_w32_close_72b.cpp" language="C++" size="1358" checksum="c762823580cb2aeeb78622597bfe178d144b6b4f">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101045" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/045/CWE404_Improper_Resource_Shutdown__freopen_w32_close_73a.cpp" language="C++" size="2659" checksum="0fad5f02fbc70c9161a833b3cb626e333518ebd8"></file>
    <file path="000/101/045/CWE404_Improper_Resource_Shutdown__freopen_w32_close_73b.cpp" language="C++" size="1348" checksum="c546eea669eb52f243a965ab5b7dbc63e8404725">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101046" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/046/CWE404_Improper_Resource_Shutdown__freopen_w32_close_74a.cpp" language="C++" size="2624" checksum="195a751c12f7f5897c7f42ef81f61a5e615885ef"></file>
    <file path="000/101/046/CWE404_Improper_Resource_Shutdown__freopen_w32_close_74b.cpp" language="C++" size="1341" checksum="1bfbeb823f67b10170770d71f7202fe33aa194d5">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101047" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/047/CWE404_Improper_Resource_Shutdown__freopen_w32_close_81.h" language="C" size="1318" checksum="5b94b3aa3c96b21a80fb35a3bf4398f6800a1417"></file>
    <file path="000/101/047/CWE404_Improper_Resource_Shutdown__freopen_w32_close_81_bad.cpp" language="C++" size="1042" checksum="e5b6ee40a833e0a6d931c27f4dcc13debf148602">
      <mixed line="29" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/047/CWE404_Improper_Resource_Shutdown__freopen_w32_close_81_goodB2G.cpp" language="C++" size="1020" checksum="fc2e1fa72c5785d910b6c5f364cbcc654c64dcb2"></file>
    <file path="000/101/047/CWE404_Improper_Resource_Shutdown__freopen_w32_close_81a.cpp" language="C++" size="2604" checksum="86c0cfa6fff312951eb0d02679f7a85e6394d340"></file>
  </testcase>
  <testcase id="101048" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/048/CWE404_Improper_Resource_Shutdown__freopen_w32_close_82.h" language="C" size="1298" checksum="9f9d562023e92cbbcf2cf5e60b12d479dd0fb5d2"></file>
    <file path="000/101/048/CWE404_Improper_Resource_Shutdown__freopen_w32_close_82_bad.cpp" language="C++" size="1034" checksum="4d88c5114c27b52ff4eb9fcdf37cc2e38a0c0f68">
      <mixed line="29" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/048/CWE404_Improper_Resource_Shutdown__freopen_w32_close_82_goodB2G.cpp" language="C++" size="1012" checksum="213e0676eb581529f0e93687e368e33f0717feab"></file>
    <file path="000/101/048/CWE404_Improper_Resource_Shutdown__freopen_w32_close_82a.cpp" language="C++" size="2644" checksum="67c48c73a28c8b2cc2765414fadf320f0db78056"></file>
  </testcase>
  <testcase id="101049" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/049/CWE404_Improper_Resource_Shutdown__freopen_w32_close_83.h" language="C" size="1328" checksum="ba96ac1408303ca2f315756b3706e72554e2967d"></file>
    <file path="000/101/049/CWE404_Improper_Resource_Shutdown__freopen_w32_close_83_bad.cpp" language="C++" size="1409" checksum="9387e3b424544f02852a1a46f54cf869a7147708">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/049/CWE404_Improper_Resource_Shutdown__freopen_w32_close_83_goodB2G.cpp" language="C++" size="1399" checksum="e6bd438f5e2c674d1b6784458e661603824e0565"></file>
    <file path="000/101/049/CWE404_Improper_Resource_Shutdown__freopen_w32_close_83a.cpp" language="C++" size="2134" checksum="6489f565f81ad5d5c56b1aa3e4cd965ea984d858"></file>
  </testcase>
  <testcase id="101050" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource: freopen Open a file using freopen()<br/> Sinks: w32_close<br/> GoodSink: Close the file using fclose()<br/> BadSink : Close the file using close()<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/050/CWE404_Improper_Resource_Shutdown__freopen_w32_close_84.h" language="C" size="1353" checksum="085f95018c3f91173740b4a5f4cde666282a2721"></file>
    <file path="000/101/050/CWE404_Improper_Resource_Shutdown__freopen_w32_close_84_bad.cpp" language="C++" size="1434" checksum="0efd2119f1fa82dc74a49bf56d4c863d52b052ca">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/050/CWE404_Improper_Resource_Shutdown__freopen_w32_close_84_goodB2G.cpp" language="C++" size="1424" checksum="26c55cf09d3c9e2950da6194ad6de0f8d9d11bab"></file>
    <file path="000/101/050/CWE404_Improper_Resource_Shutdown__freopen_w32_close_84a.cpp" language="C++" size="2349" checksum="803ddfa037f52c503e158eea65f88dedd4471ba9"></file>
  </testcase>
  <testcase id="101051" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/051/CWE404_Improper_Resource_Shutdown__open_fclose_01.c" language="C" size="2474" checksum="c9f27baffaa95ac26124fad93f9fb62b6eb9bc4c">
      <mixed line="40" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101052" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/052/CWE404_Improper_Resource_Shutdown__open_fclose_02.c" language="C" size="3246" checksum="30ec6ae74318dcb28ba98a3cc4f43e64547f9876">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101053" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/053/CWE404_Improper_Resource_Shutdown__open_fclose_03.c" language="C" size="3267" checksum="24430f72a66f10ab8efe6343d2abe995c40efa48">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101054" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/054/CWE404_Improper_Resource_Shutdown__open_fclose_04.c" language="C" size="3632" checksum="d248098ac3a77303dc7cfb763bc4183cea131f10">
      <mixed line="48" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101055" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/055/CWE404_Improper_Resource_Shutdown__open_fclose_05.c" language="C" size="3603" checksum="7bf46998304f595dc2f24982dcbd9a74b3b32d46">
      <mixed line="48" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101056" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/056/CWE404_Improper_Resource_Shutdown__open_fclose_06.c" language="C" size="3573" checksum="6248feb7e2228ea224c715000a1eed5f6b63faae">
      <mixed line="47" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101057" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/057/CWE404_Improper_Resource_Shutdown__open_fclose_07.c" language="C" size="3553" checksum="a1f6d95b088db6d5a138f0e60caf6b9d02ab6344">
      <mixed line="47" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101058" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/058/CWE404_Improper_Resource_Shutdown__open_fclose_08.c" language="C" size="3653" checksum="d82764aad123940a1e1f66652f34b3e874f4386f">
      <mixed line="55" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101059" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/059/CWE404_Improper_Resource_Shutdown__open_fclose_09.c" language="C" size="3361" checksum="007e1e439e9492d1d2155dc6427c712f85d7d970">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101060" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/060/CWE404_Improper_Resource_Shutdown__open_fclose_10.c" language="C" size="3312" checksum="1868e528cebdd933a3efce611724e45873dafb2d">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101061" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/061/CWE404_Improper_Resource_Shutdown__open_fclose_11.c" language="C" size="3375" checksum="407eb68665e9507dbca48b61a38defcab8280528">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101062" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/062/CWE404_Improper_Resource_Shutdown__open_fclose_12.c" language="C" size="3006" checksum="2d8b67a227fa8303b4143ccc8f93c280a240d1e3">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101063" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/063/CWE404_Improper_Resource_Shutdown__open_fclose_13.c" language="C" size="3379" checksum="dd4d2039cd154d92ec668328c1498833a73883ce">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101064" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/064/CWE404_Improper_Resource_Shutdown__open_fclose_14.c" language="C" size="3330" checksum="878515f16fe36d5a8d036c5137c4a8d5ce820ea1">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101065" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/065/CWE404_Improper_Resource_Shutdown__open_fclose_15.c" language="C" size="3669" checksum="4a6fc088d913940d41061ffa90562dd1e7b7d1c5">
      <mixed line="43" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101066" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/066/CWE404_Improper_Resource_Shutdown__open_fclose_16.c" language="C" size="2659" checksum="8230f2653fe461a4f95217db027f152925606b3f">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101067" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/067/CWE404_Improper_Resource_Shutdown__open_fclose_17.c" language="C" size="2640" checksum="05e776690fa924896dbf5f27285542aa08c9e403">
      <mixed line="43" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101068" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/068/CWE404_Improper_Resource_Shutdown__open_fclose_18.c" language="C" size="2579" checksum="36833abea1d3159c04dc2e0a23af29ff849e2145">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101069" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/069/CWE404_Improper_Resource_Shutdown__open_fclose_21.c" language="C" size="3984" checksum="0e867d004f60c5388edefe2f9dd39fc3ed3e708f">
      <mixed line="40" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101070" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/070/CWE404_Improper_Resource_Shutdown__open_fclose_22a.c" language="C" size="3865" checksum="92c08dcdf216d4548eb8eff3a21a9436ea898983"></file>
    <file path="000/101/070/CWE404_Improper_Resource_Shutdown__open_fclose_22b.c" language="C" size="2528" checksum="d86105c6fe6787085e33328a5f795c32fa48ce4f">
      <mixed line="40" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101071" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/071/CWE404_Improper_Resource_Shutdown__open_fclose_31.c" language="C" size="2707" checksum="463c91503886ef972467e6834ead014cf2d39485">
      <mixed line="43" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101072" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 32 Data flow: two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/072/CWE404_Improper_Resource_Shutdown__open_fclose_32.c" language="C" size="2934" checksum="5e2e63ec6852b7bbe9cf100f933e1abbcdfa490b">
      <mixed line="48" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101073" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/073/CWE404_Improper_Resource_Shutdown__open_fclose_33.cpp" language="C++" size="2720" checksum="f3281e44c416e10bf01ee7100ca5f570cd523ccd">
      <mixed line="46" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101074" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/074/CWE404_Improper_Resource_Shutdown__open_fclose_34.c" language="C" size="3055" checksum="eccfdc975c2e3ed6975d1049c97df7e9577d50c3">
      <mixed line="50" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101075" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/075/CWE404_Improper_Resource_Shutdown__open_fclose_41.c" language="C" size="2680" checksum="2c665fd398e291102fe9db5d5aa6101ac0412343">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101076" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/076/CWE404_Improper_Resource_Shutdown__open_fclose_42.c" language="C" size="2723" checksum="28cddb712f524e752767bc8db802567802cb5267">
      <mixed line="46" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101077" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/077/CWE404_Improper_Resource_Shutdown__open_fclose_43.cpp" language="C++" size="2710" checksum="02f33c6d8287d8116023b5b6740b82d02bc80af7">
      <mixed line="48" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101078" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/078/CWE404_Improper_Resource_Shutdown__open_fclose_44.c" language="C" size="2870" checksum="9f8327a5b5adb6355a3efd64ff4d401d0c2defab">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101079" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/079/CWE404_Improper_Resource_Shutdown__open_fclose_45.c" language="C" size="3117" checksum="f3949aa75ee5a4d929147e2acf860489d192dc53">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101080" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/080/CWE404_Improper_Resource_Shutdown__open_fclose_51a.c" language="C" size="2677" checksum="560903823c5b2e118715fc8674d512a35dca4428"></file>
    <file path="000/101/080/CWE404_Improper_Resource_Shutdown__open_fclose_51b.c" language="C" size="1243" checksum="b6210b2f272d58c8d646405c9df00700f9167a8a">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101081" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/081/CWE404_Improper_Resource_Shutdown__open_fclose_52a.c" language="C" size="2694" checksum="73974410ef3e97b8a3a6fb57ee0fdfcc2638ac70"></file>
    <file path="000/101/081/CWE404_Improper_Resource_Shutdown__open_fclose_52b.c" language="C" size="1397" checksum="874421a4402ede22879f1260c65d5d6e1404232a"></file>
    <file path="000/101/081/CWE404_Improper_Resource_Shutdown__open_fclose_52c.c" language="C" size="1260" checksum="42cec985e423d8175a510f8c44c126193604c521">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101082" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/082/CWE404_Improper_Resource_Shutdown__open_fclose_53a.c" language="C" size="2721" checksum="a66e39ec18f349d8796f7f875ead1c17f3aa3fb3"></file>
    <file path="000/101/082/CWE404_Improper_Resource_Shutdown__open_fclose_53b.c" language="C" size="1424" checksum="840b27b7b1ec6ff189afb91e20af82a956ea5ce3"></file>
    <file path="000/101/082/CWE404_Improper_Resource_Shutdown__open_fclose_53c.c" language="C" size="1424" checksum="6f027e271731c02449dbb62e0d1ea81bc97d1fdf"></file>
    <file path="000/101/082/CWE404_Improper_Resource_Shutdown__open_fclose_53d.c" language="C" size="1287" checksum="01875466f935a3b590026979b85a1d65ed90734c">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101083" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/083/CWE404_Improper_Resource_Shutdown__open_fclose_54a.c" language="C" size="2722" checksum="efc6172f0ed368127df8c866a107566c5d8de630"></file>
    <file path="000/101/083/CWE404_Improper_Resource_Shutdown__open_fclose_54b.c" language="C" size="1425" checksum="f6bcbac34d39d8395251cd47c616aa12e5b7d19e"></file>
    <file path="000/101/083/CWE404_Improper_Resource_Shutdown__open_fclose_54c.c" language="C" size="1425" checksum="848cab05fcbea41ba7d47d41b4c8a13cb4021b47"></file>
    <file path="000/101/083/CWE404_Improper_Resource_Shutdown__open_fclose_54d.c" language="C" size="1425" checksum="cfa06692a789791644f843330b45f5a62053e9c6"></file>
    <file path="000/101/083/CWE404_Improper_Resource_Shutdown__open_fclose_54e.c" language="C" size="1288" checksum="87db0ab55a0a448ab6849ec8600630f2cd368121">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101084" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/084/CWE404_Improper_Resource_Shutdown__open_fclose_61a.c" language="C" size="2569" checksum="1dc524bbab99b1460bade9ce75916833c470f8b3">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/084/CWE404_Improper_Resource_Shutdown__open_fclose_61b.c" language="C" size="1403" checksum="2d945ae8bf5b5514d35f72460c27d2574b0c3c34"></file>
  </testcase>
  <testcase id="101085" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/085/CWE404_Improper_Resource_Shutdown__open_fclose_62a.cpp" language="C++" size="2386" checksum="629cf842535b9675916bff3ef47e4f771f98d0ee">
      <mixed line="45" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/085/CWE404_Improper_Resource_Shutdown__open_fclose_62b.cpp" language="C++" size="1385" checksum="53936da48a13f8c17adcbe6ce1a1e73517d864f6"></file>
  </testcase>
  <testcase id="101086" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/086/CWE404_Improper_Resource_Shutdown__open_fclose_63a.c" language="C" size="2648" checksum="74394c7a053b31e8b8467cb5e2fcda7b15c42e0a"></file>
    <file path="000/101/086/CWE404_Improper_Resource_Shutdown__open_fclose_63b.c" language="C" size="1353" checksum="03db1bf04259792a63cd89553fad88ce5ee4ab34">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101087" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/087/CWE404_Improper_Resource_Shutdown__open_fclose_64a.c" language="C" size="2666" checksum="12b8cdb9b67bfb5d70873d1eb452a760ef5e99ec"></file>
    <file path="000/101/087/CWE404_Improper_Resource_Shutdown__open_fclose_64b.c" language="C" size="1668" checksum="830ad17dc0305e28ba0586fbc765ca8a45dce7a6">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101088" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/088/CWE404_Improper_Resource_Shutdown__open_fclose_65a.c" language="C" size="2834" checksum="77cd3739a1ca8a674dab3ee66e779fd823121911"></file>
    <file path="000/101/088/CWE404_Improper_Resource_Shutdown__open_fclose_65b.c" language="C" size="1337" checksum="a0d49f4850cc589bec024cde867e580d635b72eb">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101089" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/089/CWE404_Improper_Resource_Shutdown__open_fclose_66a.c" language="C" size="2791" checksum="4de3bb6c14ef5f7ed30c6ab3d7f19ef2ae62c612"></file>
    <file path="000/101/089/CWE404_Improper_Resource_Shutdown__open_fclose_66b.c" language="C" size="1404" checksum="09f058e9ef360344d59202829b2a6239d5e4a703">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101090" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/090/CWE404_Improper_Resource_Shutdown__open_fclose_67a.c" language="C" size="3160" checksum="adf9fe99f5c27577e7199065080355e021417f66"></file>
    <file path="000/101/090/CWE404_Improper_Resource_Shutdown__open_fclose_67b.c" language="C" size="1660" checksum="e9bc373f4149f0ed308761eb2988d1c8eff82768">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101091" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/091/CWE404_Improper_Resource_Shutdown__open_fclose_68a.c" language="C" size="2975" checksum="ffa83f69aa7bc78a9eca0c7764b1341cbcad6ead"></file>
    <file path="000/101/091/CWE404_Improper_Resource_Shutdown__open_fclose_68b.c" language="C" size="1571" checksum="d54383c89d360d7d1db665b8d3d9e98d238e3836">
      <mixed line="40" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101092" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/092/CWE404_Improper_Resource_Shutdown__open_fclose_72a.cpp" language="C++" size="2927" checksum="9e160fff1a7df11e5ac106b6c931781624cdb749"></file>
    <file path="000/101/092/CWE404_Improper_Resource_Shutdown__open_fclose_72b.cpp" language="C++" size="1459" checksum="9ab4c6691783b15915e0a32a61afa10f721a0ea7">
      <mixed line="43" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101093" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/093/CWE404_Improper_Resource_Shutdown__open_fclose_73a.cpp" language="C++" size="2781" checksum="1b534c4b53d2fa66486f9d0c13900b739716ef15"></file>
    <file path="000/101/093/CWE404_Improper_Resource_Shutdown__open_fclose_73b.cpp" language="C++" size="1449" checksum="ee2af80d7b18e782cf38465aff1b7bb6398e8b74">
      <mixed line="43" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101094" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/094/CWE404_Improper_Resource_Shutdown__open_fclose_74a.cpp" language="C++" size="2746" checksum="3837eafee8d27cb8285c687dffd4d2d17dfca8d2"></file>
    <file path="000/101/094/CWE404_Improper_Resource_Shutdown__open_fclose_74b.cpp" language="C++" size="1442" checksum="fa898507133bc7bd18fed4c2e58ce5231970ced5">
      <mixed line="43" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101095" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/095/CWE404_Improper_Resource_Shutdown__open_fclose_81.h" language="C" size="1395" checksum="797ea74d5de3da25ed480b1e5d8f7f4f003d7a96"></file>
    <file path="000/101/095/CWE404_Improper_Resource_Shutdown__open_fclose_81_bad.cpp" language="C++" size="1009" checksum="d87dede9f511b0508168a31d7845335b68516964">
      <mixed line="29" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/095/CWE404_Improper_Resource_Shutdown__open_fclose_81_goodB2G.cpp" language="C++" size="982" checksum="7d0d796761ed0c009facb8b01c738f6864aac3d7"></file>
    <file path="000/101/095/CWE404_Improper_Resource_Shutdown__open_fclose_81a.cpp" language="C++" size="2573" checksum="c7c8810088af87aa822c2b12aa7adf4fd998335a"></file>
  </testcase>
  <testcase id="101096" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/096/CWE404_Improper_Resource_Shutdown__open_fclose_82.h" language="C" size="1375" checksum="b0ad59044b6086a84374598f02e1e1f92ed9e4bd"></file>
    <file path="000/101/096/CWE404_Improper_Resource_Shutdown__open_fclose_82_bad.cpp" language="C++" size="1001" checksum="6af87733ee514ae76066a4725f7b1d39f5ac6227">
      <mixed line="29" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/096/CWE404_Improper_Resource_Shutdown__open_fclose_82_goodB2G.cpp" language="C++" size="974" checksum="dceb2d1dc9f0d230272faa45872e3eddb170f1a1"></file>
    <file path="000/101/096/CWE404_Improper_Resource_Shutdown__open_fclose_82a.cpp" language="C++" size="2613" checksum="61df9874858c0d554174e4cfe626fcfb338a9001"></file>
  </testcase>
  <testcase id="101097" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/097/CWE404_Improper_Resource_Shutdown__open_fclose_83.h" language="C" size="1396" checksum="8ded64aa1ed7e4f930e67b2f955e8df6e967a81c"></file>
    <file path="000/101/097/CWE404_Improper_Resource_Shutdown__open_fclose_83_bad.cpp" language="C++" size="1375" checksum="307eaabc4d1582a6b8f7634aaecd57eccdb22856">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/097/CWE404_Improper_Resource_Shutdown__open_fclose_83_goodB2G.cpp" language="C++" size="1360" checksum="f9e94c044cc6218120805b1f055cb5e5b2110dce"></file>
    <file path="000/101/097/CWE404_Improper_Resource_Shutdown__open_fclose_83a.cpp" language="C++" size="2081" checksum="149db72e2f2f14db4f779b344e7d7e20214d4b21"></file>
  </testcase>
  <testcase id="101098" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: fclose<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/098/CWE404_Improper_Resource_Shutdown__open_fclose_84.h" language="C" size="1421" checksum="ae27c3a81e84bd64702ca2181c35ad44c9baf529"></file>
    <file path="000/101/098/CWE404_Improper_Resource_Shutdown__open_fclose_84_bad.cpp" language="C++" size="1400" checksum="9862c85ff92674790badc81603147fdc41b7bfc7">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/098/CWE404_Improper_Resource_Shutdown__open_fclose_84_goodB2G.cpp" language="C++" size="1385" checksum="3fe24dd4664ba0c03fdd1140d759102f4ba706cd"></file>
    <file path="000/101/098/CWE404_Improper_Resource_Shutdown__open_fclose_84a.cpp" language="C++" size="2284" checksum="a274bb7d4060989f9bc741d3396284fc2f1988c5"></file>
  </testcase>
  <testcase id="101099" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/099/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_01.c" language="C" size="2559" checksum="ca5d6c17523a5a069af6a869e7e77ba1ea97e768">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101100" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/100/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_02.c" language="C" size="3331" checksum="56a28fd955c15bcc14a173abcc8c818261ccdc0f">
      <mixed line="44" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101101" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/101/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_03.c" language="C" size="3352" checksum="8c74547cc2c2069e116052c8eb43aa7ffc75b13d">
      <mixed line="44" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101102" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/102/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_04.c" language="C" size="3717" checksum="78134aea6cf45f69cc2ad91c965ccaf4a1c11861">
      <mixed line="50" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101103" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/103/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_05.c" language="C" size="3688" checksum="353646b6d4c125d0206b23f4cc29e874f82c3bc8">
      <mixed line="50" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101104" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/104/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_06.c" language="C" size="3658" checksum="52b874802976d508eb50e27d37d2a9784bb9f7c3">
      <mixed line="49" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101105" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/105/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_07.c" language="C" size="3638" checksum="01251069ec8f2ede2ec3b11dcf5672fa8253119f">
      <mixed line="49" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101106" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/106/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_08.c" language="C" size="3738" checksum="8fe0d572a4008dbb0b92097dee884c032b14f125">
      <mixed line="57" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101107" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/107/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_09.c" language="C" size="3446" checksum="2d530eab5c561609908cdd98da673b2f56797954">
      <mixed line="44" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101108" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/108/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_10.c" language="C" size="3397" checksum="0bfba346f1e579000c9807dbb75131c89d09ade3">
      <mixed line="44" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101109" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/109/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_11.c" language="C" size="3460" checksum="4c627da7088fdc3ea75156565086c7430a23f5cf">
      <mixed line="44" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101110" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/110/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_12.c" language="C" size="3091" checksum="4b800baed45d1c14de2c7bf145795a5f938b7bcb">
      <mixed line="44" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101111" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/111/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_13.c" language="C" size="3464" checksum="bd83ca1c60cf1948b501ae8935d989136111f843">
      <mixed line="44" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101112" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/112/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_14.c" language="C" size="3415" checksum="cf5c2ffe13550676a40728af1671e3151d4f59c4">
      <mixed line="44" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101113" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/113/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_15.c" language="C" size="3754" checksum="3fa80bf0644ec4e55388709a2a93f723b94435d8">
      <mixed line="45" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101114" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/114/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_16.c" language="C" size="2744" checksum="ae7a592cf0ae706bfd23602acc62a8fb46135997">
      <mixed line="44" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101115" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/115/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_17.c" language="C" size="2725" checksum="4e6085246cf3e06b1ea4237b44a58c8cfd1efe35">
      <mixed line="45" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101116" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/116/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_18.c" language="C" size="2664" checksum="9351cb587d18d8d134e06ed10c0714bb454f4b88">
      <mixed line="44" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101117" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/117/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_21.c" language="C" size="4069" checksum="091cc76082928086b5fdda1ac1809bfc0d649d01">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101118" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/118/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_22a.c" language="C" size="4012" checksum="04d59513d2cd11fb6d40056688551d8b007c5029"></file>
    <file path="000/101/118/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_22b.c" language="C" size="2653" checksum="837004cfca095a504705915206f6a9d2e35e0766">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101119" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/119/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_31.c" language="C" size="2792" checksum="b4c57d9a5f82a9767c3caba88367793cb5b33bd3">
      <mixed line="45" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101120" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 32 Data flow: two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/120/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_32.c" language="C" size="3019" checksum="16265515118c1154d1e39cb104a82a7bd07932cd">
      <mixed line="50" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101121" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/121/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_33.cpp" language="C++" size="2789" checksum="1ada5394894854068e1b076ec33c76af5b941a1d">
      <mixed line="48" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101122" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/122/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_34.c" language="C" size="3164" checksum="cb2c80e2d1ccb1be033778cbf931499dda4c5534">
      <mixed line="52" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101123" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/123/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_41.c" language="C" size="2765" checksum="007695d8b1ae3f3ff7264260eab0445e15c31bb5">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101124" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/124/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_42.c" language="C" size="2808" checksum="28608f18a0e7d9664965ed37e386c53d2ee0dcd0">
      <mixed line="48" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101125" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/125/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_43.cpp" language="C++" size="2779" checksum="12d67022ca88b05538f773ff62bd889b6e3472ee">
      <mixed line="50" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101126" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/126/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_44.c" language="C" size="2955" checksum="7f0b68c2ca13b0d7e8f0799fa4fea14fa901c6a0">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101127" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/127/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_45.c" language="C" size="3250" checksum="b3c97fe17e7e08564770cc33883f80b459b4abbd">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101128" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/128/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_51a.c" language="C" size="2784" checksum="7170be0a8760a94bfde560c447be5656f1f313c1"></file>
    <file path="000/101/128/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_51b.c" language="C" size="1312" checksum="ca2aaed410ced29f1bfccc17e95c987fe2d3588a">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101129" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/129/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_52a.c" language="C" size="2801" checksum="5b2318129054f19774a9608724b4603608a0951a"></file>
    <file path="000/101/129/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_52b.c" language="C" size="1488" checksum="17e5300935878cafafc173d83fca0f455d0a0095"></file>
    <file path="000/101/129/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_52c.c" language="C" size="1329" checksum="104c7d6563f4dd2e6a04cd354aca54bd1d1ccee4">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101130" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/130/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_53a.c" language="C" size="2828" checksum="d26f49da07f01df828782844d510ec0f5b99c65d"></file>
    <file path="000/101/130/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_53b.c" language="C" size="1515" checksum="8f009a9e11fee6d4c4234113871d62961b960a3b"></file>
    <file path="000/101/130/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_53c.c" language="C" size="1515" checksum="5e013e20f79cb1b10e8b7d22f7f462508cf5d0d1"></file>
    <file path="000/101/130/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_53d.c" language="C" size="1356" checksum="cdf108f758dc7177b78126e61e3248204a2e25c3">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101131" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/131/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_54a.c" language="C" size="2829" checksum="af95766dcec8951c1b93154311a2bb475002a4c9"></file>
    <file path="000/101/131/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_54b.c" language="C" size="1516" checksum="c09c04c7a29ac0620c830cba4c342c9f03130538"></file>
    <file path="000/101/131/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_54c.c" language="C" size="1516" checksum="cfb026ff2170336e6c28b39f591c7e62fb2788e1"></file>
    <file path="000/101/131/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_54d.c" language="C" size="1516" checksum="6c762cddaad407e0e8912391c3bbf4dcddfa737d"></file>
    <file path="000/101/131/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_54e.c" language="C" size="1357" checksum="b5b6f9c7fa64087f1a4b925bb090a14afb74ae8f">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101132" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/132/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_61a.c" language="C" size="2686" checksum="40130fc393f8195398c735968ffaba17ff17211e">
      <mixed line="44" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/132/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_61b.c" language="C" size="1462" checksum="90dfadc7d7e6e696b714aadd4a3d09b09b960fe4"></file>
  </testcase>
  <testcase id="101133" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/133/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_62a.cpp" language="C++" size="2455" checksum="e1a4118765b65150ad176c33b0af667d0de97464">
      <mixed line="47" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/133/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_62b.cpp" language="C++" size="1412" checksum="c381eeb257490e6fd99417e1d11374d73ada4dfd"></file>
  </testcase>
  <testcase id="101134" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/134/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_63a.c" language="C" size="2755" checksum="4a360e32cd30d8b8eb53a94613e38b0f66b8ff56"></file>
    <file path="000/101/134/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_63b.c" language="C" size="1422" checksum="9c13013a44476e5bd1c51320561afe5f8df26567">
      <mixed line="38" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101135" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/135/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_64a.c" language="C" size="2773" checksum="b50f473cfabc906d4eee702b5edd06ca0ac6ef4b"></file>
    <file path="000/101/135/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_64b.c" language="C" size="1737" checksum="73e84b0a31283dde17394a9865b42de48bffd794">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101136" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/136/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_65a.c" language="C" size="2941" checksum="b8ddaf2372ca363f2325381bb293b9d8fa281be6"></file>
    <file path="000/101/136/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_65b.c" language="C" size="1406" checksum="1e99aea048e9cb6e755b15ef437096d774be2854">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101137" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/137/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_66a.c" language="C" size="2898" checksum="a4c6f0e5546e830aa544a46238acbdaee75ba1a9"></file>
    <file path="000/101/137/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_66b.c" language="C" size="1473" checksum="649d5dcd32ac1b523fad3d1dcf50fb3a68177e35">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101138" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/138/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_67a.c" language="C" size="3315" checksum="2f3202acf27aed6c92b88244cdbd218b0a187550"></file>
    <file path="000/101/138/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_67b.c" language="C" size="1761" checksum="fb9ac5e31b2204eef2a2d12edbca031ac1180a70">
      <mixed line="43" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101139" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/139/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_68a.c" language="C" size="3114" checksum="4dd7e40d1b4e54118662bc07961f1d140f59b4de"></file>
    <file path="000/101/139/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_68b.c" language="C" size="1672" checksum="add3ccf76b249199bfeba0037414e17944ccfb97">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101140" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/140/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_72a.cpp" language="C++" size="2962" checksum="1a405ba129707c50571d2aed303e841b49377b57"></file>
    <file path="000/101/140/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_72b.cpp" language="C++" size="1520" checksum="e308aa7fb73ea23f62f5ca5b896a5b91e5b1135c">
      <mixed line="45" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101141" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/141/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_73a.cpp" language="C++" size="2816" checksum="f1db94560f0f7c137f3d1a5bdc6a61f66c7af2d2"></file>
    <file path="000/101/141/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_73b.cpp" language="C++" size="1510" checksum="8ec79fe09b431884dcb09f3b4aa1e2d90a3ee1ef">
      <mixed line="45" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101142" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/142/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_74a.cpp" language="C++" size="2781" checksum="0f7a18b1d32d3b3925835c7fa805f81df81f8141"></file>
    <file path="000/101/142/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_74b.cpp" language="C++" size="1503" checksum="3a677aec34b55c72efe505cbc2cbf4fd6a778033">
      <mixed line="45" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101143" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/143/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_81.h" language="C" size="1462" checksum="f6701bdeed84cd79f33b181d28103bb7cf149e5b"></file>
    <file path="000/101/143/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_81_bad.cpp" language="C++" size="1086" checksum="723f1f48d5de434b0ad939c3f48320df64480f0d">
      <mixed line="31" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/143/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_81_goodB2G.cpp" language="C++" size="1049" checksum="ee2ef6bfdc3b19db275874b00a83f0069217f0c1"></file>
    <file path="000/101/143/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_81a.cpp" language="C++" size="2672" checksum="837bc46ddc980f60833d9859be764a11474adb24"></file>
  </testcase>
  <testcase id="101144" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/144/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_82.h" language="C" size="1442" checksum="193abb883c7fc2e0fac8a74289a47753b7b12f68"></file>
    <file path="000/101/144/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_82_bad.cpp" language="C++" size="1078" checksum="b8f4ea6c8f5eff7a4d2eb9a89c730ab294a6557c">
      <mixed line="31" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/144/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_82_goodB2G.cpp" language="C++" size="1041" checksum="a5999f933da1db9f4393de4868a13362b1869222"></file>
    <file path="000/101/144/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_82a.cpp" language="C++" size="2712" checksum="1071f35d3643e2c9b19c2071d859b7c1a06912d1"></file>
  </testcase>
  <testcase id="101145" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/145/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_83.h" language="C" size="1471" checksum="22b020161fa571cbbdb547e85e843e6ddcbbe69a"></file>
    <file path="000/101/145/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_83_bad.cpp" language="C++" size="1476" checksum="8d993ecf9df811da2b2429e786620c31fbe07883">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/145/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_83_goodB2G.cpp" language="C++" size="1451" checksum="e2595dcc9870bfcf28c3591fb38c21ea3519934f"></file>
    <file path="000/101/145/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_83a.cpp" language="C++" size="2140" checksum="8bff887cbb28a149cba4243010a6e23b86ca5d0f"></file>
  </testcase>
  <testcase id="101146" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using open()<br/> Sinks: w32CloseHandle<br/> GoodSink: Close the file using close()<br/> BadSink : Close the file using CloseHandle<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/146/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_84.h" language="C" size="1496" checksum="1292f7d3227b0d9ea6293e148de86c448436f2b9"></file>
    <file path="000/101/146/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_84_bad.cpp" language="C++" size="1501" checksum="0f22d7af91b1d835b476d4a28b2f188b1145abc4">
      <mixed line="37" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/146/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_84_goodB2G.cpp" language="C++" size="1476" checksum="adf75719af1b76a5d7d7b1eefe2d0aca268ae0d1"></file>
    <file path="000/101/146/CWE404_Improper_Resource_Shutdown__open_w32CloseHandle_84a.cpp" language="C++" size="2359" checksum="55c17379469d0e3d702889d33666f44a754f9b0a"></file>
  </testcase>
  <testcase id="101147" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/147/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_01.c" language="C" size="2914" checksum="2d2e6f1de3753874c9b7e90488bd3a9b4ac8c55f">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101148" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/148/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_02.c" language="C" size="3937" checksum="bba6b967f7be918f0e9f6be17018616d40be6028">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101149" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/149/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_03.c" language="C" size="3958" checksum="dd9c6da9d72f9c9c3ff62bad5f0a9c32e61f3cc7">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101150" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/150/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_04.c" language="C" size="4323" checksum="e8a70097ea483e6ae44c02887f0a135f64d57df8">
      <mixed line="47" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101151" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/151/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_05.c" language="C" size="4294" checksum="be97447c92569668e347052a828be9a6ed41e06b">
      <mixed line="47" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101152" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/152/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_06.c" language="C" size="4264" checksum="6a905941383958de282b8feeed1b8aae278eb1f3">
      <mixed line="46" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101153" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/153/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_07.c" language="C" size="4244" checksum="1e193a799c0074c1d89e08dfff5b7d496aaff9a0">
      <mixed line="46" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101154" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/154/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_08.c" language="C" size="4344" checksum="2063f717f72be716296b16f3b6e50379fdfa97a1">
      <mixed line="54" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101155" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/155/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_09.c" language="C" size="4052" checksum="4ae880f29ca2a5e7d38d3651a10d323c11d53805">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101156" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/156/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_10.c" language="C" size="4003" checksum="1ae51affcc96fb39656891b32c4e72aea7deefd9">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101157" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/157/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_11.c" language="C" size="4066" checksum="1a49e5952f57935bac8a78a35e1839094c26dd23">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101158" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/158/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_12.c" language="C" size="3506" checksum="f9e2405ea746bfeced75abdd09b826bf775c112c">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101159" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/159/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_13.c" language="C" size="4070" checksum="821feeeb203431f9b51c0d2052227dc1baaee79e">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101160" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/160/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_14.c" language="C" size="4021" checksum="23284fce0d46c4d7947f008d7fb55f0fd12bb80b">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101161" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/161/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_15.c" language="C" size="4360" checksum="bf5cf56692f09ee216dd037f20354b45582dec89">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101162" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/162/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_16.c" language="C" size="3099" checksum="fcab3dffbba011105e158844007d273dccd5ae1f">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101163" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/163/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_17.c" language="C" size="3080" checksum="0d37e8e394117890352f46fe0c3afec61f3ad907">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101164" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/164/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_18.c" language="C" size="3019" checksum="61a24f012df244c48e5e05b4a24bef6ca9b244a9">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101165" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/165/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_21.c" language="C" size="4684" checksum="287be3edcf3c66552b3b87539008229b49cde388">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101166" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/166/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_22a.c" language="C" size="4581" checksum="3d6e31d178620f38c0451c5534ad5de39cdf8a3b"></file>
    <file path="000/101/166/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_22b.c" language="C" size="2605" checksum="641e763aac8053e2c4fb764d1c0a7b0647c35b4a">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101167" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/167/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_31.c" language="C" size="3159" checksum="76a83921842bd6a72c4e3175320ec553e004d74e">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101168" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 32 Data flow: two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/168/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_32.c" language="C" size="3446" checksum="8d0004f6bac3e5a057e3d2fa5733eda6a7351613">
      <mixed line="47" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101169" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/169/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_33.cpp" language="C++" size="3156" checksum="78646ec7d4e1808790cae30a209f9e2c5afbae4c">
      <mixed line="45" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101170" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/170/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_34.c" language="C" size="3531" checksum="027b0f062a2b63e2b4ba30d9c67bd39ace205bdb">
      <mixed line="49" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101171" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/171/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_41.c" language="C" size="3126" checksum="d279f17c7e0fde2a0c427235e877babdd069e281">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101172" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/172/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_42.c" language="C" size="3175" checksum="69fdfd2107572972ff034f6c0fdbfdb28531f5bd">
      <mixed line="45" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101173" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/173/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_43.cpp" language="C++" size="3140" checksum="aae525d671e5997240cf2ba4e762f75653642d82">
      <mixed line="47" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101174" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/174/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_44.c" language="C" size="3322" checksum="4c215a65808159962a7b8c331ba6bfe142a24e36">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101175" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/175/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_45.c" language="C" size="3617" checksum="a17313e4b7f7235327b9e3b7b56141d6459ed3ff">
      <mixed line="32" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101176" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/176/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_51a.c" language="C" size="3105" checksum="2f02fe120cd494818d09f1e95fa33c5bb18642dd"></file>
    <file path="000/101/176/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_51b.c" language="C" size="1231" checksum="28c3d8c3dfb9165a7b0b9236c68c5d29f2341c37">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101177" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/177/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_52a.c" language="C" size="3122" checksum="7c7d08181654e9d88f474c47ff761b00d6565a96"></file>
    <file path="000/101/177/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_52b.c" language="C" size="1373" checksum="2dcbb060fbd2bc794396b735aef403de3394ee1d"></file>
    <file path="000/101/177/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_52c.c" language="C" size="1248" checksum="ef07008a8ad089d7ba5a8fc25d4c0a67981e468b">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101178" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/178/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_53a.c" language="C" size="3149" checksum="3e660ccdd291d17d6e376aeaf63704997485cbb0"></file>
    <file path="000/101/178/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_53b.c" language="C" size="1400" checksum="6ac724bd407438226e13ad893dc451437553e251"></file>
    <file path="000/101/178/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_53c.c" language="C" size="1400" checksum="2d9e0275ca3215d9ea2b15e004fe49e8b117ad9e"></file>
    <file path="000/101/178/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_53d.c" language="C" size="1275" checksum="f1273416db6c9d1404e2ebc30c52603cbe6ab432">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101179" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/179/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_54a.c" language="C" size="3150" checksum="b249da5583fde112f2b699df351c327b2e35da55"></file>
    <file path="000/101/179/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_54b.c" language="C" size="1401" checksum="777cc32bec015f1d4ce6a44fd70d3a236e3da0a5"></file>
    <file path="000/101/179/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_54c.c" language="C" size="1401" checksum="27a7021ee170b8045a5b21d037ec3f75d3aa2a3f"></file>
    <file path="000/101/179/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_54d.c" language="C" size="1401" checksum="0f39f05f0f5ba69a6f45c8c468685af019b0953c"></file>
    <file path="000/101/179/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_54e.c" language="C" size="1276" checksum="45d0b808a4f9c40c8057f2c03beb5789cbab067e">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101180" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/180/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_61a.c" language="C" size="2653" checksum="362fbe984c6c12f1626b7ba36a994a024460ef01">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/180/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_61b.c" language="C" size="1747" checksum="19334d1477d46070e82a04ce4fb9a7a819337aa4"></file>
  </testcase>
  <testcase id="101181" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/181/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_62a.cpp" language="C++" size="2416" checksum="797b87a2e2d62944340c1f7fc551c271c7b4111c">
      <mixed line="38" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/181/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_62b.cpp" language="C++" size="1715" checksum="59f599d43a1ddc9ae01bb6d9b9d362cbcb700402"></file>
  </testcase>
  <testcase id="101182" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/182/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_63a.c" language="C" size="3076" checksum="dfb028e52497f7518b7045208214d3469ae0bfa7"></file>
    <file path="000/101/182/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_63b.c" language="C" size="1347" checksum="9c076b17923ee27058cd5c7759003fa719c306fb">
      <mixed line="29" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101183" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/183/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_64a.c" language="C" size="3088" checksum="b742dd526e0b5a1d4aac357006368caf3d7d801b"></file>
    <file path="000/101/183/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_64b.c" language="C" size="1668" checksum="20e8745a5697315acfb48387f347c92bd9945115">
      <mixed line="32" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101184" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/184/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_65a.c" language="C" size="3268" checksum="52e4911cbe2bd5db26b884e1c3d5dbaa03a00c58"></file>
    <file path="000/101/184/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_65b.c" language="C" size="1325" checksum="e5e4380c332f163584352ac9c54b0dbd08d4e89f">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101185" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/185/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_66a.c" language="C" size="3225" checksum="717c80e4c88eedbde058ae75bf26eb82078d8d48"></file>
    <file path="000/101/185/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_66b.c" language="C" size="1398" checksum="3b8e75078ace62ca6b97a6530136ab1a57b2da8c">
      <mixed line="30" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101186" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/186/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_67a.c" language="C" size="3633" checksum="bf85d8a9684fffeba75737be46d98426a61d2185"></file>
    <file path="000/101/186/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_67b.c" language="C" size="1683" checksum="2a681cf52b6f856f05cd9150dffe0ba05dfbd002">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101187" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/187/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_68a.c" language="C" size="3435" checksum="af02b99540af4fdd5187eab632e661ba8fe79e9c"></file>
    <file path="000/101/187/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_68b.c" language="C" size="1597" checksum="39847538c5f7a7fe05456e347990b5ff7dd91635">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101188" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/188/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_72a.cpp" language="C++" size="3313" checksum="a37dd73e92a62c6adb5f93760b316cee2c9d6903"></file>
    <file path="000/101/188/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_72b.cpp" language="C++" size="1445" checksum="0004f3a572d9423fab65335c8ed679aeb9675ea1">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101189" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/189/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_73a.cpp" language="C++" size="3167" checksum="47d2b76bc916d317b982a1bf81e226c1ab498d1c"></file>
    <file path="000/101/189/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_73b.cpp" language="C++" size="1435" checksum="7cdd2bc3c33112b7e88e10a0c700cdc020f836f6">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101190" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/190/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_74a.cpp" language="C++" size="3132" checksum="182ae1b29304bd4753ca6626be5e97d851ca552f"></file>
    <file path="000/101/190/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_74b.cpp" language="C++" size="1428" checksum="e4ba07316b1e629b1096ef34b683f5e053e34803">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101191" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/191/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_81.h" language="C" size="1368" checksum="efaac7e58dbf02d9ec17814fca388f4a28020dc5"></file>
    <file path="000/101/191/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_81_bad.cpp" language="C++" size="1083" checksum="96b88295125bbdf32b7bde3fef15f1961da50f99">
      <mixed line="29" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/191/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_81_goodB2G.cpp" language="C++" size="1066" checksum="463db87494b955b3ea425e34c3719f23b1b90057"></file>
    <file path="000/101/191/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_81a.cpp" language="C++" size="3098" checksum="62bd7b15fb427de743a95c01876db378e4e55b74"></file>
  </testcase>
  <testcase id="101192" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/192/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_82.h" language="C" size="1348" checksum="33318ecf6ca38f8ac8fbdac23df527541f5b8829"></file>
    <file path="000/101/192/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_82_bad.cpp" language="C++" size="1075" checksum="6dbc1d067094e4d179322aa954c66f73988df406">
      <mixed line="29" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/192/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_82_goodB2G.cpp" language="C++" size="1058" checksum="a4c1780fa06dda89226db33d93459866853f163f"></file>
    <file path="000/101/192/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_82a.cpp" language="C++" size="3138" checksum="3a259db9e93b1987e62790eeb697b3a7643f4ab4"></file>
  </testcase>
  <testcase id="101193" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/193/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_83.h" language="C" size="1380" checksum="189ab98c31953db97fd3327ceaee63900b40e975"></file>
    <file path="000/101/193/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_83_bad.cpp" language="C++" size="1673" checksum="5a3e063178627a6f09d05bb84a9d1e4c3019bd47">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/193/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_83_goodB2G.cpp" language="C++" size="1668" checksum="f31ae898e4e2eb3bec10b73ab21a20b7fe225954"></file>
    <file path="000/101/193/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_83a.cpp" language="C++" size="2190" checksum="49c9a906a8d1b8b5d491b2564d327c4cdbbd69be"></file>
  </testcase>
  <testcase id="101194" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: close<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using close()<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/194/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_84.h" language="C" size="1405" checksum="5a73d19b5b6021c41f37d054489541e8b943d641"></file>
    <file path="000/101/194/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_84_bad.cpp" language="C++" size="1698" checksum="ede15c6919d6b37db9e63e32415183551b92e0ab">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/194/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_84_goodB2G.cpp" language="C++" size="1693" checksum="3008d249d5d80a3f2b5152535eeb12eea5f9edf8"></file>
    <file path="000/101/194/CWE404_Improper_Resource_Shutdown__w32CreateFile_close_84a.cpp" language="C++" size="2409" checksum="01b2a4ae02567f66ff7aeb02355659e5fa572d91"></file>
  </testcase>
  <testcase id="101195" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/195/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_01.c" language="C" size="2925" checksum="d0622d21c1e60d650ccd63e59b0cd3e67bd8a9d2">
      <mixed line="39" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101196" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/196/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_02.c" language="C" size="3948" checksum="63b8cde4f755365c118874ad41a22aaf01efa169">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101197" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/197/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_03.c" language="C" size="3969" checksum="721b4ecf86a8933633e7bd733c66046e6d569d7a">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101198" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/198/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_04.c" language="C" size="4334" checksum="acad3be71fc556d6abb3a5c207fca712894f8fb5">
      <mixed line="47" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101199" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/199/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_05.c" language="C" size="4305" checksum="85944e3299792a51d6a1810695ff72a25ba31f40">
      <mixed line="47" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101200" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/200/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_06.c" language="C" size="4275" checksum="8d6e06c6150a21b1bba0f9362bd64daa9c647a3b">
      <mixed line="46" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101201" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/201/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_07.c" language="C" size="4255" checksum="a15f834a0742762a063cf8a27af79c25847411ed">
      <mixed line="46" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101202" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/202/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_08.c" language="C" size="4355" checksum="12aaba581588cedf0230c79ddc3350346d3b133a">
      <mixed line="54" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101203" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/203/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_09.c" language="C" size="4063" checksum="a9aa893d34663079451b725720c8b2a054fd09cc">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101204" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/204/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_10.c" language="C" size="4014" checksum="b4f9eccbb1c3cf8d0293d8eb1f154c13fcfca839">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101205" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/205/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_11.c" language="C" size="4077" checksum="d0674a9765abef077773d2f33fb9b22ae8507b3e">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101206" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/206/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_12.c" language="C" size="3517" checksum="7db1405af2a8d80dcb666ccb77d6e942976183dc">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101207" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/207/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_13.c" language="C" size="4081" checksum="bddeebb18360c64bbffda11b6549498701d251b5">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101208" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/208/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_14.c" language="C" size="4032" checksum="8790fa0dc082482b9e6cece308ea2f2ed1ea3e85">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101209" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/209/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_15.c" language="C" size="4371" checksum="223e98801ff47d11bdf26794f6e9fb47a8be600b">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101210" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/210/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_16.c" language="C" size="3110" checksum="a139d10e030887d1ca2cbe622c54cdc2bdcb5fbd">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101211" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/211/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_17.c" language="C" size="3091" checksum="c6c99fcf2e50909e3a3c306716a9e60be87583fb">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101212" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/212/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_18.c" language="C" size="3030" checksum="57b1c26db63cc37b2ac57dd7ffdc79cecde1eac4">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101213" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/213/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_21.c" language="C" size="4695" checksum="8f0c5926053f3845a8a17084ccb2aad6e1b8d7a2">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101214" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/214/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_22a.c" language="C" size="4600" checksum="5f740d6fde3686a611ef8d8b2175d88340a0eff9"></file>
    <file path="000/101/214/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_22b.c" language="C" size="2621" checksum="62746df8bb3eacdcef3582f15729503df1a0d77b">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101215" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/215/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_31.c" language="C" size="3170" checksum="7678d9aeb43ccd54ed1a81a7dd6683f8d594698b">
      <mixed line="42" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101216" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 32 Data flow: two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/216/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_32.c" language="C" size="3457" checksum="8c585585cde170de7b35dfccad9b943ecf9215d5">
      <mixed line="47" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101217" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/217/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_33.cpp" language="C++" size="3165" checksum="84e85be3d968a1a2112a903698d669c77a5b0eb7">
      <mixed line="45" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101218" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/218/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_34.c" language="C" size="3545" checksum="d006be93c213f907798c3100442d8b7becb65907">
      <mixed line="49" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101219" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/219/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_41.c" language="C" size="3137" checksum="69fda53c3a0e0c911bec012f9c0417ce0352bc15">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101220" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/220/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_42.c" language="C" size="3186" checksum="46236d735b629e2d4ec2be1b98ce697eb7364b4c">
      <mixed line="45" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101221" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/221/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_43.cpp" language="C++" size="3149" checksum="6ffe18bda4ab7b3497ec969a76137383257a8482">
      <mixed line="47" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101222" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/222/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_44.c" language="C" size="3333" checksum="fce0e4785bd739f07c5fb4525c88c70db49dd6e3">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101223" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/223/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_45.c" language="C" size="3634" checksum="8745e111575841e83be61a98c5d4d17fd7a6f34b">
      <mixed line="32" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101224" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/224/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_51a.c" language="C" size="3116" checksum="860ee110cf4b3cf087890eec0364cf56ec3b5f9b"></file>
    <file path="000/101/224/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_51b.c" language="C" size="1240" checksum="074a801165b5027db874dc6879a5d66b8fbd3eae">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101225" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/225/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_52a.c" language="C" size="3133" checksum="e12cd0b1f9dbc5a1bb609cf5cf9e096e1eee3957"></file>
    <file path="000/101/225/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_52b.c" language="C" size="1382" checksum="aa3dfd707e56d034eb4f2b149ba9d6987ab6b730"></file>
    <file path="000/101/225/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_52c.c" language="C" size="1257" checksum="d27e16e163e28580f0c1b58f14928f5b9b6df000">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101226" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/226/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_53a.c" language="C" size="3160" checksum="61b7dc1dc3091a29361dbb99be67b6d71a05500d"></file>
    <file path="000/101/226/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_53b.c" language="C" size="1409" checksum="478d872b80ce36e83d7e14dfe02c787bf215bc15"></file>
    <file path="000/101/226/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_53c.c" language="C" size="1409" checksum="1095c6901120e7dc48aeb0fa18c9d8d487415fa7"></file>
    <file path="000/101/226/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_53d.c" language="C" size="1284" checksum="633546c5cf921353774c30789bdd6318ce16f410">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101227" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/227/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_54a.c" language="C" size="3161" checksum="d87373ab85a362cd2cd9f69fb97c0146b6679a9f"></file>
    <file path="000/101/227/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_54b.c" language="C" size="1410" checksum="8c17ed00021153525b9fb46bcc2ca3647b01eb09"></file>
    <file path="000/101/227/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_54c.c" language="C" size="1410" checksum="20d7916bd48d1c910f63253bd5cb65a2eed8a978"></file>
    <file path="000/101/227/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_54d.c" language="C" size="1410" checksum="f3ec9207d4c8df1074777d0d52d00d018a6f0782"></file>
    <file path="000/101/227/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_54e.c" language="C" size="1285" checksum="0cbe50d346a90f463e59b58312f300360bb94e07">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101228" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/228/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_61a.c" language="C" size="2668" checksum="e8afdb70677c79934ab2224abefa88bb6b260469">
      <mixed line="35" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/228/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_61b.c" language="C" size="1752" checksum="f6ee6b54e8c34d13ded5245d78d53ba301130bc5"></file>
  </testcase>
  <testcase id="101229" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/229/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_62a.cpp" language="C++" size="2425" checksum="d1bc64f29d796e89c7ce90fcaa727bb753129d6e">
      <mixed line="38" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/229/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_62b.cpp" language="C++" size="1719" checksum="ca6bb64c9efc8989a2e9726fadcbe54390ac39be"></file>
  </testcase>
  <testcase id="101230" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/230/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_63a.c" language="C" size="3087" checksum="f417d55c69ec499252cbf704ba22c2698c041fb7"></file>
    <file path="000/101/230/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_63b.c" language="C" size="1356" checksum="9432acd353c2c70e7f064e790c67bd11b733f346">
      <mixed line="29" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101231" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/231/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_64a.c" language="C" size="3099" checksum="9cff7e3be20926b1b446ab493d7fc701cf762980"></file>
    <file path="000/101/231/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_64b.c" language="C" size="1677" checksum="2dc21feb990f83f9446e0c6c8a490dc94bd7a48a">
      <mixed line="32" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101232" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/232/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_65a.c" language="C" size="3279" checksum="2f30a057ef691880eed62baf0fff19ab3cff867c"></file>
    <file path="000/101/232/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_65b.c" language="C" size="1334" checksum="10c05c82038c872e92be522f46e4a20de2e50c6f">
      <mixed line="28" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101233" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/233/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_66a.c" language="C" size="3236" checksum="fae4bac76dd7e98f687a939d224993e159d51e5a"></file>
    <file path="000/101/233/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_66b.c" language="C" size="1407" checksum="0a09f917968751502f7ee6495d7752ffacba22a7">
      <mixed line="30" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101234" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/234/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_67a.c" language="C" size="3650" checksum="082e948741fa69d8a51bf642634718c86067a766"></file>
    <file path="000/101/234/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_67b.c" language="C" size="1696" checksum="6e4ba3bc007fd61f38327e6fae721e3044b7c7b3">
      <mixed line="34" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101235" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/235/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_68a.c" language="C" size="3450" checksum="048aa59808b32c9038eeacd270ca78f1b5b6c95d"></file>
    <file path="000/101/235/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_68b.c" language="C" size="1610" checksum="ec89ce442093bc1ab1da7eeaa4c256115625b41d">
      <mixed line="33" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101236" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/236/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_72a.cpp" language="C++" size="3318" checksum="89f9d5796e115eaa8bc52d5ae0699ffa63de2ea2"></file>
    <file path="000/101/236/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_72b.cpp" language="C++" size="1453" checksum="918bed8fa710894c3ec167ae89838f8d5de263a2">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101237" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/237/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_73a.cpp" language="C++" size="3172" checksum="4f76c3a01cc0239a3e4939ef4edd1038ebbbf11d"></file>
    <file path="000/101/237/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_73b.cpp" language="C++" size="1443" checksum="437f0afe44a8ae85fbd59ff1716f012ca10c6862">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101238" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/238/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_74a.cpp" language="C++" size="3137" checksum="92d0d6a53e9c59e0d4d0794e5c65fb45fca7afdf"></file>
    <file path="000/101/238/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_74b.cpp" language="C++" size="1436" checksum="88a5113695ae765b128dc9cc75bb2594a6098e62">
      <mixed line="36" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
  </testcase>
  <testcase id="101239" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/239/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_81.h" language="C" size="1377" checksum="35e00cef43e520d87007a968305a79759301c06b"></file>
    <file path="000/101/239/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_81_bad.cpp" language="C++" size="1093" checksum="7cfabe0c9477b1647a16e8c3ab408eb3010661f8">
      <mixed line="29" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/239/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_81_goodB2G.cpp" language="C++" size="1072" checksum="d47ebc66dc79e4ec6702565b4977b1f7a1189494"></file>
    <file path="000/101/239/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_81a.cpp" language="C++" size="3108" checksum="8a88bc78aeea54f9e16add098d3e48b35e105c17"></file>
  </testcase>
  <testcase id="101240" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/240/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_82.h" language="C" size="1357" checksum="581adac2cc42aad8254f863454ad22992fc21e0b"></file>
    <file path="000/101/240/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_82_bad.cpp" language="C++" size="1085" checksum="759cc1df320844004fffb3cd6a8c3e15ae8b0940">
      <mixed line="29" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/240/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_82_goodB2G.cpp" language="C++" size="1064" checksum="6373e67b7c58675467bad587c15dd38f49eb0a44"></file>
    <file path="000/101/240/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_82a.cpp" language="C++" size="3148" checksum="6a337871caed6d5e05eac24e2a57853c5c24d29d"></file>
  </testcase>
  <testcase id="101241" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/241/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_83.h" language="C" size="1390" checksum="f7c1ed9e42cf550f9d453dcb9a42332b84624071"></file>
    <file path="000/101/241/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_83_bad.cpp" language="C++" size="1686" checksum="f5078af078df9b58d7ef0b19960d05d16d940342">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/241/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_83_goodB2G.cpp" language="C++" size="1677" checksum="c50af4bc7c8db53425bb2504e03c541a1ea31f5b"></file>
    <file path="000/101/241/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_83a.cpp" language="C++" size="2198" checksum="f43ecc5e3a16041ec342039441670825e43ad7d9"></file>
  </testcase>
  <testcase id="101242" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 404 Improper Resource Shutdown or Release<br/> BadSource:  Open a file using CreateFile()<br/> Sinks: fclose<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Close the file using fclose()<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/101/242/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_84.h" language="C" size="1415" checksum="7297d54e9d50ae468929fc41e5bc685bdef39c3d"></file>
    <file path="000/101/242/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_84_bad.cpp" language="C++" size="1711" checksum="5f1b70d856af997bfe3b1139324a8de1a03e26dd">
      <mixed line="41" name="CWE-404: Improper Resource Shutdown or Release"></mixed>
    </file>
    <file path="000/101/242/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_84_goodB2G.cpp" language="C++" size="1702" checksum="fb2d6b9ef2d1484de511698dcb2631b3c24df201"></file>
    <file path="000/101/242/CWE404_Improper_Resource_Shutdown__w32CreateFile_fclose_84a.cpp" language="C++" size="2419" checksum="a083d5900262e0cc09cb710ba03bc1e25108400a"></file>
  </testcase>
  <testcase id="102205" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/205/CWE416_Use_After_Free__malloc_free_char_01.c" language="C" size="3096" checksum="f5fb55b714d002a859c1efb5191cfd6198a9c78c">
      <mixed line="35" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102206" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/206/CWE416_Use_After_Free__malloc_free_char_02.c" language="C" size="5017" checksum="666ad934bfa0192cc6dbd9371572af02d7148d69">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102207" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/207/CWE416_Use_After_Free__malloc_free_char_03.c" language="C" size="5065" checksum="b07474e96c2f2c9fea09be6c44491cbfca2e83e3">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102208" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/208/CWE416_Use_After_Free__malloc_free_char_04.c" language="C" size="5549" checksum="a73b577ab229a08ed6deabf9bff47ce0e9eeac0b">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102209" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/209/CWE416_Use_After_Free__malloc_free_char_05.c" language="C" size="5457" checksum="0a4cbdc51d66c924c3c429d006f1e0d8f8ea7ab6">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102210" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/210/CWE416_Use_After_Free__malloc_free_char_06.c" language="C" size="5515" checksum="6b59a9cddbfa847a1ee82bd1cee7a352b49109af">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102211" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/211/CWE416_Use_After_Free__malloc_free_char_07.c" language="C" size="5432" checksum="65aaa2b165a44e1a2a22b073f3abceb0b825f40a">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102212" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/212/CWE416_Use_After_Free__malloc_free_char_08.c" language="C" size="5588" checksum="947d34e571580ae15871a41555bef38daf646b8b">
      <mixed line="53" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102213" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/213/CWE416_Use_After_Free__malloc_free_char_09.c" language="C" size="5278" checksum="24c758b358747437816db6eb41d76dfd8ff571b4">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102214" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/214/CWE416_Use_After_Free__malloc_free_char_10.c" language="C" size="5166" checksum="330dfd689e7427475e5d5fd35f979c5ce4e5be37">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102215" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/215/CWE416_Use_After_Free__malloc_free_char_11.c" language="C" size="5310" checksum="a92148263bd09370cd9ed5938a60c42ab7941998">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102216" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/216/CWE416_Use_After_Free__malloc_free_char_12.c" language="C" size="5150" checksum="c64bb3f4425f98c92a1c794363050ffc7db35cd2">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102217" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/217/CWE416_Use_After_Free__malloc_free_char_13.c" language="C" size="5321" checksum="d4c827f4bef597662222d51b795a6b1d9dba0a2c">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102218" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/218/CWE416_Use_After_Free__malloc_free_char_14.c" language="C" size="5209" checksum="f8e829ef048109645f30cbafd7581a03102ff7e6">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102219" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/219/CWE416_Use_After_Free__malloc_free_char_15.c" language="C" size="6601" checksum="262cd0ef8de706678027d2a54927b57a3e9aff5c">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102220" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/220/CWE416_Use_After_Free__malloc_free_char_16.c" language="C" size="3563" checksum="a81153ed858a7b3432b19fb70704ea525ab6d5ef">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102221" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/221/CWE416_Use_After_Free__malloc_free_char_17.c" language="C" size="3533" checksum="8d6d2a920d6732b355e820b1425e66db0f2b8f96">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102222" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/222/CWE416_Use_After_Free__malloc_free_char_18.c" language="C" size="3360" checksum="5decace930c127574bab061dd36658444ede29cb">
      <mixed line="39" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102223" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/223/CWE416_Use_After_Free__malloc_free_char_43.cpp" language="C++" size="3431" checksum="e8a321296e9acf0c2c10f1ee6cd161056e5986a0">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102224" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/224/CWE416_Use_After_Free__malloc_free_char_62a.cpp" language="C++" size="2866" checksum="63224c36c2121bc4dda398219b40c5f18ac05597">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/224/CWE416_Use_After_Free__malloc_free_char_62b.cpp" language="C++" size="1650" checksum="a23a073ecdc561cdb5ba5e07d2ef77cc54011ef5"></file>
  </testcase>
  <testcase id="102225" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/225/CWE416_Use_After_Free__malloc_free_char_63a.c" language="C" size="3089" checksum="2dfc83794c1373d352fe3f32826382d560656beb"></file>
    <file path="000/102/225/CWE416_Use_After_Free__malloc_free_char_63b.c" language="C" size="1773" checksum="60a2c4a875e93af0a713b3e5afb7bd1633919597">
      <mixed line="28" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102226" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/226/CWE416_Use_After_Free__malloc_free_char_64a.c" language="C" size="3106" checksum="9ba12d4caa5dba0b60e7b4dfac3d9d4fae596f3d"></file>
    <file path="000/102/226/CWE416_Use_After_Free__malloc_free_char_64b.c" language="C" size="2252" checksum="246117fa8f0293f1c438077db9ca8333c98a24c2">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102227" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/227/CWE416_Use_After_Free__malloc_free_int64_t_01.c" language="C" size="3343" checksum="73a54da3edb1c711d3a87aced047c30e83058a58">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102228" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/228/CWE416_Use_After_Free__malloc_free_int64_t_02.c" language="C" size="5515" checksum="0b5f7a9bcfaabbcd06afd5defbf18824c53f7868">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102229" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/229/CWE416_Use_After_Free__malloc_free_int64_t_03.c" language="C" size="5563" checksum="0ec72f3364c556f0fd0f320c4106575f4644210a">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102230" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/230/CWE416_Use_After_Free__malloc_free_int64_t_04.c" language="C" size="6047" checksum="6d3f329c490552e9327b6510f8599084a4e1cd3f">
      <mixed line="51" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102231" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/231/CWE416_Use_After_Free__malloc_free_int64_t_05.c" language="C" size="5955" checksum="05ea901ce8eafadfbf72589fc1033d7ac85b4cb5">
      <mixed line="51" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102232" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/232/CWE416_Use_After_Free__malloc_free_int64_t_06.c" language="C" size="6013" checksum="799efbda26ea896f51ed0d0cb8fe30727098965a">
      <mixed line="50" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102233" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/233/CWE416_Use_After_Free__malloc_free_int64_t_07.c" language="C" size="5930" checksum="9f9fbcb0e731e3525a00f0d6591efddbee481334">
      <mixed line="50" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102234" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/234/CWE416_Use_After_Free__malloc_free_int64_t_08.c" language="C" size="6086" checksum="6c017978ae785f2f71f11c32ce727321d51bfa52">
      <mixed line="58" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102235" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/235/CWE416_Use_After_Free__malloc_free_int64_t_09.c" language="C" size="5776" checksum="f4d32e85a401ad58cd94495335b2353b7dfe330c">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102236" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/236/CWE416_Use_After_Free__malloc_free_int64_t_10.c" language="C" size="5664" checksum="e9fbe06fb3301adb913b4372887c63ac51d3e06e">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102237" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/237/CWE416_Use_After_Free__malloc_free_int64_t_11.c" language="C" size="5808" checksum="7086b3ddebd4428cf1533b90bf7faddb62487ae8">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102238" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/238/CWE416_Use_After_Free__malloc_free_int64_t_12.c" language="C" size="5729" checksum="f7c5193cd6e11c8b60fad5cc5062107ece4b8a15">
      <mixed line="57" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102239" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/239/CWE416_Use_After_Free__malloc_free_int64_t_13.c" language="C" size="5819" checksum="1192332d5b2a03416474cfd7108f7cf2bb1546e9">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102240" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/240/CWE416_Use_After_Free__malloc_free_int64_t_14.c" language="C" size="5707" checksum="4022d1d80dfabb4b873b9d2f820bbba46fe34caa">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102241" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/241/CWE416_Use_After_Free__malloc_free_int64_t_15.c" language="C" size="7099" checksum="287546d434b6401804a244c2ebaa47a93a2cc282">
      <mixed line="52" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102242" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/242/CWE416_Use_After_Free__malloc_free_int64_t_16.c" language="C" size="3870" checksum="7786d3bc75f83816b6f77e60bb7c505f89f41475">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102243" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/243/CWE416_Use_After_Free__malloc_free_int64_t_17.c" language="C" size="3840" checksum="df13163d9d2c208431df8fa98bb595daee7857c1">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102244" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/244/CWE416_Use_After_Free__malloc_free_int64_t_18.c" language="C" size="3607" checksum="9ae5e9e651e554c89c40c563b8478d821ccbcc32">
      <mixed line="44" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102245" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/245/CWE416_Use_After_Free__malloc_free_int64_t_43.cpp" language="C++" size="3681" checksum="45fceab40cff427a502a959b2e56be8e4fc40262">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102246" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/246/CWE416_Use_After_Free__malloc_free_int64_t_62a.cpp" language="C++" size="2915" checksum="77b94763f8fabd2757205995a863a2b2c216325f">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/246/CWE416_Use_After_Free__malloc_free_int64_t_62b.cpp" language="C++" size="1866" checksum="894cd05daa2617624cdca915ee2b5c22acb60fa5"></file>
  </testcase>
  <testcase id="102247" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/247/CWE416_Use_After_Free__malloc_free_int64_t_63a.c" language="C" size="3341" checksum="47869f86e3fd439834c91e3aa20b44f315f431e8"></file>
    <file path="000/102/247/CWE416_Use_After_Free__malloc_free_int64_t_63b.c" language="C" size="1825" checksum="35f91ef035e680b1502ff4fc5b868f49c5342832">
      <mixed line="28" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102248" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/248/CWE416_Use_After_Free__malloc_free_int64_t_64a.c" language="C" size="3349" checksum="c0c2dbdbd13fc870e025fc3c8258ad9fcfa58d48"></file>
    <file path="000/102/248/CWE416_Use_After_Free__malloc_free_int64_t_64b.c" language="C" size="2313" checksum="fda5ef37270f28ab94e53915078cfdf135d7c9e8">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102249" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/249/CWE416_Use_After_Free__malloc_free_int_01.c" language="C" size="3271" checksum="f28f09dccf18a549a8529a672896448c5a171a90">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102250" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/250/CWE416_Use_After_Free__malloc_free_int_02.c" language="C" size="5410" checksum="8c2064c34e7ac758d03c1e90ef7b72d7301d1a03">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102251" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/251/CWE416_Use_After_Free__malloc_free_int_03.c" language="C" size="5458" checksum="d7687e1502b7da0b86dc63b47dbf52114bbefff4">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102252" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/252/CWE416_Use_After_Free__malloc_free_int_04.c" language="C" size="5942" checksum="b5f28a85c7b9f22a7456b2a3c93ac576042e48d5">
      <mixed line="51" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102253" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/253/CWE416_Use_After_Free__malloc_free_int_05.c" language="C" size="5850" checksum="5f5ef82a5da197b108f81de1c22ad6efa10be7da">
      <mixed line="51" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102254" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/254/CWE416_Use_After_Free__malloc_free_int_06.c" language="C" size="5908" checksum="ec75c6a46d6929839b8f99a0a983527860334565">
      <mixed line="50" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102255" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/255/CWE416_Use_After_Free__malloc_free_int_07.c" language="C" size="5825" checksum="e5be1eaa6583dcfb4e4a350830ad89a2db5dbec7">
      <mixed line="50" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102256" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/256/CWE416_Use_After_Free__malloc_free_int_08.c" language="C" size="5981" checksum="3fe348bc6382488374600698ffba0543938c7234">
      <mixed line="58" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102257" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/257/CWE416_Use_After_Free__malloc_free_int_09.c" language="C" size="5671" checksum="70a5062a7a52696e0cd673c36e6162569f080bbc">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102258" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/258/CWE416_Use_After_Free__malloc_free_int_10.c" language="C" size="5559" checksum="4cb1d4692e27e9f2d2aa8f6e143877c74d015e29">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102259" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/259/CWE416_Use_After_Free__malloc_free_int_11.c" language="C" size="5703" checksum="308a2d0bb3ab1cfd70cc80972582ca439987ccc8">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102260" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/260/CWE416_Use_After_Free__malloc_free_int_12.c" language="C" size="5622" checksum="77951f33cc203d7f92606f7928aab3b6075078c9">
      <mixed line="57" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102261" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/261/CWE416_Use_After_Free__malloc_free_int_13.c" language="C" size="5714" checksum="615191c509325e318915bf503748f5160697acdf">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102262" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/262/CWE416_Use_After_Free__malloc_free_int_14.c" language="C" size="5602" checksum="e6a21563c45a679c9d5d7dce7338159608e68e63">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102263" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/263/CWE416_Use_After_Free__malloc_free_int_15.c" language="C" size="6994" checksum="cde668912fcfb40c3a965ebf7059f5673c2386c7">
      <mixed line="52" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102264" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/264/CWE416_Use_After_Free__malloc_free_int_16.c" language="C" size="3798" checksum="0183c679fc286ad6f186eb703a022eaac9c9c72e">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102265" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/265/CWE416_Use_After_Free__malloc_free_int_17.c" language="C" size="3768" checksum="9f35c57d00f1e7ebc643a9800394fdcfd061e02a">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102266" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/266/CWE416_Use_After_Free__malloc_free_int_18.c" language="C" size="3535" checksum="d04cd4fffab92057f92709155fe075c1b7544484">
      <mixed line="44" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102267" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/267/CWE416_Use_After_Free__malloc_free_int_43.cpp" language="C++" size="3605" checksum="c542ceefd2c716a3406a6a74fe9a54439985a651">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102268" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/268/CWE416_Use_After_Free__malloc_free_int_62a.cpp" language="C++" size="2869" checksum="15057b12a51b41f39d2498fa95ed490170836023">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/268/CWE416_Use_After_Free__malloc_free_int_62b.cpp" language="C++" size="1816" checksum="178551307f3864b74b01a83dd330cb9f1a8708a0"></file>
  </testcase>
  <testcase id="102269" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/269/CWE416_Use_After_Free__malloc_free_int_63a.c" language="C" size="3243" checksum="28bca0ae195c294454d15ea0e35e660afe8cfe6f"></file>
    <file path="000/102/269/CWE416_Use_After_Free__malloc_free_int_63b.c" language="C" size="1775" checksum="3820714a07f3b35538045d513dbc3b67b13b3718">
      <mixed line="28" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102270" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/270/CWE416_Use_After_Free__malloc_free_int_64a.c" language="C" size="3263" checksum="5f5157bfa2a8f3b69314fa101b4155813e38c913"></file>
    <file path="000/102/270/CWE416_Use_After_Free__malloc_free_int_64b.c" language="C" size="2251" checksum="4b5093042c51a035db5bfb3ec7f4188ebbe18fae">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102271" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/271/CWE416_Use_After_Free__malloc_free_long_01.c" language="C" size="3290" checksum="19f24e2060e26ed4930d886b3372a84ede93b900">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102272" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/272/CWE416_Use_After_Free__malloc_free_long_02.c" language="C" size="5438" checksum="33b115a6aacddc01841ea3cc053d4fa648e4448c">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102273" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/273/CWE416_Use_After_Free__malloc_free_long_03.c" language="C" size="5486" checksum="b9bb36b0e4b0e930cd59763ac69583d93944f5d4">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102274" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/274/CWE416_Use_After_Free__malloc_free_long_04.c" language="C" size="5970" checksum="6bbffe8410cf3e52777449382dd2c4b65547e7f1">
      <mixed line="51" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102275" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/275/CWE416_Use_After_Free__malloc_free_long_05.c" language="C" size="5878" checksum="8b7c10bbab8877b97437cd3d18b4b70b8aeeeb4f">
      <mixed line="51" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102276" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/276/CWE416_Use_After_Free__malloc_free_long_06.c" language="C" size="5936" checksum="21e3b02870565824ba5d45964623fb31141324f4">
      <mixed line="50" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102277" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/277/CWE416_Use_After_Free__malloc_free_long_07.c" language="C" size="5853" checksum="f59263f02057db1fd4919340a5f4b1cedc0d9cc9">
      <mixed line="50" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102278" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/278/CWE416_Use_After_Free__malloc_free_long_08.c" language="C" size="6009" checksum="96f4f61678ca80e0bc9591a552334fccc5ca66fe">
      <mixed line="58" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102279" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/279/CWE416_Use_After_Free__malloc_free_long_09.c" language="C" size="5699" checksum="a17ff045f0aea13ae3a7c33351b0c2fb64158214">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102280" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/280/CWE416_Use_After_Free__malloc_free_long_10.c" language="C" size="5587" checksum="a0366e711fe343e3261ff130c44eae2e815c3fa8">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102281" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/281/CWE416_Use_After_Free__malloc_free_long_11.c" language="C" size="5731" checksum="36b59c2561cf9a731e9fe080401e65c376672b4a">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102282" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/282/CWE416_Use_After_Free__malloc_free_long_12.c" language="C" size="5651" checksum="0a2e347094294fb8083d60d8d90424bef15b0e79">
      <mixed line="57" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102283" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/283/CWE416_Use_After_Free__malloc_free_long_13.c" language="C" size="5742" checksum="12eccdb48af789f1f4b7e6962746b9828c033974">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102284" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/284/CWE416_Use_After_Free__malloc_free_long_14.c" language="C" size="5630" checksum="d7cfeb163daf87f011804397c8c4f11813144dbc">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102285" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/285/CWE416_Use_After_Free__malloc_free_long_15.c" language="C" size="7022" checksum="a5b0d728cec20ddcee750d7446112668d0ea508f">
      <mixed line="52" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102286" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/286/CWE416_Use_After_Free__malloc_free_long_16.c" language="C" size="3817" checksum="71eb9ec7be8eaa6fa46be836b5cd514723691b99">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102287" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/287/CWE416_Use_After_Free__malloc_free_long_17.c" language="C" size="3787" checksum="bce29049985aa60ddd3d693e2c91a005ed6884eb">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102288" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/288/CWE416_Use_After_Free__malloc_free_long_18.c" language="C" size="3554" checksum="0b6141dbe155da0c00acfd2b22f6cfae8b2b8636">
      <mixed line="44" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102289" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/289/CWE416_Use_After_Free__malloc_free_long_43.cpp" language="C++" size="3625" checksum="eea927785b6205eb28f313e1d6d7b5a458c3862d">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102290" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/290/CWE416_Use_After_Free__malloc_free_long_62a.cpp" language="C++" size="2880" checksum="31d778a2c8751614c7b586f8111cb08ae4acbed3">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/290/CWE416_Use_After_Free__malloc_free_long_62b.cpp" language="C++" size="1830" checksum="302cf625ed89a10f9edce734c632bef85d7d0a59"></file>
  </testcase>
  <testcase id="102291" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/291/CWE416_Use_After_Free__malloc_free_long_63a.c" language="C" size="3269" checksum="894934dd61316cd18ed4897484f1a01c6a3f1d39"></file>
    <file path="000/102/291/CWE416_Use_After_Free__malloc_free_long_63b.c" language="C" size="1787" checksum="291088039caac9c926c516d4a90ec47c91f421d0">
      <mixed line="28" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102292" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/292/CWE416_Use_After_Free__malloc_free_long_64a.c" language="C" size="3286" checksum="c0419efb9ba56dc4efa0435175a553961eaba75b"></file>
    <file path="000/102/292/CWE416_Use_After_Free__malloc_free_long_64b.c" language="C" size="2266" checksum="8019a143023e8a74c27710e472a03dd197e5254f">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102293" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/293/CWE416_Use_After_Free__malloc_free_struct_01.c" language="C" size="3504" checksum="427783f1625f96619d7ae7849fe318ec85b972bd">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102294" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/294/CWE416_Use_After_Free__malloc_free_struct_02.c" language="C" size="5807" checksum="856da43e788bd49032b0c73f260197d7eb527038">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102295" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/295/CWE416_Use_After_Free__malloc_free_struct_03.c" language="C" size="5855" checksum="9b2e751aeee0f7cca634c82245d4c6a97c8770ef">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102296" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/296/CWE416_Use_After_Free__malloc_free_struct_04.c" language="C" size="6339" checksum="3e1a62ad2e877a05c82aa5c5c6dcbb68f4686f89">
      <mixed line="52" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102297" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/297/CWE416_Use_After_Free__malloc_free_struct_05.c" language="C" size="6247" checksum="575bf45f973f2bafb898e0ce5b29bf2c774d7a00">
      <mixed line="52" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102298" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/298/CWE416_Use_After_Free__malloc_free_struct_06.c" language="C" size="6305" checksum="8430e2dd68a9d1829188af81717929c2e297d8e9">
      <mixed line="51" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102299" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/299/CWE416_Use_After_Free__malloc_free_struct_07.c" language="C" size="6222" checksum="611727f6fe133bc1a703eb9f791cbc54dd377582">
      <mixed line="51" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102300" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/300/CWE416_Use_After_Free__malloc_free_struct_08.c" language="C" size="6378" checksum="153330e317da73cd0554f9b217882c6007c5efbe">
      <mixed line="59" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102301" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/301/CWE416_Use_After_Free__malloc_free_struct_09.c" language="C" size="6068" checksum="e6a46cca77f9e79ea9413d86ccc42bde1e74f786">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102302" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/302/CWE416_Use_After_Free__malloc_free_struct_10.c" language="C" size="5956" checksum="cd1761180c29fc072ea3427958a610c5335c011a">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102303" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/303/CWE416_Use_After_Free__malloc_free_struct_11.c" language="C" size="6100" checksum="be2446474c0bd7424dee99b55d3523880b037a46">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102304" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/304/CWE416_Use_After_Free__malloc_free_struct_12.c" language="C" size="6063" checksum="c8a56ab82970ec9ad19459a5c58a6e3cb79ce8da">
      <mixed line="59" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102305" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/305/CWE416_Use_After_Free__malloc_free_struct_13.c" language="C" size="6111" checksum="20b4d38ebe69825f0c64e644720a945286cc8c03">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102306" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/306/CWE416_Use_After_Free__malloc_free_struct_14.c" language="C" size="5999" checksum="c18cd09413a5538f1d4aec0d902c0e77302c52db">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102307" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/307/CWE416_Use_After_Free__malloc_free_struct_15.c" language="C" size="7391" checksum="d378f21cba8b708b94ee95cd4486bdd9acf30a00">
      <mixed line="53" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102308" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/308/CWE416_Use_After_Free__malloc_free_struct_16.c" language="C" size="4043" checksum="ad2a28db58788e438f7c34e028df761140c4092b">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102309" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/309/CWE416_Use_After_Free__malloc_free_struct_17.c" language="C" size="4013" checksum="6e8b2a5142b3feb589e196038600bb163ec8bf74">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102310" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/310/CWE416_Use_After_Free__malloc_free_struct_18.c" language="C" size="3768" checksum="4bc3cc109a9545b3616015c8cf362c33778ec21b">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102311" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/311/CWE416_Use_After_Free__malloc_free_struct_43.cpp" language="C++" size="3862" checksum="90152add3aecc8d439763a13798357b8bea88048">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102312" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/312/CWE416_Use_After_Free__malloc_free_struct_62a.cpp" language="C++" size="2946" checksum="9617a4bb5f02e9160f966e4344e3ffc052ecaebb">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/312/CWE416_Use_After_Free__malloc_free_struct_62b.cpp" language="C++" size="2032" checksum="e10ebe1ff4541e39c727c94dbb9b291246ff25e3"></file>
  </testcase>
  <testcase id="102313" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/313/CWE416_Use_After_Free__malloc_free_struct_63a.c" language="C" size="3516" checksum="1016b21180796f2451d5ed0e3b8659da203a2381"></file>
    <file path="000/102/313/CWE416_Use_After_Free__malloc_free_struct_63b.c" language="C" size="1855" checksum="4c8651d6348865729aa8afc9a77cf9020c1a10c0">
      <mixed line="28" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102314" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/314/CWE416_Use_After_Free__malloc_free_struct_64a.c" language="C" size="3506" checksum="3198c0643ca9087ddc85dc2f1cef0fb4489594a4"></file>
    <file path="000/102/314/CWE416_Use_After_Free__malloc_free_struct_64b.c" language="C" size="2361" checksum="b894c17e61706e9d5f02ba6eafed4d7a45386c8c">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102315" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/315/CWE416_Use_After_Free__malloc_free_wchar_t_01.c" language="C" size="3149" checksum="9efbf466b9470930e5d5ce659cd4c4c765765936">
      <mixed line="35" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102316" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/316/CWE416_Use_After_Free__malloc_free_wchar_t_02.c" language="C" size="5095" checksum="b7cf96ebcd3c3ee5aa692903c762171ff639a0d6">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102317" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/317/CWE416_Use_After_Free__malloc_free_wchar_t_03.c" language="C" size="5143" checksum="b5473d2937bbf502c17626ee7c517d8fd90286bf">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102318" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/318/CWE416_Use_After_Free__malloc_free_wchar_t_04.c" language="C" size="5627" checksum="5c1fc2a12f9bee8ec3fdc2b9d07d43520ddcf2fc">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102319" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/319/CWE416_Use_After_Free__malloc_free_wchar_t_05.c" language="C" size="5535" checksum="04589cfe29786bb7d465d736def081dfa40f93e7">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102320" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/320/CWE416_Use_After_Free__malloc_free_wchar_t_06.c" language="C" size="5593" checksum="5ef05d62f8431687d0280bd17762be2a37549fc1">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102321" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/321/CWE416_Use_After_Free__malloc_free_wchar_t_07.c" language="C" size="5510" checksum="7d32bbd89f0b8f26f2738d8fbc1b09c410588adb">
      <mixed line="45" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102322" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/322/CWE416_Use_After_Free__malloc_free_wchar_t_08.c" language="C" size="5666" checksum="6a17ca26e97edf4576a3cfa56f78a835de168d89">
      <mixed line="53" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102323" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/323/CWE416_Use_After_Free__malloc_free_wchar_t_09.c" language="C" size="5356" checksum="701c8125b00891ed90369e2de4f1d1e419db12ef">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102324" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/324/CWE416_Use_After_Free__malloc_free_wchar_t_10.c" language="C" size="5244" checksum="31671a611836829937de530ecfc5ede141dbc8bc">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102325" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/325/CWE416_Use_After_Free__malloc_free_wchar_t_11.c" language="C" size="5388" checksum="5bbded91247f57e3b20c780ccfa793414d72e5f6">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102326" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/326/CWE416_Use_After_Free__malloc_free_wchar_t_12.c" language="C" size="5231" checksum="d529e2bc5c4cf981aa6cd2deb32c1c55be282a34">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102327" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/327/CWE416_Use_After_Free__malloc_free_wchar_t_13.c" language="C" size="5399" checksum="c39bba3fc4a5acd195d973ef09dae4e3a680a784">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102328" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/328/CWE416_Use_After_Free__malloc_free_wchar_t_14.c" language="C" size="5287" checksum="adbeaacee85b8f0c493afd69a21d9cf88481f187">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102329" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/329/CWE416_Use_After_Free__malloc_free_wchar_t_15.c" language="C" size="6679" checksum="9eca572ae8b226abe6e0e8c254f10d969533945d">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102330" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/330/CWE416_Use_After_Free__malloc_free_wchar_t_16.c" language="C" size="3616" checksum="04261dfae11b11dc5512b156f1c19a46c040f707">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102331" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/331/CWE416_Use_After_Free__malloc_free_wchar_t_17.c" language="C" size="3586" checksum="64be2fefb5f0aa5fa05df818bab6215fb5c7bdec">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102332" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/332/CWE416_Use_After_Free__malloc_free_wchar_t_18.c" language="C" size="3413" checksum="2bf331183fc080b8e694368e8953004a0c220e19">
      <mixed line="39" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102333" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/333/CWE416_Use_After_Free__malloc_free_wchar_t_43.cpp" language="C++" size="3487" checksum="0ca9b6b6108124144da27a36023bcfba3b2d4612">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102334" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/334/CWE416_Use_After_Free__malloc_free_wchar_t_62a.cpp" language="C++" size="2895" checksum="f991a5788676ddf3c6531d4f1a0cd813fd8ec160">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/334/CWE416_Use_After_Free__malloc_free_wchar_t_62b.cpp" language="C++" size="1692" checksum="8bb5939df455527c53b1ba3a100e9e4bb2f968af"></file>
  </testcase>
  <testcase id="102335" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/335/CWE416_Use_After_Free__malloc_free_wchar_t_63a.c" language="C" size="3167" checksum="b0e633cda3adea1be1bbb2c7c5b572593c699ab7"></file>
    <file path="000/102/335/CWE416_Use_After_Free__malloc_free_wchar_t_63b.c" language="C" size="1805" checksum="9e4b2936c2369da9e09b59f0f7835d3d75e2fd76">
      <mixed line="28" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102336" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using malloc(), initialize memory block, and Deallocate data using free()<br/> GoodSource: Allocate data using malloc() and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/336/CWE416_Use_After_Free__malloc_free_wchar_t_64a.c" language="C" size="3175" checksum="5b21472a565252b43ace619d24e5bb65e1d791a7"></file>
    <file path="000/102/336/CWE416_Use_After_Free__malloc_free_wchar_t_64b.c" language="C" size="2293" checksum="a240d2cfb238ad5c46a343dfa25b13ffd8a41c91">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102337" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/337/CWE416_Use_After_Free__new_delete_array_char_01.cpp" language="C++" size="3116" checksum="aa89295c316c7b9a93f428a873ff7f12e42a0e86">
      <mixed line="38" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102338" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/338/CWE416_Use_After_Free__new_delete_array_char_02.cpp" language="C++" size="5015" checksum="4217ada31fa64ae9d47fc53441c0afca5e335b8f">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102339" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/339/CWE416_Use_After_Free__new_delete_array_char_03.cpp" language="C++" size="5063" checksum="521bbc955f55c71824e240d1c99a2dcdbd796e44">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102340" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/340/CWE416_Use_After_Free__new_delete_array_char_04.cpp" language="C++" size="5547" checksum="3956f5ccac6a00e9015a75e47f1e181e0f963f44">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102341" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/341/CWE416_Use_After_Free__new_delete_array_char_05.cpp" language="C++" size="5455" checksum="57710c711066e2a839fb657bd905218057789bd2">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102342" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/342/CWE416_Use_After_Free__new_delete_array_char_06.cpp" language="C++" size="5513" checksum="a52a85d2a8b0ce112e87804952e05449878014c2">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102343" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/343/CWE416_Use_After_Free__new_delete_array_char_07.cpp" language="C++" size="5430" checksum="2db986c579db2bcb7f1f910d21a08c3957853eb9">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102344" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/344/CWE416_Use_After_Free__new_delete_array_char_08.cpp" language="C++" size="5586" checksum="6811732406389c042d3415f402e444a22abadd4d">
      <mixed line="56" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102345" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/345/CWE416_Use_After_Free__new_delete_array_char_09.cpp" language="C++" size="5276" checksum="175f7e1d2fdd4d805bbd5e7d24a5a6117741f512">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102346" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/346/CWE416_Use_After_Free__new_delete_array_char_10.cpp" language="C++" size="5164" checksum="c180659c7e34ce57bbbfd4a55b3cd1029eeebb30">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102347" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/347/CWE416_Use_After_Free__new_delete_array_char_11.cpp" language="C++" size="5304" checksum="c226fc78253fc59204913efbff10d0cb9d4a3988">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102348" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/348/CWE416_Use_After_Free__new_delete_array_char_12.cpp" language="C++" size="5131" checksum="35cf855355845724507270153c636eeff48e77c3">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102349" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/349/CWE416_Use_After_Free__new_delete_array_char_13.cpp" language="C++" size="5315" checksum="980f136c0acac2ce647fd517f6f83fccfd103348">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102350" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/350/CWE416_Use_After_Free__new_delete_array_char_14.cpp" language="C++" size="5203" checksum="8547898257290373a4c671d78af4a13da056b55b">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102351" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/351/CWE416_Use_After_Free__new_delete_array_char_15.cpp" language="C++" size="6595" checksum="20d31d2b82d8f353a0d8dee442b88e705ad6fafa">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102352" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/352/CWE416_Use_After_Free__new_delete_array_char_16.cpp" language="C++" size="3579" checksum="5447d5d9cc9a0d6aec27b2c9951d306734bb82db">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102353" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/353/CWE416_Use_After_Free__new_delete_array_char_17.cpp" language="C++" size="3549" checksum="d68951ef02af050cfd4d2dffeff5b8a3e92b8145">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102354" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/354/CWE416_Use_After_Free__new_delete_array_char_18.cpp" language="C++" size="3376" checksum="6d44c6fe19c4e700d5afdb310a07a24cb1b7bf9e">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102355" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/355/CWE416_Use_After_Free__new_delete_array_char_43.cpp" language="C++" size="3418" checksum="bedd2fe2322d4a503b3bf519fb1f1ddb60506c64">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102356" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/356/CWE416_Use_After_Free__new_delete_array_char_62a.cpp" language="C++" size="2903" checksum="aa661949d60ab1d3e2bcd4c2634d99b8148850b4">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/356/CWE416_Use_After_Free__new_delete_array_char_62b.cpp" language="C++" size="1627" checksum="1c4e9275602ba07b7feb3e4c71ca6e61bde8c304"></file>
  </testcase>
  <testcase id="102357" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/357/CWE416_Use_After_Free__new_delete_array_char_63a.cpp" language="C++" size="2833" checksum="35d502a5c785c2d19dfc66ae2e29569adabc9741"></file>
    <file path="000/102/357/CWE416_Use_After_Free__new_delete_array_char_63b.cpp" language="C++" size="1763" checksum="9f2414cdf3f982d57b7905159629ca1b414bd08c">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102358" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/358/CWE416_Use_After_Free__new_delete_array_char_64a.cpp" language="C++" size="2850" checksum="3a78eb62cface65a72cf41c1cf6cdbb564b67c01"></file>
    <file path="000/102/358/CWE416_Use_After_Free__new_delete_array_char_64b.cpp" language="C++" size="2242" checksum="15b948622f490e01de4221b21455fb1ad1753556">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102359" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/359/CWE416_Use_After_Free__new_delete_array_class_01.cpp" language="C++" size="3490" checksum="4b818fd111d8a92bc0a473d13bb881b1c115fc62">
      <mixed line="44" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102360" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/360/CWE416_Use_After_Free__new_delete_array_class_02.cpp" language="C++" size="5752" checksum="c4982943aa4a1564d3105afe804086e3ca41fc49">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102361" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/361/CWE416_Use_After_Free__new_delete_array_class_03.cpp" language="C++" size="5800" checksum="51a05bfdee5c880162cbcf9f72b0d1936120e0f9">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102362" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/362/CWE416_Use_After_Free__new_delete_array_class_04.cpp" language="C++" size="6284" checksum="141fc1d67df29a1ec7053ef3b55bda170cda9ce9">
      <mixed line="55" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102363" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/363/CWE416_Use_After_Free__new_delete_array_class_05.cpp" language="C++" size="6192" checksum="05ac4a3a7543d2e7d180dbce3deb71fff6d43c88">
      <mixed line="55" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102364" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/364/CWE416_Use_After_Free__new_delete_array_class_06.cpp" language="C++" size="6250" checksum="7ffed2c295f214e5a6581ffa2caca38534ed6108">
      <mixed line="54" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102365" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/365/CWE416_Use_After_Free__new_delete_array_class_07.cpp" language="C++" size="6167" checksum="fbc0a8d8d74508f58f81e1ac8d7cad04a112cdaa">
      <mixed line="54" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102366" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/366/CWE416_Use_After_Free__new_delete_array_class_08.cpp" language="C++" size="6323" checksum="c989dadb06a92de5f78dc1b5b37beb6c9fa303d0">
      <mixed line="62" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102367" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/367/CWE416_Use_After_Free__new_delete_array_class_09.cpp" language="C++" size="6013" checksum="9be2d61b9a26f6e00252c420fa1d13089312333e">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102368" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/368/CWE416_Use_After_Free__new_delete_array_class_10.cpp" language="C++" size="5901" checksum="81cccf24ce7687abe5dd2d3d84aa5e62aea7ac4e">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102369" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/369/CWE416_Use_After_Free__new_delete_array_class_11.cpp" language="C++" size="6041" checksum="13d4e29b815691e799a817fba1f3d185d69588d0">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102370" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/370/CWE416_Use_After_Free__new_delete_array_class_12.cpp" language="C++" size="5983" checksum="20f9670d53e6af27f5f5863051568c82511557bc">
      <mixed line="61" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102371" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/371/CWE416_Use_After_Free__new_delete_array_class_13.cpp" language="C++" size="6052" checksum="77202aa348197728e650d3b489075991ec721393">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102372" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/372/CWE416_Use_After_Free__new_delete_array_class_14.cpp" language="C++" size="5940" checksum="cf8af2b7d9349b9dd454ac91a430265e591935e1">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102373" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/373/CWE416_Use_After_Free__new_delete_array_class_15.cpp" language="C++" size="7332" checksum="76b6ed54137d1c98ea36127dd5b74d8e4cfbd755">
      <mixed line="55" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102374" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/374/CWE416_Use_After_Free__new_delete_array_class_16.cpp" language="C++" size="4025" checksum="ff013812669112dc2898b30939ea84ccb6b4602f">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102375" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/375/CWE416_Use_After_Free__new_delete_array_class_17.cpp" language="C++" size="3995" checksum="b68e105e9b912a76c9a8f3ca08f911cc1aa7613f">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102376" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/376/CWE416_Use_After_Free__new_delete_array_class_18.cpp" language="C++" size="3750" checksum="07e494ee7debc5a7fa5e4fd8c130d9131daa7e08">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102377" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/377/CWE416_Use_After_Free__new_delete_array_class_43.cpp" language="C++" size="3816" checksum="f5604de14b67f0b309e76d0e23477b5e07db2da4">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102378" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/378/CWE416_Use_After_Free__new_delete_array_class_62a.cpp" language="C++" size="2980" checksum="12df19a92d45e8156406c29802922201ee51e458">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/378/CWE416_Use_After_Free__new_delete_array_class_62b.cpp" language="C++" size="1974" checksum="98188c0695b360cc6da0f9033d2770a3d8e2d661"></file>
  </testcase>
  <testcase id="102379" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/379/CWE416_Use_After_Free__new_delete_array_class_63a.cpp" language="C++" size="3205" checksum="e3a35fdb8b092d4344c12121247ddd0a5c2d80c8"></file>
    <file path="000/102/379/CWE416_Use_After_Free__new_delete_array_class_63b.cpp" language="C++" size="1839" checksum="2cabc08e09b5289f0068702171a2662c8af60898">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102380" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/380/CWE416_Use_After_Free__new_delete_array_class_64a.cpp" language="C++" size="3198" checksum="0265f443119592593a0c6ef2408525b2181b337c"></file>
    <file path="000/102/380/CWE416_Use_After_Free__new_delete_array_class_64b.cpp" language="C++" size="2342" checksum="319529c4bd14ee85d77d19d58f48827700666d31">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102381" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/381/CWE416_Use_After_Free__new_delete_array_int64_t_01.cpp" language="C++" size="3348" checksum="1a4a52a3df780834094e410fd1a2086aeb17985d">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102382" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/382/CWE416_Use_After_Free__new_delete_array_int64_t_02.cpp" language="C++" size="5492" checksum="2e1324492924759b4116198728a5bf92d93800f1">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102383" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/383/CWE416_Use_After_Free__new_delete_array_int64_t_03.cpp" language="C++" size="5540" checksum="9d3a5a4132594b8d7370c5c944e52e193b41b1c9">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102384" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/384/CWE416_Use_After_Free__new_delete_array_int64_t_04.cpp" language="C++" size="6024" checksum="dbe23367133d9daff1ce1a3f1f7f333916eb3506">
      <mixed line="54" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102385" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/385/CWE416_Use_After_Free__new_delete_array_int64_t_05.cpp" language="C++" size="5932" checksum="e92f5282512dc51ab61a66bac195e4fb83a52012">
      <mixed line="54" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102386" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/386/CWE416_Use_After_Free__new_delete_array_int64_t_06.cpp" language="C++" size="5990" checksum="4c4e8cbe26828e040557d711a46e204def933f47">
      <mixed line="53" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102387" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/387/CWE416_Use_After_Free__new_delete_array_int64_t_07.cpp" language="C++" size="5907" checksum="3c5b1ad6b7108f6f0dbf0ed3f5af74b63e3616a3">
      <mixed line="53" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102388" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/388/CWE416_Use_After_Free__new_delete_array_int64_t_08.cpp" language="C++" size="6063" checksum="d2279337d54cf204a24cdd63dcd9e1110840a7ce">
      <mixed line="61" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102389" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/389/CWE416_Use_After_Free__new_delete_array_int64_t_09.cpp" language="C++" size="5753" checksum="d73e43f41031b351a9f40176d8e4f70340f8b049">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102390" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/390/CWE416_Use_After_Free__new_delete_array_int64_t_10.cpp" language="C++" size="5641" checksum="3ea177ff59c9c16f2247880570b64e9666ce1943">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102391" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/391/CWE416_Use_After_Free__new_delete_array_int64_t_11.cpp" language="C++" size="5781" checksum="cc64ea57f96e6ac69f1dc9be5bb4323401efea76">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102392" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/392/CWE416_Use_After_Free__new_delete_array_int64_t_12.cpp" language="C++" size="5686" checksum="b64591f8ffa9279e870285ae3a5f8bede6e0900e">
      <mixed line="59" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102393" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/393/CWE416_Use_After_Free__new_delete_array_int64_t_13.cpp" language="C++" size="5792" checksum="3aab8f79ed068f88750f6bf26fa983f27c6abda6">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102394" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/394/CWE416_Use_After_Free__new_delete_array_int64_t_14.cpp" language="C++" size="5680" checksum="63642db51f78ecd6e0d393531f8cdf828ee3111a">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102395" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/395/CWE416_Use_After_Free__new_delete_array_int64_t_15.cpp" language="C++" size="7072" checksum="044c0cf873083fec73a4a1491f6d2dac45b3900d">
      <mixed line="54" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102396" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/396/CWE416_Use_After_Free__new_delete_array_int64_t_16.cpp" language="C++" size="3871" checksum="bbec6bde2d88b28a266085bad76b0f95bda052fc">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102397" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/397/CWE416_Use_After_Free__new_delete_array_int64_t_17.cpp" language="C++" size="3841" checksum="c09c714123d5b23993640e66253c6c9b1a42e590">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102398" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/398/CWE416_Use_After_Free__new_delete_array_int64_t_18.cpp" language="C++" size="3608" checksum="7fd7174733ac74e204d02a908961e1f0f1699b62">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102399" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/399/CWE416_Use_After_Free__new_delete_array_int64_t_43.cpp" language="C++" size="3659" checksum="b9311881d2bbed547a7a5c86ff00e4309228a7f5">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102400" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/400/CWE416_Use_After_Free__new_delete_array_int64_t_62a.cpp" language="C++" size="2952" checksum="2c1ae10fed9b0b6d5d0d48d0a2d0665bbb5c97cd">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/400/CWE416_Use_After_Free__new_delete_array_int64_t_62b.cpp" language="C++" size="1834" checksum="4c4ad1b4d1a8895757a3e747e6e96a403154b756"></file>
  </testcase>
  <testcase id="102401" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/401/CWE416_Use_After_Free__new_delete_array_int64_t_63a.cpp" language="C++" size="3052" checksum="563cb2a28142c4678351b839ee1820a9a5a58fe2"></file>
    <file path="000/102/401/CWE416_Use_After_Free__new_delete_array_int64_t_63b.cpp" language="C++" size="1809" checksum="5154cfd7ac3eaefbdcd651ac5c03780b45997861">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102402" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/402/CWE416_Use_After_Free__new_delete_array_int64_t_64a.cpp" language="C++" size="3060" checksum="a5674c944fd380ec16e2708e4d071e070aabc230"></file>
    <file path="000/102/402/CWE416_Use_After_Free__new_delete_array_int64_t_64b.cpp" language="C++" size="2297" checksum="218dbf77acad38e3805007e4e36c8084d20dd266">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102403" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/403/CWE416_Use_After_Free__new_delete_array_int_01.cpp" language="C++" size="3296" checksum="f9f10b9d9f8e2ea3f05a2b103ad96ebe3d4f9a01">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102404" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/404/CWE416_Use_After_Free__new_delete_array_int_02.cpp" language="C++" size="5415" checksum="d160d5256804cdf257b2400be170f515689db71c">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102405" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/405/CWE416_Use_After_Free__new_delete_array_int_03.cpp" language="C++" size="5463" checksum="1559cacc90367a2eae9ed98564cee32a421f5724">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102406" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/406/CWE416_Use_After_Free__new_delete_array_int_04.cpp" language="C++" size="5947" checksum="c71b6af692d63d47e601b39c934ce408fd940c62">
      <mixed line="54" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102407" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/407/CWE416_Use_After_Free__new_delete_array_int_05.cpp" language="C++" size="5855" checksum="2122e5748fbcd795334d88773cf5b51f59528d67">
      <mixed line="54" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102408" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/408/CWE416_Use_After_Free__new_delete_array_int_06.cpp" language="C++" size="5913" checksum="c9fb2eb485d46fdb9533e1dd1bd7f690603932c7">
      <mixed line="53" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102409" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/409/CWE416_Use_After_Free__new_delete_array_int_07.cpp" language="C++" size="5830" checksum="3653b46b512429b3fba04314c30097b9f4e2fc61">
      <mixed line="53" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102410" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/410/CWE416_Use_After_Free__new_delete_array_int_08.cpp" language="C++" size="5986" checksum="c5827a48eb0ceaa6a82fbf04d91afa30d663d1e1">
      <mixed line="61" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102411" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/411/CWE416_Use_After_Free__new_delete_array_int_09.cpp" language="C++" size="5676" checksum="1f3afd3fad88380070e2254988379590f908f322">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102412" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/412/CWE416_Use_After_Free__new_delete_array_int_10.cpp" language="C++" size="5564" checksum="27f79391617a4c3c9c115209ad77d30a1db68f73">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102413" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/413/CWE416_Use_After_Free__new_delete_array_int_11.cpp" language="C++" size="5704" checksum="2b7eabf088376774442ec2b048ba25c9faaac535">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102414" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/414/CWE416_Use_After_Free__new_delete_array_int_12.cpp" language="C++" size="5611" checksum="245e2466c7dfc0c004e16649edc9e3fadb621bec">
      <mixed line="59" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102415" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/415/CWE416_Use_After_Free__new_delete_array_int_13.cpp" language="C++" size="5715" checksum="c1a5d315a993e71e8e3e7eb71c99d0aecad0b341">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102416" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/416/CWE416_Use_After_Free__new_delete_array_int_14.cpp" language="C++" size="5603" checksum="3553413fc7befe3b52f79c05ecdb79d6ae4d7377">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102417" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/417/CWE416_Use_After_Free__new_delete_array_int_15.cpp" language="C++" size="6995" checksum="590e3ed727fa08c25b4e67a94a0bd4d881b0f487">
      <mixed line="54" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102418" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/418/CWE416_Use_After_Free__new_delete_array_int_16.cpp" language="C++" size="3819" checksum="fca8d96a7179b71927c2118f8425aeeb76e4d2e5">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102419" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/419/CWE416_Use_After_Free__new_delete_array_int_17.cpp" language="C++" size="3789" checksum="5d6ac66d33193cfa8bdf4c40b0397ca8a8d60599">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102420" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/420/CWE416_Use_After_Free__new_delete_array_int_18.cpp" language="C++" size="3556" checksum="e8e51bbc1bf1dbeb0aeaf53317924c96ab494d8a">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102421" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/421/CWE416_Use_After_Free__new_delete_array_int_43.cpp" language="C++" size="3595" checksum="3e02ffd5576e7547aa177c500c0a10ec386770ea">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102422" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/422/CWE416_Use_After_Free__new_delete_array_int_62a.cpp" language="C++" size="2906" checksum="68c1727715238c0d0142d403b5ee09ba416148da">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/422/CWE416_Use_After_Free__new_delete_array_int_62b.cpp" language="C++" size="1796" checksum="b80a8e1fecd5b1c3eda49254ff44caf8e4bdcf56"></file>
  </testcase>
  <testcase id="102423" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/423/CWE416_Use_After_Free__new_delete_array_int_63a.cpp" language="C++" size="2998" checksum="646f9dac577b4473cbe3749665e76002cc0bbb60"></file>
    <file path="000/102/423/CWE416_Use_After_Free__new_delete_array_int_63b.cpp" language="C++" size="1767" checksum="97473f810d567cd436881de4fd9c1f79c7231730">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102424" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/424/CWE416_Use_After_Free__new_delete_array_int_64a.cpp" language="C++" size="3018" checksum="dfc670df65431d64aab2e4e20f6410e016e4afd2"></file>
    <file path="000/102/424/CWE416_Use_After_Free__new_delete_array_int_64b.cpp" language="C++" size="2243" checksum="ead733c8cd1870f0f143d9f9c796c7cd26674dc9">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102425" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/425/CWE416_Use_After_Free__new_delete_array_long_01.cpp" language="C++" size="3310" checksum="846621541f532c6fc06687f3f6cc42e5763df290">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102426" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/426/CWE416_Use_After_Free__new_delete_array_long_02.cpp" language="C++" size="5436" checksum="49fd2f44c7e9dde216d17a25f463d6e255f6b203">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102427" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/427/CWE416_Use_After_Free__new_delete_array_long_03.cpp" language="C++" size="5484" checksum="1ae1456410c4031185a96ab99b4d34e35657866d">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102428" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/428/CWE416_Use_After_Free__new_delete_array_long_04.cpp" language="C++" size="5968" checksum="7380508ad2b4f10a15e54708a0008f934824a48c">
      <mixed line="54" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102429" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/429/CWE416_Use_After_Free__new_delete_array_long_05.cpp" language="C++" size="5876" checksum="1e13e7f5beca4d8ca287b69079168b629a2f30c9">
      <mixed line="54" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102430" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/430/CWE416_Use_After_Free__new_delete_array_long_06.cpp" language="C++" size="5934" checksum="7b66d71c872c2c1286c8ad1091479b8423759946">
      <mixed line="53" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102431" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/431/CWE416_Use_After_Free__new_delete_array_long_07.cpp" language="C++" size="5851" checksum="4409f04761ccc67b9e157ce9f348609545854231">
      <mixed line="53" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102432" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/432/CWE416_Use_After_Free__new_delete_array_long_08.cpp" language="C++" size="6007" checksum="5a12a47ca9caba0167c60d9158318972f9634768">
      <mixed line="61" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102433" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/433/CWE416_Use_After_Free__new_delete_array_long_09.cpp" language="C++" size="5697" checksum="0cf5ad1f80ff80498cd8be56a469c88dc185dade">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102434" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/434/CWE416_Use_After_Free__new_delete_array_long_10.cpp" language="C++" size="5585" checksum="ed465f163d4aad280328201b8d25be24de1b5b56">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102435" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/435/CWE416_Use_After_Free__new_delete_array_long_11.cpp" language="C++" size="5725" checksum="6f238591a75fe8c57d420cc9b1721dd6f968f00d">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102436" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/436/CWE416_Use_After_Free__new_delete_array_long_12.cpp" language="C++" size="5632" checksum="fd46584c808d42f933c633fef8231ea370d163e1">
      <mixed line="59" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102437" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/437/CWE416_Use_After_Free__new_delete_array_long_13.cpp" language="C++" size="5736" checksum="07b4479fc322d1465d1334c20a4edd58584a7a23">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102438" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/438/CWE416_Use_After_Free__new_delete_array_long_14.cpp" language="C++" size="5624" checksum="6e264360e8d861a3deb17bcbd3909bbd98c506b3">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102439" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/439/CWE416_Use_After_Free__new_delete_array_long_15.cpp" language="C++" size="7016" checksum="0845304cb722317b32d4ec71446024b8040b7fee">
      <mixed line="54" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102440" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/440/CWE416_Use_After_Free__new_delete_array_long_16.cpp" language="C++" size="3833" checksum="73e703c6fa93a747f857494c33bf50cbee37f507">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102441" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/441/CWE416_Use_After_Free__new_delete_array_long_17.cpp" language="C++" size="3803" checksum="d7b6ca6dd3fa8cb5b66a5ff72bd2ab29cefd0154">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102442" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/442/CWE416_Use_After_Free__new_delete_array_long_18.cpp" language="C++" size="3570" checksum="233e127b51d4769a6f0fb583e5d05d4176ae2ace">
      <mixed line="46" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102443" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/443/CWE416_Use_After_Free__new_delete_array_long_43.cpp" language="C++" size="3612" checksum="4cd574c159eebce859b391b39eac9e12ed2ff55c">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102444" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/444/CWE416_Use_After_Free__new_delete_array_long_62a.cpp" language="C++" size="2917" checksum="d6228251060a5482e1473774092dd7c5014a2467">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/444/CWE416_Use_After_Free__new_delete_array_long_62b.cpp" language="C++" size="1807" checksum="d4de328dacf62382d14d45c24d4fdeb0a95a66bd"></file>
  </testcase>
  <testcase id="102445" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/445/CWE416_Use_After_Free__new_delete_array_long_63a.cpp" language="C++" size="3013" checksum="9cc021e65e93af290c4794ef295bf48201120ba9"></file>
    <file path="000/102/445/CWE416_Use_After_Free__new_delete_array_long_63b.cpp" language="C++" size="1777" checksum="5af571b27dbf37d7d17ea49204a20d3ee4030287">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102446" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/446/CWE416_Use_After_Free__new_delete_array_long_64a.cpp" language="C++" size="3030" checksum="5daab854a4fdc2e1621eb97350633766a260f77b"></file>
    <file path="000/102/446/CWE416_Use_After_Free__new_delete_array_long_64b.cpp" language="C++" size="2256" checksum="15ecbcfa653b564adbdd388e0fe3681f574e74b0">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102447" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/447/CWE416_Use_After_Free__new_delete_array_struct_01.cpp" language="C++" size="3493" checksum="17af709d2b56dde311e47a2127c1f8288279f37a">
      <mixed line="44" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102448" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/448/CWE416_Use_After_Free__new_delete_array_struct_02.cpp" language="C++" size="5756" checksum="be94effae5a61c3948b3fe06905466e31cb2d6cf">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102449" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/449/CWE416_Use_After_Free__new_delete_array_struct_03.cpp" language="C++" size="5804" checksum="2cbe1536969abbb8c413fccf2d2915aa60aa2174">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102450" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/450/CWE416_Use_After_Free__new_delete_array_struct_04.cpp" language="C++" size="6288" checksum="e09df778f2411316065e0dac019987945b478d24">
      <mixed line="55" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102451" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/451/CWE416_Use_After_Free__new_delete_array_struct_05.cpp" language="C++" size="6196" checksum="6c04e3f888e8fc2e9691c097f282670a6d282db3">
      <mixed line="55" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102452" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/452/CWE416_Use_After_Free__new_delete_array_struct_06.cpp" language="C++" size="6254" checksum="bcc2d6e6310e9f3952429dd1933b5bd33c176d58">
      <mixed line="54" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102453" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/453/CWE416_Use_After_Free__new_delete_array_struct_07.cpp" language="C++" size="6171" checksum="1bfaeb3ac87a5c6b402cfff3a0f46842398bb8df">
      <mixed line="54" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102454" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/454/CWE416_Use_After_Free__new_delete_array_struct_08.cpp" language="C++" size="6327" checksum="899474dd7ddc4f3422b06b5a3ca116eea09213db">
      <mixed line="62" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102455" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/455/CWE416_Use_After_Free__new_delete_array_struct_09.cpp" language="C++" size="6017" checksum="06832e10a365d27ef46824ec15ecb2be620c3b77">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102456" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/456/CWE416_Use_After_Free__new_delete_array_struct_10.cpp" language="C++" size="5905" checksum="6806acbf50a1cd430c07d65972b84479c82bb37d">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102457" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/457/CWE416_Use_After_Free__new_delete_array_struct_11.cpp" language="C++" size="6045" checksum="165d06e0b434409e84b173e3bd60bcab969d34a4">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102458" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/458/CWE416_Use_After_Free__new_delete_array_struct_12.cpp" language="C++" size="5986" checksum="4303284617b75b06e27c68ed47fa8bb258b875d4">
      <mixed line="61" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102459" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/459/CWE416_Use_After_Free__new_delete_array_struct_13.cpp" language="C++" size="6056" checksum="990376041bfd964e32fa97d86d753d9a2ace8c13">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102460" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/460/CWE416_Use_After_Free__new_delete_array_struct_14.cpp" language="C++" size="5944" checksum="b45bdea5e6dba568520def92e051fb1d6e3a7e67">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102461" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/461/CWE416_Use_After_Free__new_delete_array_struct_15.cpp" language="C++" size="7336" checksum="36e451221bb9a5275429a76800b3aca3c45dd22e">
      <mixed line="55" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102462" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/462/CWE416_Use_After_Free__new_delete_array_struct_16.cpp" language="C++" size="4028" checksum="a9618311c52710b11de740856267acdd42099b59">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102463" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/463/CWE416_Use_After_Free__new_delete_array_struct_17.cpp" language="C++" size="3998" checksum="404a04af23a14d4047dd6f6dcf4070b1aa92f8f5">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102464" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/464/CWE416_Use_After_Free__new_delete_array_struct_18.cpp" language="C++" size="3753" checksum="195bc234fbc3c54c8901ad4eed52ffeb427b257d">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102465" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/465/CWE416_Use_After_Free__new_delete_array_struct_43.cpp" language="C++" size="3822" checksum="3e6963b8a511494daf799780ff93bffcb2e3953d">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102466" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/466/CWE416_Use_After_Free__new_delete_array_struct_62a.cpp" language="C++" size="2983" checksum="4a6dab0700a5e36e24d6515edfcadb7faf329a91">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/466/CWE416_Use_After_Free__new_delete_array_struct_62b.cpp" language="C++" size="1982" checksum="b8079cbae400ab6c9068d99182446e053a5b541b"></file>
  </testcase>
  <testcase id="102467" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/467/CWE416_Use_After_Free__new_delete_array_struct_63a.cpp" language="C++" size="3217" checksum="df795f5c100692d346459ab6bbc86472a7a50b28"></file>
    <file path="000/102/467/CWE416_Use_After_Free__new_delete_array_struct_63b.cpp" language="C++" size="1841" checksum="fdbd4a5abc27537f0a282d01b0e956bb2c4ca613">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102468" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/468/CWE416_Use_After_Free__new_delete_array_struct_64a.cpp" language="C++" size="3207" checksum="fbb17319290e12bbab504959e88537ab9345e485"></file>
    <file path="000/102/468/CWE416_Use_After_Free__new_delete_array_struct_64b.cpp" language="C++" size="2347" checksum="c82ca8a60b9127e646d088409f2691f9c1f1f56a">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102469" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/469/CWE416_Use_After_Free__new_delete_array_wchar_t_01.cpp" language="C++" size="3154" checksum="b99abc3860d31242796b4252482ae3d591aa9e0d">
      <mixed line="38" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102470" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/470/CWE416_Use_After_Free__new_delete_array_wchar_t_02.cpp" language="C++" size="5072" checksum="8a5d40f7d1f188da9a2da5680f691e9683979e0e">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102471" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/471/CWE416_Use_After_Free__new_delete_array_wchar_t_03.cpp" language="C++" size="5120" checksum="6e333fcb937b4b6cc61d55a122cea8a7cae20a6c">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102472" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/472/CWE416_Use_After_Free__new_delete_array_wchar_t_04.cpp" language="C++" size="5604" checksum="f79183954adb7c27e782078a0617d8844b4c0110">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102473" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/473/CWE416_Use_After_Free__new_delete_array_wchar_t_05.cpp" language="C++" size="5512" checksum="b8070855df95fc36f69a69280ae80a5af9a07119">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102474" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/474/CWE416_Use_After_Free__new_delete_array_wchar_t_06.cpp" language="C++" size="5570" checksum="f0e1f4f45ab03b2f2c8d5ae979ba24fdc5da03df">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102475" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/475/CWE416_Use_After_Free__new_delete_array_wchar_t_07.cpp" language="C++" size="5487" checksum="5191e43786f19ef2e66688c333a9dc9cdd412ee7">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102476" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/476/CWE416_Use_After_Free__new_delete_array_wchar_t_08.cpp" language="C++" size="5643" checksum="dc39f40b79d56baf70bfcce13572589ed1b4334c">
      <mixed line="56" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102477" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/477/CWE416_Use_After_Free__new_delete_array_wchar_t_09.cpp" language="C++" size="5333" checksum="8367dec3da19da263dd478620d426ccea72300f1">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102478" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/478/CWE416_Use_After_Free__new_delete_array_wchar_t_10.cpp" language="C++" size="5221" checksum="2409c7fedee010513d3adef131edc5393a03ed00">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102479" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/479/CWE416_Use_After_Free__new_delete_array_wchar_t_11.cpp" language="C++" size="5361" checksum="3b7a03991c25f782f3b5b0ae8621e6d4a0c35e7a">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102480" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/480/CWE416_Use_After_Free__new_delete_array_wchar_t_12.cpp" language="C++" size="5188" checksum="f3ba7fcbc266c7b91ab646555f5ed587cf0ac645">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102481" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/481/CWE416_Use_After_Free__new_delete_array_wchar_t_13.cpp" language="C++" size="5372" checksum="66e3066fd8230c5b37b7d6cb1240e267fd9a3984">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102482" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/482/CWE416_Use_After_Free__new_delete_array_wchar_t_14.cpp" language="C++" size="5260" checksum="778a378f922524b31445617e3c7effd0daffc7ef">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102483" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/483/CWE416_Use_After_Free__new_delete_array_wchar_t_15.cpp" language="C++" size="6652" checksum="55b9958eeff249abff2f3cf7bb88adf4e7c45188">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102484" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/484/CWE416_Use_After_Free__new_delete_array_wchar_t_16.cpp" language="C++" size="3617" checksum="dad457f66233f4d3a6f9f79ffb8a2d99875d43f5">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102485" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/485/CWE416_Use_After_Free__new_delete_array_wchar_t_17.cpp" language="C++" size="3587" checksum="801a34d19fed5ed7e9968bad415479f1ae50f363">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102486" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/486/CWE416_Use_After_Free__new_delete_array_wchar_t_18.cpp" language="C++" size="3414" checksum="cfe9680465c8d390a58a9e222325b6493f8cc426">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102487" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/487/CWE416_Use_After_Free__new_delete_array_wchar_t_43.cpp" language="C++" size="3465" checksum="ba6898ca60317c22df4b5d7acd7c605799b62af2">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102488" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/488/CWE416_Use_After_Free__new_delete_array_wchar_t_62a.cpp" language="C++" size="2932" checksum="7fa020c773afebae22d13deb873bdee087a2419a">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/488/CWE416_Use_After_Free__new_delete_array_wchar_t_62b.cpp" language="C++" size="1660" checksum="7117bb0cdcf5ce2243441a73df49a999f557da64"></file>
  </testcase>
  <testcase id="102489" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/489/CWE416_Use_After_Free__new_delete_array_wchar_t_63a.cpp" language="C++" size="2878" checksum="da7303b6a1783a9b44d2a062ca422422f807595b"></file>
    <file path="000/102/489/CWE416_Use_After_Free__new_delete_array_wchar_t_63b.cpp" language="C++" size="1789" checksum="2e1b629d2ba4e5ccf7236700995753e2b804b21b">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102490" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete[]<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/490/CWE416_Use_After_Free__new_delete_array_wchar_t_64a.cpp" language="C++" size="2886" checksum="98b8add38e3637e30e0a3b0b164f9dd6f1243863"></file>
    <file path="000/102/490/CWE416_Use_After_Free__new_delete_array_wchar_t_64b.cpp" language="C++" size="2277" checksum="b6f5229c695ec6b9022b83565e07312b8b4f2ca1">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102491" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/491/CWE416_Use_After_Free__new_delete_char_01.cpp" language="C++" size="2971" checksum="307dad6f1e782838d83e421feacb25f26880ba70">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102492" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/492/CWE416_Use_After_Free__new_delete_char_02.cpp" language="C++" size="4769" checksum="11f085df8ca196e78503078d13c1bc1c8d481fed">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102493" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/493/CWE416_Use_After_Free__new_delete_char_03.cpp" language="C++" size="4817" checksum="33ee036299daeff1df68bbf3c3f8cc7b4ad9c16d">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102494" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/494/CWE416_Use_After_Free__new_delete_char_04.cpp" language="C++" size="5301" checksum="9277de99e6de4d8efa415defc6575b609ae3d85f">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102495" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/495/CWE416_Use_After_Free__new_delete_char_05.cpp" language="C++" size="5209" checksum="470dabb74f537719f493f8abc53670055753e1f3">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102496" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/496/CWE416_Use_After_Free__new_delete_char_06.cpp" language="C++" size="5267" checksum="0cf1823532582393e312c7eb13ad339b4318c5f8">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102497" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/497/CWE416_Use_After_Free__new_delete_char_07.cpp" language="C++" size="5184" checksum="5a6f8366f33f38e7426c8b003c7e4633719c33cc">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102498" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/498/CWE416_Use_After_Free__new_delete_char_08.cpp" language="C++" size="5340" checksum="3b83d7861f2f62d31249fc6555f3c5c0a60d15c9">
      <mixed line="55" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102499" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/499/CWE416_Use_After_Free__new_delete_char_09.cpp" language="C++" size="5030" checksum="4fbc98dcaa18fda826b031133d6d62671262617a">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102500" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/500/CWE416_Use_After_Free__new_delete_char_10.cpp" language="C++" size="4918" checksum="facb9f6377166a56cf55387e0bde48f34b73710d">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102501" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/501/CWE416_Use_After_Free__new_delete_char_11.cpp" language="C++" size="5058" checksum="ccf58ee65253830ebc60a58d8ad497849d243271">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102502" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/502/CWE416_Use_After_Free__new_delete_char_12.cpp" language="C++" size="4838" checksum="ded61bc8e0c6244e976402557d1e21c47deeee9d">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102503" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/503/CWE416_Use_After_Free__new_delete_char_13.cpp" language="C++" size="5069" checksum="ad2c5e8c1f4cd594be0df2f805894bd8974ac717">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102504" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/504/CWE416_Use_After_Free__new_delete_char_14.cpp" language="C++" size="4957" checksum="305708e873d2638a72cebb03b0488a28d8e9bc28">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102505" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/505/CWE416_Use_After_Free__new_delete_char_15.cpp" language="C++" size="6349" checksum="a8e415fa12fa632cd8885b6856286c570e7d787d">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102506" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/506/CWE416_Use_After_Free__new_delete_char_16.cpp" language="C++" size="3422" checksum="a71fe6cf7fb9d8059f91065c14cf219fd334614b">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102507" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/507/CWE416_Use_After_Free__new_delete_char_17.cpp" language="C++" size="3392" checksum="a904cfabd067df4671e4c3c83e2b05e2ad12b840">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102508" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/508/CWE416_Use_After_Free__new_delete_char_18.cpp" language="C++" size="3231" checksum="4b568af8b2af5117dea5f623b312d82ae70be77a">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102509" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/509/CWE416_Use_After_Free__new_delete_char_43.cpp" language="C++" size="3273" checksum="42916d1c8c755c08709d7b5d3e740a9dbe3b9ec2">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102510" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/510/CWE416_Use_After_Free__new_delete_char_62a.cpp" language="C++" size="2893" checksum="d716d6a4d31fd54939b990a7f019af5257fb4124">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/510/CWE416_Use_After_Free__new_delete_char_62b.cpp" language="C++" size="1472" checksum="0445e2e90b2e5980803751f4e13c844b6cdc90b3"></file>
  </testcase>
  <testcase id="102511" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/511/CWE416_Use_After_Free__new_delete_char_63a.cpp" language="C++" size="2672" checksum="c0c9c537af0964f76d66b8dcda099142cef801dd"></file>
    <file path="000/102/511/CWE416_Use_After_Free__new_delete_char_63b.cpp" language="C++" size="1759" checksum="cd014dee3056d898c5f73f0e8c32eaf89b0f76aa">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102512" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/512/CWE416_Use_After_Free__new_delete_char_64a.cpp" language="C++" size="2689" checksum="b5693f43f33dcaa455303113b56c1ecc4c23847a"></file>
    <file path="000/102/512/CWE416_Use_After_Free__new_delete_char_64b.cpp" language="C++" size="2238" checksum="332400c3913467f70e5ec120ee8fff1573976a11">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102513" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/513/CWE416_Use_After_Free__new_delete_class_01.cpp" language="C++" size="3112" checksum="9b00955105b960373c38e66a2a5c9775c72b9a87">
      <mixed line="38" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102514" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/514/CWE416_Use_After_Free__new_delete_class_02.cpp" language="C++" size="5021" checksum="cce0db876fd1b356b1b96564f013eacde11cc628">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102515" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/515/CWE416_Use_After_Free__new_delete_class_03.cpp" language="C++" size="5069" checksum="40edc759b8f2ad896abd22028848d3069d8f40b3">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102516" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/516/CWE416_Use_After_Free__new_delete_class_04.cpp" language="C++" size="5553" checksum="1bea464f506081f9aa35b0438f77837041dfd850">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102517" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/517/CWE416_Use_After_Free__new_delete_class_05.cpp" language="C++" size="5461" checksum="331019ed1cb4043ecc293e73b97ca30070c88abe">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102518" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/518/CWE416_Use_After_Free__new_delete_class_06.cpp" language="C++" size="5519" checksum="a4fa327ebe91f4d8e7f76441b512a1276bc36470">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102519" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/519/CWE416_Use_After_Free__new_delete_class_07.cpp" language="C++" size="5436" checksum="e12b16632a3d9ca19f0633ffd1c492d9d7a83f69">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102520" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/520/CWE416_Use_After_Free__new_delete_class_08.cpp" language="C++" size="5592" checksum="798ca61dab47cc24884f9b15c70bc74bd7525357">
      <mixed line="56" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102521" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/521/CWE416_Use_After_Free__new_delete_class_09.cpp" language="C++" size="5282" checksum="54f1198132caad0266230d47a14a4526baa6067d">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102522" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/522/CWE416_Use_After_Free__new_delete_class_10.cpp" language="C++" size="5170" checksum="0a4c6944699820af02c2baf1348eed07e47fe4bc">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102523" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/523/CWE416_Use_After_Free__new_delete_class_11.cpp" language="C++" size="5310" checksum="225531313948e2180a6f2fdf4ff723a8477e48f3">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102524" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/524/CWE416_Use_After_Free__new_delete_class_12.cpp" language="C++" size="5114" checksum="8bb62284928c0630b26cb811c8a5598e289187f7">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102525" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/525/CWE416_Use_After_Free__new_delete_class_13.cpp" language="C++" size="5321" checksum="7fd739bb854db921402b19643b628b324bcd5c0c">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102526" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/526/CWE416_Use_After_Free__new_delete_class_14.cpp" language="C++" size="5209" checksum="0683b43b84b599d879fda92fe31994e57fbf7885">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102527" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/527/CWE416_Use_After_Free__new_delete_class_15.cpp" language="C++" size="6601" checksum="978cbd54b7f79cdb5513ef89275dc634279d1d2c">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102528" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/528/CWE416_Use_After_Free__new_delete_class_16.cpp" language="C++" size="3575" checksum="b301927b2cbe8cbfbf64d31987de6f8d26debac0">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102529" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/529/CWE416_Use_After_Free__new_delete_class_17.cpp" language="C++" size="3545" checksum="ad2406271db654f7845fdd2a77bfe307c9ec4af6">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102530" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/530/CWE416_Use_After_Free__new_delete_class_18.cpp" language="C++" size="3372" checksum="26ecf70d0ef8c1c528b716eb0c8a24fc441135b1">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102531" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/531/CWE416_Use_After_Free__new_delete_class_43.cpp" language="C++" size="3438" checksum="802f430768e05d7e2b8cfe6688c320e36981b628">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102532" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/532/CWE416_Use_After_Free__new_delete_class_62a.cpp" language="C++" size="2950" checksum="4532b7782cc47ceddf393b7aa1c9261e685bfdf9">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/532/CWE416_Use_After_Free__new_delete_class_62b.cpp" language="C++" size="1606" checksum="c236ccd8613d1ffd80323f33f26505965592ecee"></file>
  </testcase>
  <testcase id="102533" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/533/CWE416_Use_After_Free__new_delete_class_63a.cpp" language="C++" size="2831" checksum="900fa75cb52c03a2d6455dee41299ceeebd98454"></file>
    <file path="000/102/533/CWE416_Use_After_Free__new_delete_class_63b.cpp" language="C++" size="1815" checksum="b557d908ef97cd02054376f6c53c9a21067e758e">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102534" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/534/CWE416_Use_After_Free__new_delete_class_64a.cpp" language="C++" size="2824" checksum="9cc9167f6563f94c41f00571c2c84772a0d113ab"></file>
    <file path="000/102/534/CWE416_Use_After_Free__new_delete_class_64b.cpp" language="C++" size="2318" checksum="01e46470d963bfce6df4151880ad22cb641746bd">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102535" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/535/CWE416_Use_After_Free__new_delete_int64_t_01.cpp" language="C++" size="3000" checksum="eb731d7ca2d3f41cc4cc79a54bf8dfc323d04a1c">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102536" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/536/CWE416_Use_After_Free__new_delete_int64_t_02.cpp" language="C++" size="4811" checksum="15fb17a1a0e621628f0b8b0d630d7086fe3bc11f">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102537" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/537/CWE416_Use_After_Free__new_delete_int64_t_03.cpp" language="C++" size="4859" checksum="b56eb070043de2478fd3afb139e4f4663bcd0e80">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102538" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/538/CWE416_Use_After_Free__new_delete_int64_t_04.cpp" language="C++" size="5343" checksum="f1c49419de90ec8a26e656d49adba2a05cb0c007">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102539" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/539/CWE416_Use_After_Free__new_delete_int64_t_05.cpp" language="C++" size="5251" checksum="d741c8f3983084d0eea21886da93a37670870f76">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102540" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/540/CWE416_Use_After_Free__new_delete_int64_t_06.cpp" language="C++" size="5309" checksum="7186f2778d372e78a91df22fc22d75dd8b24b981">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102541" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/541/CWE416_Use_After_Free__new_delete_int64_t_07.cpp" language="C++" size="5226" checksum="1b1e11926371576d78e131ac6389963a474b6bc8">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102542" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/542/CWE416_Use_After_Free__new_delete_int64_t_08.cpp" language="C++" size="5382" checksum="522052b72090fe85f0a99ec2da566205ab2bc59b">
      <mixed line="55" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102543" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/543/CWE416_Use_After_Free__new_delete_int64_t_09.cpp" language="C++" size="5072" checksum="9afa5b0cb9e266eab2cb1be2efe44c791ab540fe">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102544" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/544/CWE416_Use_After_Free__new_delete_int64_t_10.cpp" language="C++" size="4960" checksum="2bb8fa901dab30adcb27e332a86d13f5b88e7001">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102545" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/545/CWE416_Use_After_Free__new_delete_int64_t_11.cpp" language="C++" size="5100" checksum="75b826a28e697276ebde51e875473ebed3d2b8e2">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102546" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/546/CWE416_Use_After_Free__new_delete_int64_t_12.cpp" language="C++" size="4877" checksum="b6df1a03f230ca98dc06d2d2a5742fcd3c240d81">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102547" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/547/CWE416_Use_After_Free__new_delete_int64_t_13.cpp" language="C++" size="5111" checksum="443916bfecb655ca3b5247c2608660a566231ace">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102548" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/548/CWE416_Use_After_Free__new_delete_int64_t_14.cpp" language="C++" size="4999" checksum="115e813f37bed969d4de37c85da3863f03528917">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102549" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/549/CWE416_Use_After_Free__new_delete_int64_t_15.cpp" language="C++" size="6391" checksum="1d847024829687aa6c9917e9b02c38ebd6b05cc1">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102550" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/550/CWE416_Use_After_Free__new_delete_int64_t_16.cpp" language="C++" size="3451" checksum="da500b8d8b01ecdba89764d587712064f70e1d87">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102551" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/551/CWE416_Use_After_Free__new_delete_int64_t_17.cpp" language="C++" size="3421" checksum="1b02371915a4c24079ff7f2d48c57aa29020c1de">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102552" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/552/CWE416_Use_After_Free__new_delete_int64_t_18.cpp" language="C++" size="3260" checksum="a1d3741cb94572f935f095fe8dee4b76b4253a48">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102553" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/553/CWE416_Use_After_Free__new_delete_int64_t_43.cpp" language="C++" size="3311" checksum="2dc1c6d8094785c1e40bcce777f5260849692911">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102554" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/554/CWE416_Use_After_Free__new_delete_int64_t_62a.cpp" language="C++" size="2922" checksum="0817665bc333a0ba186a8f21dd1b0d9644ba9dc4">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/554/CWE416_Use_After_Free__new_delete_int64_t_62b.cpp" language="C++" size="1496" checksum="385df9379fec81aa9e56ac5531ed277e51effc43"></file>
  </testcase>
  <testcase id="102555" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/555/CWE416_Use_After_Free__new_delete_int64_t_63a.cpp" language="C++" size="2708" checksum="8ab4978a3dac0e7d14b3f879e77d1eeeb60b545e"></file>
    <file path="000/102/555/CWE416_Use_After_Free__new_delete_int64_t_63b.cpp" language="C++" size="1785" checksum="3b05a7236891bc58dd75d83849939845adc59187">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102556" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/556/CWE416_Use_After_Free__new_delete_int64_t_64a.cpp" language="C++" size="2716" checksum="016d2417e3d51d0b7ae3ce1356f06b85f8f3c2c2"></file>
    <file path="000/102/556/CWE416_Use_After_Free__new_delete_int64_t_64b.cpp" language="C++" size="2273" checksum="bb2e539e42591dae92ac2f5baae85e8ffc25d023">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102557" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/557/CWE416_Use_After_Free__new_delete_int_01.cpp" language="C++" size="2948" checksum="9014b1e5eb4ab94d0f9bb8291064f3d034c67507">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102558" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/558/CWE416_Use_After_Free__new_delete_int_02.cpp" language="C++" size="4734" checksum="1d968685bde28a03d5d9e5531c3cda9978b8dd17">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102559" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/559/CWE416_Use_After_Free__new_delete_int_03.cpp" language="C++" size="4782" checksum="b095355e591f04f76c2b79bb607f6b9ae4d32071">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102560" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/560/CWE416_Use_After_Free__new_delete_int_04.cpp" language="C++" size="5266" checksum="2023baefbe1b4e764c901f2341f412f44d679924">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102561" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/561/CWE416_Use_After_Free__new_delete_int_05.cpp" language="C++" size="5174" checksum="90c20f79bf8b7babb940782b1eecf19016fe334e">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102562" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/562/CWE416_Use_After_Free__new_delete_int_06.cpp" language="C++" size="5232" checksum="d2cd0884e7947db5874aeabb991bf2a3d833433b">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102563" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/563/CWE416_Use_After_Free__new_delete_int_07.cpp" language="C++" size="5149" checksum="723e8a01eaa7779c0faf97fb2b885996668b2820">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102564" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/564/CWE416_Use_After_Free__new_delete_int_08.cpp" language="C++" size="5305" checksum="ceef1ddbbc95e363ef3a9a5bd4da4004bc7a9dea">
      <mixed line="55" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102565" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/565/CWE416_Use_After_Free__new_delete_int_09.cpp" language="C++" size="4995" checksum="4d9837942530566d08261b9a3bcb97b7be8c5ed9">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102566" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/566/CWE416_Use_After_Free__new_delete_int_10.cpp" language="C++" size="4883" checksum="6b98d9dd9a7cac3bb19189d722d6fb7f05d77b9a">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102567" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/567/CWE416_Use_After_Free__new_delete_int_11.cpp" language="C++" size="5023" checksum="9f0541a5a41b113d423efc85b7046bc565993b1e">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102568" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/568/CWE416_Use_After_Free__new_delete_int_12.cpp" language="C++" size="4802" checksum="94a1a60a736bef9806233d7349ce79930eb860b7">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102569" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/569/CWE416_Use_After_Free__new_delete_int_13.cpp" language="C++" size="5034" checksum="45841d702237540b2a58f3c6c3dd7c9f9a5e912d">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102570" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/570/CWE416_Use_After_Free__new_delete_int_14.cpp" language="C++" size="4922" checksum="ff93f8c68f5de7c2dc663c6fbc8c240d74695708">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102571" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/571/CWE416_Use_After_Free__new_delete_int_15.cpp" language="C++" size="6314" checksum="9bb10b8e04985a560933091c663cae05e99fc27c">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102572" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/572/CWE416_Use_After_Free__new_delete_int_16.cpp" language="C++" size="3399" checksum="b9a22a99cac5bc6f6642244ca0f1028bb47cfbbb">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102573" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/573/CWE416_Use_After_Free__new_delete_int_17.cpp" language="C++" size="3369" checksum="4f15cf4a64bef5f0242722c0664845023aee24cf">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102574" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/574/CWE416_Use_After_Free__new_delete_int_18.cpp" language="C++" size="3208" checksum="44d473a958c86f291f1d3b0eaffdb2e12c631503">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102575" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/575/CWE416_Use_After_Free__new_delete_int_43.cpp" language="C++" size="3247" checksum="2429abcf14538cbe2a845f2de7f0f5a8bdb0ffb0">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102576" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/576/CWE416_Use_After_Free__new_delete_int_62a.cpp" language="C++" size="2876" checksum="236192541bf1d0386cd499107c734d4ccc80a622">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/576/CWE416_Use_After_Free__new_delete_int_62b.cpp" language="C++" size="1458" checksum="05c2f96ba1b7af8d7f706cc8a9bfa1b5f67e6b1c"></file>
  </testcase>
  <testcase id="102577" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/577/CWE416_Use_After_Free__new_delete_int_63a.cpp" language="C++" size="2654" checksum="17e04bbfdf8fd76e6f188f902d2af07bfe280db9"></file>
    <file path="000/102/577/CWE416_Use_After_Free__new_delete_int_63b.cpp" language="C++" size="1743" checksum="7ceca6c5a78b88cd4cbfdce363a88d6a0e0fca91">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102578" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/578/CWE416_Use_After_Free__new_delete_int_64a.cpp" language="C++" size="2674" checksum="cb08f58ed1654fce810cc6597e9eb93247e598b1"></file>
    <file path="000/102/578/CWE416_Use_After_Free__new_delete_int_64b.cpp" language="C++" size="2219" checksum="68b604279baf2c4e426b231bcf4fe7ba090a6a09">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102579" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/579/CWE416_Use_After_Free__new_delete_long_01.cpp" language="C++" size="2962" checksum="8f20376684bdd410bc9f77fdfc5d8e1fbde4dcbb">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102580" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/580/CWE416_Use_After_Free__new_delete_long_02.cpp" language="C++" size="4755" checksum="41a0640defce0cb5cf7c1453583950c15e89c376">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102581" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/581/CWE416_Use_After_Free__new_delete_long_03.cpp" language="C++" size="4803" checksum="a5a4c1e2ae0156c7bc2d13f6c5119e193c55855d">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102582" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/582/CWE416_Use_After_Free__new_delete_long_04.cpp" language="C++" size="5287" checksum="24ebbb2454ee4cc721a1e50eee633f0d682044f9">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102583" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/583/CWE416_Use_After_Free__new_delete_long_05.cpp" language="C++" size="5195" checksum="fae76c4fa7d2487e1304367a97cfe690812a41f2">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102584" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/584/CWE416_Use_After_Free__new_delete_long_06.cpp" language="C++" size="5253" checksum="0d07eb96dc71c35930cd64b1d390c961ed998df9">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102585" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/585/CWE416_Use_After_Free__new_delete_long_07.cpp" language="C++" size="5170" checksum="f124543686377e6052d13ecb990bb14f9f49a510">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102586" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/586/CWE416_Use_After_Free__new_delete_long_08.cpp" language="C++" size="5326" checksum="2fa3a0d59ab3fd95b172eac383c60cae03dee3a3">
      <mixed line="55" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102587" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/587/CWE416_Use_After_Free__new_delete_long_09.cpp" language="C++" size="5016" checksum="43f5e064e6f2adcfbe175fdc9e3b285aa7f5bac2">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102588" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/588/CWE416_Use_After_Free__new_delete_long_10.cpp" language="C++" size="4904" checksum="4eb373baf6d5d116b8c05b837cba1a2ba60e378a">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102589" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/589/CWE416_Use_After_Free__new_delete_long_11.cpp" language="C++" size="5044" checksum="70507d15e7477aa8d2c8a3f8d0b103caa8948c9c">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102590" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/590/CWE416_Use_After_Free__new_delete_long_12.cpp" language="C++" size="4823" checksum="987293b7ea728790bc19f6b0d29c14c74ea12f1e">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102591" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/591/CWE416_Use_After_Free__new_delete_long_13.cpp" language="C++" size="5055" checksum="d800f02de1067fd4590135b025999dc34ee3388c">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102592" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/592/CWE416_Use_After_Free__new_delete_long_14.cpp" language="C++" size="4943" checksum="2307b93835b8647431948579c58004caa92ba6b4">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102593" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/593/CWE416_Use_After_Free__new_delete_long_15.cpp" language="C++" size="6335" checksum="a2b741c85fe50cbb13ace1edb5d32acbda272b03">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102594" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/594/CWE416_Use_After_Free__new_delete_long_16.cpp" language="C++" size="3413" checksum="27f9291af676d29bc0f46549a45f4d11aeb8aab8">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102595" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/595/CWE416_Use_After_Free__new_delete_long_17.cpp" language="C++" size="3383" checksum="4bf9177fb472e5d389a0def8c09d61cfa77989a0">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102596" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/596/CWE416_Use_After_Free__new_delete_long_18.cpp" language="C++" size="3222" checksum="e84c9e3ad2d4c605e2b2d374d8402ccf750fa6e6">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102597" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/597/CWE416_Use_After_Free__new_delete_long_43.cpp" language="C++" size="3264" checksum="aee3535c04ed0be9011300f252c38a552aeab389">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102598" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/598/CWE416_Use_After_Free__new_delete_long_62a.cpp" language="C++" size="2887" checksum="a619418f92612a3221233a17f87352658dc665a8">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/598/CWE416_Use_After_Free__new_delete_long_62b.cpp" language="C++" size="1469" checksum="8f6c00a20e71d9f667b709365ca085942af29ec9"></file>
  </testcase>
  <testcase id="102599" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/599/CWE416_Use_After_Free__new_delete_long_63a.cpp" language="C++" size="2669" checksum="27c49f4d6fb8cc64cfe7968e50f4b0016ca77ad9"></file>
    <file path="000/102/599/CWE416_Use_After_Free__new_delete_long_63b.cpp" language="C++" size="1753" checksum="71b4ddeb64cbb1873266a3a6208d6462f7ff7bf2">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102600" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/600/CWE416_Use_After_Free__new_delete_long_64a.cpp" language="C++" size="2686" checksum="856d63d2db470919cdc0c4ec3459183fc77b917f"></file>
    <file path="000/102/600/CWE416_Use_After_Free__new_delete_long_64b.cpp" language="C++" size="2232" checksum="27b8d06c2d922d79f63b29b6bfbc707625e51680">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102601" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/601/CWE416_Use_After_Free__new_delete_struct_01.cpp" language="C++" size="3111" checksum="2313c3c61b746f713f81c77bf94b279c991c3322">
      <mixed line="38" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102602" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/602/CWE416_Use_After_Free__new_delete_struct_02.cpp" language="C++" size="5019" checksum="c5f4ab7d5b962c5b9bacc0b9346fb16fc3ada46e">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102603" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/603/CWE416_Use_After_Free__new_delete_struct_03.cpp" language="C++" size="5067" checksum="3aa8fea9a20f8607eb0a8a042dac0594dbd535bb">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102604" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/604/CWE416_Use_After_Free__new_delete_struct_04.cpp" language="C++" size="5551" checksum="de462a2ccdf51842281e84d48570e04523e92019">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102605" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/605/CWE416_Use_After_Free__new_delete_struct_05.cpp" language="C++" size="5459" checksum="b651892d1b4fbfc2997a377f7f1f47b5189cdb89">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102606" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/606/CWE416_Use_After_Free__new_delete_struct_06.cpp" language="C++" size="5517" checksum="fcf1dbc1835d16965e3683a4f99be26ca0282052">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102607" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/607/CWE416_Use_After_Free__new_delete_struct_07.cpp" language="C++" size="5434" checksum="5cf17938959a2b4c36bf69b7adc1d848ad7e435b">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102608" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/608/CWE416_Use_After_Free__new_delete_struct_08.cpp" language="C++" size="5590" checksum="2232aba3550cf3ece57a68b13d031fb6a6bd0102">
      <mixed line="56" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102609" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/609/CWE416_Use_After_Free__new_delete_struct_09.cpp" language="C++" size="5280" checksum="c50c16e4460a114cf266ecdf32180c0594cf2cc4">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102610" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/610/CWE416_Use_After_Free__new_delete_struct_10.cpp" language="C++" size="5168" checksum="2daf8ef37a6342ecabe61f6d33fb7230205ab1d5">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102611" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/611/CWE416_Use_After_Free__new_delete_struct_11.cpp" language="C++" size="5308" checksum="b25c433768ec4645976379bc96832ff6f690f4d9">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102612" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/612/CWE416_Use_After_Free__new_delete_struct_12.cpp" language="C++" size="5111" checksum="2964fca686b10c602e36bd160f01e3414b669329">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102613" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/613/CWE416_Use_After_Free__new_delete_struct_13.cpp" language="C++" size="5319" checksum="ba71d0e0e01439d1514d1a3ba93c7edb39c1b597">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102614" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/614/CWE416_Use_After_Free__new_delete_struct_14.cpp" language="C++" size="5207" checksum="6f7147ab7cf0faf97dedcd63575befdf05ff8434">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102615" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/615/CWE416_Use_After_Free__new_delete_struct_15.cpp" language="C++" size="6599" checksum="718e680e643b0c6ef9336d41c2277c60afc52c5e">
      <mixed line="49" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102616" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/616/CWE416_Use_After_Free__new_delete_struct_16.cpp" language="C++" size="3574" checksum="464f4dec83005e55553f511dc0e8ca0c3a71bd82">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102617" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/617/CWE416_Use_After_Free__new_delete_struct_17.cpp" language="C++" size="3544" checksum="a81826bee5caed537e32c2b8f382087e3a8fc616">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102618" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/618/CWE416_Use_After_Free__new_delete_struct_18.cpp" language="C++" size="3371" checksum="fc17ae772d2afcfccd43e2416d79e1ddf06a0ebd">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102619" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/619/CWE416_Use_After_Free__new_delete_struct_43.cpp" language="C++" size="3440" checksum="65444650b92b3e806ef4789ee25265913febebcc">
      <mixed line="43" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102620" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/620/CWE416_Use_After_Free__new_delete_struct_62a.cpp" language="C++" size="2949" checksum="a1cc7886fc237713144e901c70eb733b3fb3be93">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/620/CWE416_Use_After_Free__new_delete_struct_62b.cpp" language="C++" size="1614" checksum="244038188de9adf3090c461b19da3d2f1b18300c"></file>
  </testcase>
  <testcase id="102621" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/621/CWE416_Use_After_Free__new_delete_struct_63a.cpp" language="C++" size="2843" checksum="62d4ed21eea2b4af53edf91c6d9605f1e3fcde93"></file>
    <file path="000/102/621/CWE416_Use_After_Free__new_delete_struct_63b.cpp" language="C++" size="1813" checksum="48a05c0a9aac17970b83b94e8757a0e9ff41b005">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102622" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/622/CWE416_Use_After_Free__new_delete_struct_64a.cpp" language="C++" size="2833" checksum="9a752f22dd8d07df58666ed1c51b4971f080931d"></file>
    <file path="000/102/622/CWE416_Use_After_Free__new_delete_struct_64b.cpp" language="C++" size="2319" checksum="322ee4314ac85d92b307c7afefd048f42e4a02df">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102623" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/623/CWE416_Use_After_Free__new_delete_wchar_t_01.cpp" language="C++" size="2997" checksum="5104fd5fe42346018735ff25e14b9e50de24be19">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102624" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/624/CWE416_Use_After_Free__new_delete_wchar_t_02.cpp" language="C++" size="4807" checksum="d009676de58774e8443ae0bc86ec41750fc31920">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102625" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/625/CWE416_Use_After_Free__new_delete_wchar_t_03.cpp" language="C++" size="4855" checksum="2edee7804ea1caf4569994711ab9a163ccbdef83">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102626" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/626/CWE416_Use_After_Free__new_delete_wchar_t_04.cpp" language="C++" size="5339" checksum="28f69341ac4b77905bb65ee1e8306db6dd0701fd">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102627" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/627/CWE416_Use_After_Free__new_delete_wchar_t_05.cpp" language="C++" size="5247" checksum="7990d942e160b0658a036a9c496c108cda57bff6">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102628" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/628/CWE416_Use_After_Free__new_delete_wchar_t_06.cpp" language="C++" size="5305" checksum="6a43cd2661e98a7570bc5fa8f44770c1bf04c364">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102629" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/629/CWE416_Use_After_Free__new_delete_wchar_t_07.cpp" language="C++" size="5222" checksum="befbe4667900fc71b81436c07cc18aa49032ae82">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102630" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/630/CWE416_Use_After_Free__new_delete_wchar_t_08.cpp" language="C++" size="5378" checksum="80fc09d550ecbb05974390b991a31c1207335e3a">
      <mixed line="55" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102631" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/631/CWE416_Use_After_Free__new_delete_wchar_t_09.cpp" language="C++" size="5068" checksum="c7c1b3f48c32761a2ffc45a3a7c946cb219eb94f">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102632" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/632/CWE416_Use_After_Free__new_delete_wchar_t_10.cpp" language="C++" size="4956" checksum="a95d01f8193ca7314c4d4beba1c6a3f43a87bc7f">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102633" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/633/CWE416_Use_After_Free__new_delete_wchar_t_11.cpp" language="C++" size="5096" checksum="b1cfee6429525a6157c52baefcb84b67ec001cd6">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102634" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/634/CWE416_Use_After_Free__new_delete_wchar_t_12.cpp" language="C++" size="4874" checksum="285ab03fad986f85120dfb62b1d261dec523cd92">
      <mixed line="47" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102635" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/635/CWE416_Use_After_Free__new_delete_wchar_t_13.cpp" language="C++" size="5107" checksum="fc137b0648968db91686c7a3a55cb710d810fea6">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102636" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/636/CWE416_Use_After_Free__new_delete_wchar_t_14.cpp" language="C++" size="4995" checksum="0bb298f6ea6c16287acc4e01e7f04114d89c24c7">
      <mixed line="41" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102637" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/637/CWE416_Use_After_Free__new_delete_wchar_t_15.cpp" language="C++" size="6387" checksum="19b26beb24dcd01bec96885dcd146e6117bdb6eb">
      <mixed line="48" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102638" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/638/CWE416_Use_After_Free__new_delete_wchar_t_16.cpp" language="C++" size="3448" checksum="20d4a7019b0398216b7ff91aa1c290deaa1492f1">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102639" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/639/CWE416_Use_After_Free__new_delete_wchar_t_17.cpp" language="C++" size="3418" checksum="04cdb547a84661091259df547de33f437c228d95">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102640" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/640/CWE416_Use_After_Free__new_delete_wchar_t_18.cpp" language="C++" size="3257" checksum="968e9d07993df238939b528f8b50609cd822f2a4">
      <mixed line="40" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102641" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/641/CWE416_Use_After_Free__new_delete_wchar_t_43.cpp" language="C++" size="3308" checksum="bcca41977aadd474db608d953fd580b11d8eb5bd">
      <mixed line="42" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102642" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/642/CWE416_Use_After_Free__new_delete_wchar_t_62a.cpp" language="C++" size="2916" checksum="0a74732d639fb6d10ab627ad8c35f9650b91f59c">
      <mixed line="37" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/642/CWE416_Use_After_Free__new_delete_wchar_t_62b.cpp" language="C++" size="1499" checksum="96bba8cb1a40b242288af133e110a2d980d17893"></file>
  </testcase>
  <testcase id="102643" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/643/CWE416_Use_After_Free__new_delete_wchar_t_63a.cpp" language="C++" size="2711" checksum="accda57ca2d9d9ba52a1caf12b1373d61ce0066b"></file>
    <file path="000/102/643/CWE416_Use_After_Free__new_delete_wchar_t_63b.cpp" language="C++" size="1779" checksum="fe5e42a80d004ca404316c136ea9cb694853a81e">
      <mixed line="31" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102644" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> BadSource:  Allocate data using new, initialize memory block, and Deallocate data using delete<br/> GoodSource: Allocate data using new and initialize memory block<br/> Sinks:<br/> GoodSink: Do nothing<br/> BadSink : Use data after delete<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/644/CWE416_Use_After_Free__new_delete_wchar_t_64a.cpp" language="C++" size="2719" checksum="f4ce6a8faa39c3a82dc0b432354262d8aa08ae7f"></file>
    <file path="000/102/644/CWE416_Use_After_Free__new_delete_wchar_t_64b.cpp" language="C++" size="2267" checksum="54b7d48bd04cca363f991ebc82c2e1b0709d8d36">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102645" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[Use After Free]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/645/CWE416_Use_After_Free__operator_equals_01_bad.cpp" language="C++" size="2331" checksum="cdd3227a76207578840c4bf93895dee9122a6c27">
      <mixed line="52" name="CWE-416: Use After Free"></mixed>
    </file>
    <file path="000/102/645/CWE416_Use_After_Free__operator_equals_01_good1.cpp" language="C++" size="2176" checksum="4d7d288a0bf887cacfaadc071fb515ae587d60f6"></file>
  </testcase>
  <testcase id="102646" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/646/CWE416_Use_After_Free__return_freed_ptr_01.c" language="C" size="3415" checksum="1b256d3e8c7d24101ec787e1d64584c25b50356a">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102647" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/647/CWE416_Use_After_Free__return_freed_ptr_02.c" language="C" size="4303" checksum="cad5c50d9ff9e4cc9d0b5301d1047f522b31790f">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102648" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/648/CWE416_Use_After_Free__return_freed_ptr_03.c" language="C" size="4324" checksum="ffe4193033a3d0e79e2d24ee539694cf83670982">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102649" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/649/CWE416_Use_After_Free__return_freed_ptr_04.c" language="C" size="4689" checksum="4fa3a8b84dbe963afd8861b40e3763518ba4c245">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102650" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/650/CWE416_Use_After_Free__return_freed_ptr_05.c" language="C" size="4660" checksum="a1215eec5c1e1bc6b0926ce710c0322b358d3e4e">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102651" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/651/CWE416_Use_After_Free__return_freed_ptr_06.c" language="C" size="4630" checksum="949f0731f5640f30d22fd014d4e586b0c85cb98c">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102652" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/652/CWE416_Use_After_Free__return_freed_ptr_07.c" language="C" size="4610" checksum="2b40c541b685256a3384365acea4f26534505df6">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102653" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/653/CWE416_Use_After_Free__return_freed_ptr_08.c" language="C" size="4710" checksum="18e1cccbf404e6c612608f2b78b6e16828061de8">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102654" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/654/CWE416_Use_After_Free__return_freed_ptr_09.c" language="C" size="4418" checksum="9f0f0823d89f22f64b854e3f68d956c41a8e986f">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102655" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/655/CWE416_Use_After_Free__return_freed_ptr_10.c" language="C" size="4369" checksum="1eb14d6c677adddd1bc128682352121a392be445">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102656" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/656/CWE416_Use_After_Free__return_freed_ptr_11.c" language="C" size="4432" checksum="ff31d2d12f683ca1ba1d4b3c85aa489543b4e423">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102657" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/657/CWE416_Use_After_Free__return_freed_ptr_12.c" language="C" size="4610" checksum="abce2415bd4e462508f5687c088a8c90fb6fc834">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102658" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/658/CWE416_Use_After_Free__return_freed_ptr_13.c" language="C" size="4436" checksum="44ff65667b3fc246f7c7a4473f7d3648c3428f72">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102659" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/659/CWE416_Use_After_Free__return_freed_ptr_14.c" language="C" size="4387" checksum="8174f39be76eda92829e7bc3aec0e1586dfaff21">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102660" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/660/CWE416_Use_After_Free__return_freed_ptr_15.c" language="C" size="4580" checksum="39c03c6b7f9e4771a20ae7c076a3c4f5bdefb1c6">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102661" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/661/CWE416_Use_After_Free__return_freed_ptr_16.c" language="C" size="3644" checksum="41c50af8d857dd8485a96a78c20cb5d2bea91359">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102662" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/662/CWE416_Use_After_Free__return_freed_ptr_17.c" language="C" size="3669" checksum="30df141b066294700cb278c3ac29270bbfa59b0f">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="102663" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 416 Use After Free<br/> Sinks:<br/> GoodSink: Use a block of memory returned from a function<br/> BadSink : Use a block of memory returned from a function after it has been freed<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/102/663/CWE416_Use_After_Free__return_freed_ptr_18.c" language="C" size="3539" checksum="d53bc7020a12b344af56dfcb34abbc4f9e9094b5">
      <mixed line="34" name="CWE-416: Use After Free"></mixed>
    </file>
  </testcase>
  <testcase id="104369" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/369/CWE467_Use_of_sizeof_on_Pointer_Type__char_01.c" language="C" size="2035" checksum="84cd567c1d10b207317b30f9c0c71ea7933b4eda">
      <mixed line="25" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104370" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/370/CWE467_Use_of_sizeof_on_Pointer_Type__char_02.c" language="C" size="2762" checksum="38810247445e052a7e60cb472f2d4a76446bda5d">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104371" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/371/CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" language="C" size="2783" checksum="ec407833166233d11d3619733ce2d4953490b47e">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104372" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/372/CWE467_Use_of_sizeof_on_Pointer_Type__char_04.c" language="C" size="3148" checksum="22a08fe74e9928cefca19e3f20a85904cb9c12ec">
      <mixed line="33" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104373" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/373/CWE467_Use_of_sizeof_on_Pointer_Type__char_05.c" language="C" size="3119" checksum="74004fb56bcb6e75773aa0e3ef557e52d2960beb">
      <mixed line="33" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104374" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/374/CWE467_Use_of_sizeof_on_Pointer_Type__char_06.c" language="C" size="3089" checksum="3d734ab1f1da4148d4d973d6cec854f1ec0a5f7d">
      <mixed line="32" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104375" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/375/CWE467_Use_of_sizeof_on_Pointer_Type__char_07.c" language="C" size="3069" checksum="4bd1cdb755bc2d54636ca1b428e7ad2ea1a1fdfb">
      <mixed line="32" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104376" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/376/CWE467_Use_of_sizeof_on_Pointer_Type__char_08.c" language="C" size="3169" checksum="16497f622f943c6ccfd7de7f12d9f9abc71d1758">
      <mixed line="40" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104377" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/377/CWE467_Use_of_sizeof_on_Pointer_Type__char_09.c" language="C" size="2877" checksum="91d4e4ef16cf655f4fe1d087387a3de4fe129c7a">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104378" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/378/CWE467_Use_of_sizeof_on_Pointer_Type__char_10.c" language="C" size="2828" checksum="0112331f5669d4083d2792106dce1824b3e67f1c">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104379" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/379/CWE467_Use_of_sizeof_on_Pointer_Type__char_11.c" language="C" size="2891" checksum="c5246e195230c6080ee1026bdb4b2c0642d41b08">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104380" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/380/CWE467_Use_of_sizeof_on_Pointer_Type__char_12.c" language="C" size="2916" checksum="ee05d438cac9b8d55782b79becc4337fe590628c">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104381" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/381/CWE467_Use_of_sizeof_on_Pointer_Type__char_13.c" language="C" size="2895" checksum="f2f2ca1e741a4c67032dde09bfe493cfda71328c">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104382" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/382/CWE467_Use_of_sizeof_on_Pointer_Type__char_14.c" language="C" size="2846" checksum="73530b468ad1d4ee924a093a0d1e5ccbde10358f">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104383" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/383/CWE467_Use_of_sizeof_on_Pointer_Type__char_15.c" language="C" size="3051" checksum="f55b2f186d6e582e2585b28fbb381feffb44ced5">
      <mixed line="28" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104384" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/384/CWE467_Use_of_sizeof_on_Pointer_Type__char_16.c" language="C" size="2256" checksum="00645aeae0312d3cefb35fb3a73e04fd89e29f29">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104385" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/385/CWE467_Use_of_sizeof_on_Pointer_Type__char_17.c" language="C" size="2281" checksum="0dff75b6092f5fe065a509266475e9927e3cadd5">
      <mixed line="28" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104386" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/386/CWE467_Use_of_sizeof_on_Pointer_Type__char_18.c" language="C" size="2159" checksum="c52dea35bc2910e1ff3390bb375a29151a99d193">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104387" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/387/CWE467_Use_of_sizeof_on_Pointer_Type__int_01.c" language="C" size="2001" checksum="2cae814307cd6af108509d94863beeb63c6f7b88">
      <mixed line="25" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104388" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/388/CWE467_Use_of_sizeof_on_Pointer_Type__int_02.c" language="C" size="2714" checksum="6366ce975f72def4886cf426781e4f5eb39c0aaa">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104389" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/389/CWE467_Use_of_sizeof_on_Pointer_Type__int_03.c" language="C" size="2735" checksum="e4acd56794c42505ec16e87a6066d02a42de6f84">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104390" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/390/CWE467_Use_of_sizeof_on_Pointer_Type__int_04.c" language="C" size="3100" checksum="ff3a4dae03f6516deb58b6b9d3a24d48be379feb">
      <mixed line="33" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104391" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/391/CWE467_Use_of_sizeof_on_Pointer_Type__int_05.c" language="C" size="3071" checksum="ae30c19ffb15694bc96deecd034db47a9b3f8236">
      <mixed line="33" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104392" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/392/CWE467_Use_of_sizeof_on_Pointer_Type__int_06.c" language="C" size="3041" checksum="efa072b9b84cc592019f3faf6fa5836b3ac995dd">
      <mixed line="32" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104393" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/393/CWE467_Use_of_sizeof_on_Pointer_Type__int_07.c" language="C" size="3021" checksum="019b3f0abdee25bc0e2c5d09fcfd26d1f8fa7e37">
      <mixed line="32" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104394" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/394/CWE467_Use_of_sizeof_on_Pointer_Type__int_08.c" language="C" size="3121" checksum="ccb0df6b6a0b8f572b12cfbd3aa76fe16021c912">
      <mixed line="40" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104395" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/395/CWE467_Use_of_sizeof_on_Pointer_Type__int_09.c" language="C" size="2829" checksum="5ec3e0f0bc4ec548f0d3cdd3d47952eb1c20c9fc">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104396" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/396/CWE467_Use_of_sizeof_on_Pointer_Type__int_10.c" language="C" size="2780" checksum="90d4c0c74d5dbf1dfeb7cba810cdd37ecbbe4c66">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104397" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/397/CWE467_Use_of_sizeof_on_Pointer_Type__int_11.c" language="C" size="2843" checksum="f2142ef771436f36605460009d6bb5b92521f94a">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104398" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/398/CWE467_Use_of_sizeof_on_Pointer_Type__int_12.c" language="C" size="2854" checksum="842a878f8f6b6b21f31a385c652db53444e09381">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104399" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/399/CWE467_Use_of_sizeof_on_Pointer_Type__int_13.c" language="C" size="2847" checksum="f640e435e20e40349196c8c195b89142161efeec">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104400" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/400/CWE467_Use_of_sizeof_on_Pointer_Type__int_14.c" language="C" size="2798" checksum="d92f427b04a934477a19a5d643151a114f841e94">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104401" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/401/CWE467_Use_of_sizeof_on_Pointer_Type__int_15.c" language="C" size="3003" checksum="9832ffac32b9f6d9192180fe703adf9b2ff171ea">
      <mixed line="28" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104402" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/402/CWE467_Use_of_sizeof_on_Pointer_Type__int_16.c" language="C" size="2222" checksum="2850a6ab2d80442354a22730277549c0de17a543">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104403" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/403/CWE467_Use_of_sizeof_on_Pointer_Type__int_17.c" language="C" size="2247" checksum="8d6353557b1a8cb3694bcbc73b828bb84880bb63">
      <mixed line="28" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104404" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/404/CWE467_Use_of_sizeof_on_Pointer_Type__int_18.c" language="C" size="2125" checksum="ad497996f4e679d8641921fd01b582f903cd369e">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104405" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/405/CWE467_Use_of_sizeof_on_Pointer_Type__short_01.c" language="C" size="2049" checksum="e7e9135151699b745758cb4d7376769a3cc05380">
      <mixed line="25" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104406" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/406/CWE467_Use_of_sizeof_on_Pointer_Type__short_02.c" language="C" size="2780" checksum="7123a9c44a13f0e8c745c916392a8959b923adf5">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104407" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/407/CWE467_Use_of_sizeof_on_Pointer_Type__short_03.c" language="C" size="2801" checksum="0458a8af4f1f114765ec1a14f3a9c039e9b57d0b">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104408" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/408/CWE467_Use_of_sizeof_on_Pointer_Type__short_04.c" language="C" size="3166" checksum="c5c18af061d99d742919672ec9b048dcd65daeca">
      <mixed line="33" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104409" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/409/CWE467_Use_of_sizeof_on_Pointer_Type__short_05.c" language="C" size="3137" checksum="2e5a7af8512a7bdc3c1d47b97ad0fc5bd13ce68d">
      <mixed line="33" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104410" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/410/CWE467_Use_of_sizeof_on_Pointer_Type__short_06.c" language="C" size="3107" checksum="192788a9f708dfbb09076d1fb43d463db9ee190e">
      <mixed line="32" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104411" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/411/CWE467_Use_of_sizeof_on_Pointer_Type__short_07.c" language="C" size="3087" checksum="ff79cd87ded8c139ab9ececb6a7d6c19f0f5ddcc">
      <mixed line="32" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104412" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/412/CWE467_Use_of_sizeof_on_Pointer_Type__short_08.c" language="C" size="3187" checksum="1fb3072765a8798d4f99f5c2102b55bcf7b3bbf8">
      <mixed line="40" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104413" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/413/CWE467_Use_of_sizeof_on_Pointer_Type__short_09.c" language="C" size="2895" checksum="761a6107a1dc7818a9ede51ab9ab9f1c33b74434">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104414" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/414/CWE467_Use_of_sizeof_on_Pointer_Type__short_10.c" language="C" size="2846" checksum="da25aea78255eab934ca21fad2423c598f12aa7d">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104415" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/415/CWE467_Use_of_sizeof_on_Pointer_Type__short_11.c" language="C" size="2909" checksum="43c2ed651ec2a74698ac521bbba26eb69e0f7ea5">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104416" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/416/CWE467_Use_of_sizeof_on_Pointer_Type__short_12.c" language="C" size="2938" checksum="2a1668d0d524252911f8ff66c43a02505888295e">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104417" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/417/CWE467_Use_of_sizeof_on_Pointer_Type__short_13.c" language="C" size="2913" checksum="5e727151f8b30a6f203c22a687f406ff3d36894f">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104418" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/418/CWE467_Use_of_sizeof_on_Pointer_Type__short_14.c" language="C" size="2864" checksum="bef355a12bea3a92824734086fa0ea6d8720ad3e">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104419" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/419/CWE467_Use_of_sizeof_on_Pointer_Type__short_15.c" language="C" size="3069" checksum="583636c61bb8e6a79a9c3a4558a191057cc8ab53">
      <mixed line="28" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104420" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/420/CWE467_Use_of_sizeof_on_Pointer_Type__short_16.c" language="C" size="2270" checksum="b8efe22d820dfb1a710a1addeb2429ee1df5530a">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104421" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/421/CWE467_Use_of_sizeof_on_Pointer_Type__short_17.c" language="C" size="2295" checksum="abf8b4a61daa574579aee418c67b7e002912163e">
      <mixed line="28" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104422" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/422/CWE467_Use_of_sizeof_on_Pointer_Type__short_18.c" language="C" size="2173" checksum="7d719de6cfd017766e76fa3e4ff247b77d807755">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase id="104532" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/532/CWE476_NULL_Pointer_Dereference__binary_if_01.c" language="C" size="2289" checksum="5b8cae53cd720ffeb994a033d73d0162dd117b9e">
      <mixed line="26" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104533" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/533/CWE476_NULL_Pointer_Dereference__binary_if_02.c" language="C" size="3140" checksum="39d49dedd7cfc2cbd1a3823ce0b651f9df03d0fb">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104534" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/534/CWE476_NULL_Pointer_Dereference__binary_if_03.c" language="C" size="3161" checksum="72b9d2c5afedd85942522fbb905a3f0a3d632848">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104535" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/535/CWE476_NULL_Pointer_Dereference__binary_if_04.c" language="C" size="3526" checksum="afd200d6418e963e7129e0439d996638cf159787">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104536" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/536/CWE476_NULL_Pointer_Dereference__binary_if_05.c" language="C" size="3497" checksum="8199c3b30795268f7e322f31787f8472f0431b34">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104537" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/537/CWE476_NULL_Pointer_Dereference__binary_if_06.c" language="C" size="3467" checksum="734a8e0e05e4422c3c13c1cea09b1601cd5d69c1">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104538" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/538/CWE476_NULL_Pointer_Dereference__binary_if_07.c" language="C" size="3447" checksum="a1ef9e19037127a01968e7a11b8bb02276f336ee">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104539" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/539/CWE476_NULL_Pointer_Dereference__binary_if_08.c" language="C" size="3547" checksum="86c769db6784950a896a9b23c4a66ed9abc2ad10">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104540" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/540/CWE476_NULL_Pointer_Dereference__binary_if_09.c" language="C" size="3255" checksum="e981d9261154927ce5b0ee9006afe6d5419503ae">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104541" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/541/CWE476_NULL_Pointer_Dereference__binary_if_10.c" language="C" size="3206" checksum="bcad90b6f022fb91f07bdf912dfe83988cb676b6">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104542" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/542/CWE476_NULL_Pointer_Dereference__binary_if_11.c" language="C" size="3269" checksum="c31d322640b3be5778da7ecf7257eb3990ce6f22">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104543" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/543/CWE476_NULL_Pointer_Dereference__binary_if_12.c" language="C" size="3410" checksum="ff3553df694c9cecec0be0a28651fbec72f199cb">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104544" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/544/CWE476_NULL_Pointer_Dereference__binary_if_13.c" language="C" size="3273" checksum="2603483094f212ed62395de1757238f5e5928571">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104545" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/545/CWE476_NULL_Pointer_Dereference__binary_if_14.c" language="C" size="3224" checksum="2155e70b3a92bbc726334a0502eceef27c50354f">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104546" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/546/CWE476_NULL_Pointer_Dereference__binary_if_15.c" language="C" size="3417" checksum="f26877f10fc274133513ce1a75da1fe2e727488a">
      <mixed line="29" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104547" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/547/CWE476_NULL_Pointer_Dereference__binary_if_16.c" language="C" size="2518" checksum="792be49a96a0588a8dd541b323b37eebf5a77edf">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104548" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/548/CWE476_NULL_Pointer_Dereference__binary_if_17.c" language="C" size="2543" checksum="9e014669caebd358a5b18b7b3ee5fb5be6e72d00">
      <mixed line="29" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104549" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: binary_if<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/549/CWE476_NULL_Pointer_Dereference__binary_if_18.c" language="C" size="2413" checksum="e7d68f4532cf27113c553275be54f55eae3da065">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104550" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/550/CWE476_NULL_Pointer_Dereference__char_01.c" language="C" size="2527" checksum="215ef8ebcd2d550ded45226dc52ab5d1210477c5">
      <mixed line="31" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104551" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/551/CWE476_NULL_Pointer_Dereference__char_02.c" language="C" size="4146" checksum="1c5b8d1395bb77e3a2e918a43f662056ef0240a3">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104552" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/552/CWE476_NULL_Pointer_Dereference__char_03.c" language="C" size="4194" checksum="e344b4487bc791b6f4470972c04f3936c0197131">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104553" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/553/CWE476_NULL_Pointer_Dereference__char_04.c" language="C" size="4678" checksum="b96869413262bdcfaee56340fddb045afaf1648c">
      <mixed line="42" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104554" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/554/CWE476_NULL_Pointer_Dereference__char_05.c" language="C" size="4586" checksum="b5f1cacb831980a23bc07b32c14721c5cdd9c719">
      <mixed line="42" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104555" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/555/CWE476_NULL_Pointer_Dereference__char_06.c" language="C" size="4644" checksum="12ac8b6f9b2e9c169bef291de177e798d8cb0d68">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104556" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/556/CWE476_NULL_Pointer_Dereference__char_07.c" language="C" size="4561" checksum="e71c15dc2d1b3feb8278919f3e8c6f4e3000ce4e">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104557" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/557/CWE476_NULL_Pointer_Dereference__char_08.c" language="C" size="4717" checksum="d9cb2840dcf611983fb02bc37a3223bc1d02bc39">
      <mixed line="49" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104558" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/558/CWE476_NULL_Pointer_Dereference__char_09.c" language="C" size="4407" checksum="a4d4d1ab8f39d7de6657ea4a007f3a9183a0f4a5">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104559" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/559/CWE476_NULL_Pointer_Dereference__char_10.c" language="C" size="4295" checksum="88273004eb1536f5f2a09c2690e21b4126bb9b6b">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104560" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/560/CWE476_NULL_Pointer_Dereference__char_11.c" language="C" size="4439" checksum="16e71ad66abebcb152d523e4d66d3436e4f1683a">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104561" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/561/CWE476_NULL_Pointer_Dereference__char_12.c" language="C" size="4326" checksum="e23feada4a7a520aa33357777defb67c6529436c">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104562" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/562/CWE476_NULL_Pointer_Dereference__char_13.c" language="C" size="4450" checksum="f468e5967e901169418a813b8d249df920cdd6d7">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104563" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/563/CWE476_NULL_Pointer_Dereference__char_14.c" language="C" size="4338" checksum="821550941c119b5c04bb70b18cb9a482886146a0">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104564" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/564/CWE476_NULL_Pointer_Dereference__char_15.c" language="C" size="5730" checksum="f56b6032e406d487639bfcd667f3fb724a17395a">
      <mixed line="43" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104565" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/565/CWE476_NULL_Pointer_Dereference__char_16.c" language="C" size="2986" checksum="3912760bd85c8e39bf23e1469853da98772d4e52">
      <mixed line="37" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104566" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/566/CWE476_NULL_Pointer_Dereference__char_17.c" language="C" size="2956" checksum="b05b533331e2db8a6e99dbf97999fc80a03a28ad">
      <mixed line="37" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104567" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/567/CWE476_NULL_Pointer_Dereference__char_18.c" language="C" size="2791" checksum="f08c786d938ffb247c3d118f25dccd0de337f387">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104568" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/568/CWE476_NULL_Pointer_Dereference__char_21.c" language="C" size="4273" checksum="81a00882520aa7092086a0aeabdf8a19dbe5ecab">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104569" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/569/CWE476_NULL_Pointer_Dereference__char_22a.c" language="C" size="3613" checksum="2c9981b51fd7879414f6076988070b19c4f3ff20"></file>
    <file path="000/104/569/CWE476_NULL_Pointer_Dereference__char_22b.c" language="C" size="3143" checksum="2cbcfd1dc5e37c23d06efd71f62c5846f54fa134">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104570" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/570/CWE476_NULL_Pointer_Dereference__char_31.c" language="C" size="2880" checksum="db2e48440c8912f5d8e5d49ffe16bc51d31fe7cb">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104571" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 32 Data flow using two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/571/CWE476_NULL_Pointer_Dereference__char_32.c" language="C" size="3235" checksum="16ad51551378cdf46d93aae0198e4340d505cf8f">
      <mixed line="39" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104572" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/572/CWE476_NULL_Pointer_Dereference__char_33.cpp" language="C++" size="2906" checksum="cb3b38b7cad74f0fe2ddcc353c037950da41360d">
      <mixed line="37" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104573" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/573/CWE476_NULL_Pointer_Dereference__char_34.c" language="C" size="3276" checksum="cb3bb82bddac2aa9e12bedca2f40ec4fe5aee874">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104574" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/574/CWE476_NULL_Pointer_Dereference__char_41.c" language="C" size="2811" checksum="66d770e0ca00bdfc54b7923d00f23fe6303de35b">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104575" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/575/CWE476_NULL_Pointer_Dereference__char_44.c" language="C" size="3050" checksum="f9549f94346a205598aaf085ff1adff88c4aef33">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104576" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/576/CWE476_NULL_Pointer_Dereference__char_45.c" language="C" size="3395" checksum="96f9a5f1fb0587491deab524237ee71adea2b4bc">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104577" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/577/CWE476_NULL_Pointer_Dereference__char_51a.c" language="C" size="2472" checksum="1d0f5ca0a4d109cf2cc06e09437a18cd9e513eb6"></file>
    <file path="000/104/577/CWE476_NULL_Pointer_Dereference__char_51b.c" language="C" size="1628" checksum="c4203652410a62abb9131a41ae8813622e7d8c48">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104578" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/578/CWE476_NULL_Pointer_Dereference__char_52a.c" language="C" size="2489" checksum="ff4fd5fde4afc3780c3b0221d6e461dba6c86f00"></file>
    <file path="000/104/578/CWE476_NULL_Pointer_Dereference__char_52b.c" language="C" size="1504" checksum="9177ca83aaf7808f9c747bdc95ace40ee4f0e78d"></file>
    <file path="000/104/578/CWE476_NULL_Pointer_Dereference__char_52c.c" language="C" size="1645" checksum="d28e89462fe6613f1d04643cf5fe634c1ec65bcd">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104579" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/579/CWE476_NULL_Pointer_Dereference__char_53a.c" language="C" size="2516" checksum="03f163671774f8ab59cef5a0ea2123d02181056c"></file>
    <file path="000/104/579/CWE476_NULL_Pointer_Dereference__char_53b.c" language="C" size="1531" checksum="55650c9da469008d75b33238102df6747511d31d"></file>
    <file path="000/104/579/CWE476_NULL_Pointer_Dereference__char_53c.c" language="C" size="1531" checksum="190c6dd715d18aead2f683c29e84463509b81f60"></file>
    <file path="000/104/579/CWE476_NULL_Pointer_Dereference__char_53d.c" language="C" size="1672" checksum="6d15c4912571f628e82f7e451dae6ab3c4b6b73a">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104580" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/580/CWE476_NULL_Pointer_Dereference__char_54a.c" language="C" size="2517" checksum="6a797fb9459ea66f8c20cfcbb111d738028b2d02"></file>
    <file path="000/104/580/CWE476_NULL_Pointer_Dereference__char_54b.c" language="C" size="1532" checksum="d5ae0e17860934651d95e77bbded23609c66ffc4"></file>
    <file path="000/104/580/CWE476_NULL_Pointer_Dereference__char_54c.c" language="C" size="1532" checksum="f0eb167437b9937c88177802723b3647a6bfdb05"></file>
    <file path="000/104/580/CWE476_NULL_Pointer_Dereference__char_54d.c" language="C" size="1532" checksum="723c63692415bdfce7f752ed5abd1a01abee194f"></file>
    <file path="000/104/580/CWE476_NULL_Pointer_Dereference__char_54e.c" language="C" size="1673" checksum="32d856866db4327e24fd933ba5c345acb0172360">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104581" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/581/CWE476_NULL_Pointer_Dereference__char_63a.c" language="C" size="2480" checksum="fa205c6c8f9775d1f8abcfddf94faec6c1b36add"></file>
    <file path="000/104/581/CWE476_NULL_Pointer_Dereference__char_63b.c" language="C" size="1726" checksum="f8441edeb370600c42a452140d63391aaaf2e5d9">
      <mixed line="29" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104582" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/582/CWE476_NULL_Pointer_Dereference__char_64a.c" language="C" size="2497" checksum="ec636645a3a6b9c375eeceb7b084feed6f0723bd"></file>
    <file path="000/104/582/CWE476_NULL_Pointer_Dereference__char_64b.c" language="C" size="2205" checksum="5215b924c49270f0c145bdc7ac3743d777ebd558">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104583" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/583/CWE476_NULL_Pointer_Dereference__char_65a.c" language="C" size="2710" checksum="722071304a7fbb671c4f4e6424e397d3a1a82eb2"></file>
    <file path="000/104/583/CWE476_NULL_Pointer_Dereference__char_65b.c" language="C" size="1670" checksum="ca9442faf6f2ad36be8170fe4aa00bb2e593b2a2">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104584" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/584/CWE476_NULL_Pointer_Dereference__char_66a.c" language="C" size="2690" checksum="94c2ef5826b0799150790cac3dae86391acc8af4"></file>
    <file path="000/104/584/CWE476_NULL_Pointer_Dereference__char_66b.c" language="C" size="1783" checksum="066702574ef7455da282212a0121f4542b9c013e">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104585" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/585/CWE476_NULL_Pointer_Dereference__char_67a.c" language="C" size="3086" checksum="9b750e2220084640824f6808570b4b3afb9f8e27"></file>
    <file path="000/104/585/CWE476_NULL_Pointer_Dereference__char_67b.c" language="C" size="2050" checksum="93d93285e3c11b42955c67e2d75a47545d5c473b">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104586" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/586/CWE476_NULL_Pointer_Dereference__char_68a.c" language="C" size="2843" checksum="059238387b85133271d31e42f188d05f459c12d7"></file>
    <file path="000/104/586/CWE476_NULL_Pointer_Dereference__char_68b.c" language="C" size="2021" checksum="7fa017c8c50a4a4421e1f46ff303f1bb831ad230">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104587" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/587/CWE476_NULL_Pointer_Dereference__char_72a.cpp" language="C++" size="2969" checksum="93013639cec7667a5e885a4972b7d1bcb37d7305"></file>
    <file path="000/104/587/CWE476_NULL_Pointer_Dereference__char_72b.cpp" language="C++" size="1813" checksum="a4938e18e0a69d5fc04f4985ac8cf842ffa5d26c">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104588" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/588/CWE476_NULL_Pointer_Dereference__char_73a.cpp" language="C++" size="2751" checksum="163791afcbb20824b47153fb4ff323a5353c56b3"></file>
    <file path="000/104/588/CWE476_NULL_Pointer_Dereference__char_73b.cpp" language="C++" size="1801" checksum="eeb8b093d683db152f51eb6f594dee5d2fd1b010">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104589" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/589/CWE476_NULL_Pointer_Dereference__char_74a.cpp" language="C++" size="2699" checksum="03b1e8de143a3b7e67469162ed26002f988a13d5"></file>
    <file path="000/104/589/CWE476_NULL_Pointer_Dereference__char_74b.cpp" language="C++" size="1792" checksum="4bf9e1e02661f0e1a157691ebebb259998b3fbae">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104590" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/590/CWE476_NULL_Pointer_Dereference__char_81.h" language="C" size="1390" checksum="30dfaf52a8271a2a700d33c0b4f3f5bd6fe8bdcb"></file>
    <file path="000/104/590/CWE476_NULL_Pointer_Dereference__char_81_bad.cpp" language="C++" size="988" checksum="7aac0c66d01c34fd0076619d922f2bfd8c93c79f">
      <mixed line="29" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
    <file path="000/104/590/CWE476_NULL_Pointer_Dereference__char_81_goodB2G.cpp" language="C++" size="1104" checksum="f1994fd7fee35316e1215c8dc0f1a63f9369b34f"></file>
    <file path="000/104/590/CWE476_NULL_Pointer_Dereference__char_81_goodG2B.cpp" language="C++" size="1002" checksum="52fc5576e003725215b925e00b28c0b2106cbda0"></file>
    <file path="000/104/590/CWE476_NULL_Pointer_Dereference__char_81a.cpp" language="C++" size="2529" checksum="b2c6611fd61959a1ada8ae149864e3d5383570df"></file>
  </testcase>
  <testcase id="104591" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/591/CWE476_NULL_Pointer_Dereference__char_82.h" language="C" size="1364" checksum="8e910f43e297bf47ca15eea4d1b492b573a31006"></file>
    <file path="000/104/591/CWE476_NULL_Pointer_Dereference__char_82_bad.cpp" language="C++" size="980" checksum="d706c1b12daaea0f0a8b944823cce2aaa0112e75">
      <mixed line="29" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
    <file path="000/104/591/CWE476_NULL_Pointer_Dereference__char_82_goodB2G.cpp" language="C++" size="1096" checksum="6d42b6ad94e7f66265bc5f5c5ff01e68d9e84063"></file>
    <file path="000/104/591/CWE476_NULL_Pointer_Dereference__char_82_goodG2B.cpp" language="C++" size="994" checksum="beda830923f3cdf5e75c69a014ff6a351a098732"></file>
    <file path="000/104/591/CWE476_NULL_Pointer_Dereference__char_82a.cpp" language="C++" size="2590" checksum="e3f5b205b0b37ee0bdcfe0b191021aefcf061934"></file>
  </testcase>
  <testcase id="104592" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/592/CWE476_NULL_Pointer_Dereference__class_01.cpp" language="C++" size="2781" checksum="abb34c98ce06e3a5acfec8f0df895357ca2e2491">
      <mixed line="31" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104593" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/593/CWE476_NULL_Pointer_Dereference__class_02.cpp" language="C++" size="4613" checksum="b53be812e20731e028e9f7a33f19fe1427bcf43d">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104594" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/594/CWE476_NULL_Pointer_Dereference__class_03.cpp" language="C++" size="4661" checksum="5d95d1ca503ffdbf8d313a3fca46bafa3a76286e">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104595" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/595/CWE476_NULL_Pointer_Dereference__class_04.cpp" language="C++" size="5145" checksum="b2b7ce6588d45831049ec10810821098268e1b6a">
      <mixed line="42" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104596" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/596/CWE476_NULL_Pointer_Dereference__class_05.cpp" language="C++" size="5053" checksum="c6f54d3e43c207eca53698a61273d3f371bc48f3">
      <mixed line="42" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104597" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/597/CWE476_NULL_Pointer_Dereference__class_06.cpp" language="C++" size="5111" checksum="ddee839e78a72bd695ad077507d0d289a64540d7">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104598" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/598/CWE476_NULL_Pointer_Dereference__class_07.cpp" language="C++" size="5028" checksum="49872b390e12228f74832feb887f095160407d46">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104599" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/599/CWE476_NULL_Pointer_Dereference__class_08.cpp" language="C++" size="5184" checksum="15e97fb0b2db69c836ce381b0579ec04c2ae9fd1">
      <mixed line="49" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104600" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/600/CWE476_NULL_Pointer_Dereference__class_09.cpp" language="C++" size="4874" checksum="721ca52b7deae6e570c3b516e599d13dc818a5c6">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104601" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/601/CWE476_NULL_Pointer_Dereference__class_10.cpp" language="C++" size="4762" checksum="f2816f51c04ac84f6cb6aae3461fa66c276bcde6">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104602" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/602/CWE476_NULL_Pointer_Dereference__class_11.cpp" language="C++" size="4902" checksum="f3f7d4d06b88ecaa55ac78fe1defd239b2a1d70f">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104603" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/603/CWE476_NULL_Pointer_Dereference__class_12.cpp" language="C++" size="4882" checksum="fa5afef0c8a2d89b9713536b87ff1c2f9e2a660d">
      <mixed line="45" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104604" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/604/CWE476_NULL_Pointer_Dereference__class_13.cpp" language="C++" size="4913" checksum="8a4bc68b366f6068bea20e53e9d0b41f276b6698">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104605" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/605/CWE476_NULL_Pointer_Dereference__class_14.cpp" language="C++" size="4801" checksum="2867d29285d98bcdac8ae299a7d5a34eb3a25bdc">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104606" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/606/CWE476_NULL_Pointer_Dereference__class_15.cpp" language="C++" size="6129" checksum="85f23f520d99203577bd0acb8407a8839ac1eb2e">
      <mixed line="42" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104607" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/607/CWE476_NULL_Pointer_Dereference__class_16.cpp" language="C++" size="3264" checksum="f99087c7557ad7307230cde9e48dbe3e8c2d1c63">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104608" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/608/CWE476_NULL_Pointer_Dereference__class_17.cpp" language="C++" size="3234" checksum="7c028e9f80445c852c9bcf5285496d272c11d38a">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104609" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/609/CWE476_NULL_Pointer_Dereference__class_18.cpp" language="C++" size="3041" checksum="c95e84944a042e81c31aaca4d9a6255067258495">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104610" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/610/CWE476_NULL_Pointer_Dereference__class_21.cpp" language="C++" size="4529" checksum="9714845c211e49717d914d2e7e5b1da7feb6f11f">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104611" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/611/CWE476_NULL_Pointer_Dereference__class_22a.cpp" language="C++" size="3341" checksum="d6fbbc9a54253bcf4e4dc64ce1bdb0b824b517ee"></file>
    <file path="000/104/611/CWE476_NULL_Pointer_Dereference__class_22b.cpp" language="C++" size="2950" checksum="82452640a001fa2abf656117345b6f8601fb5199">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104612" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/612/CWE476_NULL_Pointer_Dereference__class_31.cpp" language="C++" size="3190" checksum="cce40c74f8f14d5726ec91eb28e0305f4b2b9288">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104613" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 32 Data flow using two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/613/CWE476_NULL_Pointer_Dereference__class_32.cpp" language="C++" size="3613" checksum="d21e0f4a3a9181518ab948ea6719a076ce7f7775">
      <mixed line="39" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104614" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/614/CWE476_NULL_Pointer_Dereference__class_33.cpp" language="C++" size="3186" checksum="94586810dddd3695fd385a43a4489984a6cb883e">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104615" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/615/CWE476_NULL_Pointer_Dereference__class_34.cpp" language="C++" size="3414" checksum="2c8520266dbe5deec9be3c75ecc14be49d693807">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104616" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/616/CWE476_NULL_Pointer_Dereference__class_41.cpp" language="C++" size="3093" checksum="08659505512f14362c1128744ef253a04a9ff3ce">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104617" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/617/CWE476_NULL_Pointer_Dereference__class_44.cpp" language="C++" size="3354" checksum="0845c8626f9420fe225ca03b7ee4d9a5a6deb31b">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104618" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/618/CWE476_NULL_Pointer_Dereference__class_45.cpp" language="C++" size="3330" checksum="cbadfc9908036d090ef4bb7053bb18162d4aa8a3">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104619" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/619/CWE476_NULL_Pointer_Dereference__class_51a.cpp" language="C++" size="2464" checksum="0b6a5a7866104c04feacec21dbdc20624173fe1e"></file>
    <file path="000/104/619/CWE476_NULL_Pointer_Dereference__class_51b.cpp" language="C++" size="1678" checksum="9194423af651eb19e455e83a62c47e144a56a0ab">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104620" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/620/CWE476_NULL_Pointer_Dereference__class_52a.cpp" language="C++" size="2461" checksum="b2c7c996541340065158bb8ac9d71690a8f8afa7"></file>
    <file path="000/104/620/CWE476_NULL_Pointer_Dereference__class_52b.cpp" language="C++" size="1278" checksum="188f80f667ea90d71ebd1ca27af39dad883d78e8"></file>
    <file path="000/104/620/CWE476_NULL_Pointer_Dereference__class_52c.cpp" language="C++" size="1701" checksum="893048f3aa12ffd7b86e584d928b39bfc7ec57d0">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104621" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/621/CWE476_NULL_Pointer_Dereference__class_53a.cpp" language="C++" size="2488" checksum="b55c3c783c135ea5bd48393644ce4c4c28605148"></file>
    <file path="000/104/621/CWE476_NULL_Pointer_Dereference__class_53b.cpp" language="C++" size="1305" checksum="eb07334881c6713fa44938daa69d0401990a71f1"></file>
    <file path="000/104/621/CWE476_NULL_Pointer_Dereference__class_53c.cpp" language="C++" size="1305" checksum="072689c3c89da1661d7cc03a891948a680b0fe3a"></file>
    <file path="000/104/621/CWE476_NULL_Pointer_Dereference__class_53d.cpp" language="C++" size="1728" checksum="0b77a49fac29fe6bee3e96c8112852bd81399089">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104622" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/622/CWE476_NULL_Pointer_Dereference__class_54a.cpp" language="C++" size="2489" checksum="cee9ac7f2e5ec08cbc4e0de19609b6756359b15d"></file>
    <file path="000/104/622/CWE476_NULL_Pointer_Dereference__class_54b.cpp" language="C++" size="1306" checksum="5425bf15f832028db78a8b12298c52b6d7385fde"></file>
    <file path="000/104/622/CWE476_NULL_Pointer_Dereference__class_54c.cpp" language="C++" size="1306" checksum="c3755fd1acacdce710235d10e0b1ccbad38f621a"></file>
    <file path="000/104/622/CWE476_NULL_Pointer_Dereference__class_54d.cpp" language="C++" size="1306" checksum="c03210936871ddc5bb37b02b06c4743621e99b90"></file>
    <file path="000/104/622/CWE476_NULL_Pointer_Dereference__class_54e.cpp" language="C++" size="1729" checksum="0a21a30b0a800e7970551ab39f6eee5ef358de08">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104623" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/623/CWE476_NULL_Pointer_Dereference__class_63a.cpp" language="C++" size="2440" checksum="ed8beb8c3871ae6b2db54ab610d7acb426b9ad85"></file>
    <file path="000/104/623/CWE476_NULL_Pointer_Dereference__class_63b.cpp" language="C++" size="1800" checksum="434f08545d31a030d4c2c75d2c10ceaa20b55b4a">
      <mixed line="29" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104624" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/624/CWE476_NULL_Pointer_Dereference__class_64a.cpp" language="C++" size="2433" checksum="7305b5abe00d108e9a81c24279fe2f76f3c889e4"></file>
    <file path="000/104/624/CWE476_NULL_Pointer_Dereference__class_64b.cpp" language="C++" size="2303" checksum="9122bcd347de27f2f3e6b31809c50dc55227516b">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104625" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/625/CWE476_NULL_Pointer_Dereference__class_65a.cpp" language="C++" size="2694" checksum="838eaeca35c47bc44136831d4fc6e3f3df7da198"></file>
    <file path="000/104/625/CWE476_NULL_Pointer_Dereference__class_65b.cpp" language="C++" size="1720" checksum="7663cd7364b3e7d00c0c8f4c3b111d3d7ff85b3a">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104626" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/626/CWE476_NULL_Pointer_Dereference__class_66a.cpp" language="C++" size="2674" checksum="5ad7cfa39322a369b9ca5fd8950d56c0fbd29fbd"></file>
    <file path="000/104/626/CWE476_NULL_Pointer_Dereference__class_66b.cpp" language="C++" size="1857" checksum="66ecbd89f87e43df900105563f334ad80a59198e">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104627" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/627/CWE476_NULL_Pointer_Dereference__class_67a.cpp" language="C++" size="2702" checksum="3014ab1cd74eaa08aee62c04d1f520590bf6f9d3"></file>
    <file path="000/104/627/CWE476_NULL_Pointer_Dereference__class_67b.cpp" language="C++" size="1903" checksum="f5538eacb4a7a3f0a708b1a9329d4c66f3cb35b1">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104628" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/628/CWE476_NULL_Pointer_Dereference__class_68a.cpp" language="C++" size="2557" checksum="2e41053b07f9add4e2a9c6d5fd9a5cb7f9e4e261"></file>
    <file path="000/104/628/CWE476_NULL_Pointer_Dereference__class_68b.cpp" language="C++" size="1849" checksum="6d9358023273a90bb80b47611e742eefaf974776">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104629" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/629/CWE476_NULL_Pointer_Dereference__class_72a.cpp" language="C++" size="3175" checksum="578dc065d63568b6d14c1762474d42e48298cd07"></file>
    <file path="000/104/629/CWE476_NULL_Pointer_Dereference__class_72b.cpp" language="C++" size="1925" checksum="e2a3c8d973d5200742bec880017600aff5a418a3">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104630" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/630/CWE476_NULL_Pointer_Dereference__class_73a.cpp" language="C++" size="2957" checksum="ff970bb65c8e5dabd9e54f935fdbaa28b7436144"></file>
    <file path="000/104/630/CWE476_NULL_Pointer_Dereference__class_73b.cpp" language="C++" size="1913" checksum="c6dfb2f2d945efd44af86a675182d51b7cf34282">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104631" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/631/CWE476_NULL_Pointer_Dereference__class_74a.cpp" language="C++" size="2905" checksum="1fa4a8ab759e14133713f82822668fb4f3093914"></file>
    <file path="000/104/631/CWE476_NULL_Pointer_Dereference__class_74b.cpp" language="C++" size="1904" checksum="4dbd4d4293ad89e15fd226757fb34d3c153a9588">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104632" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/632/CWE476_NULL_Pointer_Dereference__class_81.h" language="C" size="1427" checksum="a8c0726c9ca633f0f5003e099ab9f84adf3bbd73"></file>
    <file path="000/104/632/CWE476_NULL_Pointer_Dereference__class_81_bad.cpp" language="C++" size="1074" checksum="1db42266da26695c1a984739be2c949d8122336e">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
    <file path="000/104/632/CWE476_NULL_Pointer_Dereference__class_81_goodB2G.cpp" language="C++" size="1088" checksum="e32012bb41eb90dea0b0e66ad9707e331561968c"></file>
    <file path="000/104/632/CWE476_NULL_Pointer_Dereference__class_81_goodG2B.cpp" language="C++" size="1088" checksum="e7ea45fcf58b5cc82d5d1d891c7d770ab56456b8"></file>
    <file path="000/104/632/CWE476_NULL_Pointer_Dereference__class_81a.cpp" language="C++" size="2698" checksum="63c988f33ecf07b570cb4898adb48d6c7478f114"></file>
  </testcase>
  <testcase id="104633" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check data for NULL before attempting to print data->a<br/> BadSink : Print data->a<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/633/CWE476_NULL_Pointer_Dereference__class_82.h" language="C" size="1401" checksum="4950adbe9bdeeb08c3a49f6f14e9b82bd2f3cb9c"></file>
    <file path="000/104/633/CWE476_NULL_Pointer_Dereference__class_82_bad.cpp" language="C++" size="1066" checksum="764abe19562865921707861003f4c041159f2fed">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
    <file path="000/104/633/CWE476_NULL_Pointer_Dereference__class_82_goodB2G.cpp" language="C++" size="1080" checksum="36175f0cef553154c2781fe6a8bb28562efbfa8c"></file>
    <file path="000/104/633/CWE476_NULL_Pointer_Dereference__class_82_goodG2B.cpp" language="C++" size="1080" checksum="6492acfe82f0ac75c47bf23e9b470291bf38cc51"></file>
    <file path="000/104/633/CWE476_NULL_Pointer_Dereference__class_82a.cpp" language="C++" size="2777" checksum="587879a34efdf6d4eed8871a72976819f657acb9"></file>
  </testcase>
  <testcase id="104634" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/634/CWE476_NULL_Pointer_Dereference__deref_after_check_01.c" language="C" size="2039" checksum="5ac0918cf3a4d795d3d5f20e6cd79c16c10c397d">
      <mixed line="24" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104635" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/635/CWE476_NULL_Pointer_Dereference__deref_after_check_02.c" language="C" size="2745" checksum="65d0811dd0eaea5669ff239d38dd99aea95db704">
      <mixed line="26" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104636" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/636/CWE476_NULL_Pointer_Dereference__deref_after_check_03.c" language="C" size="2766" checksum="a40568ef066426c8a1e7963b1f476aa1a2540ec4">
      <mixed line="26" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104637" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/637/CWE476_NULL_Pointer_Dereference__deref_after_check_04.c" language="C" size="3131" checksum="bc6b2f064a5f157057b80fa58cb6fa2027299274">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104638" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/638/CWE476_NULL_Pointer_Dereference__deref_after_check_05.c" language="C" size="3102" checksum="a0a703f8505aad4623673bc7746229d5d678bad2">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104639" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/639/CWE476_NULL_Pointer_Dereference__deref_after_check_06.c" language="C" size="3072" checksum="55a1f44a2b743649dcfba23e2f066f86a9c40118">
      <mixed line="31" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104640" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/640/CWE476_NULL_Pointer_Dereference__deref_after_check_07.c" language="C" size="3052" checksum="becc46c1744d442d4fe8fa4513f37e8a9f315f0f">
      <mixed line="31" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104641" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/641/CWE476_NULL_Pointer_Dereference__deref_after_check_08.c" language="C" size="3152" checksum="e93c05e6f2d52bb255e6c93de490645d8f69c229">
      <mixed line="39" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104642" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/642/CWE476_NULL_Pointer_Dereference__deref_after_check_09.c" language="C" size="2860" checksum="6f8ecad578bb5947d064b6c3b302a0be0b97b81c">
      <mixed line="26" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104643" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/643/CWE476_NULL_Pointer_Dereference__deref_after_check_10.c" language="C" size="2811" checksum="738bf1ddcb0bb582eaa425918b7326ca7690a611">
      <mixed line="26" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104644" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/644/CWE476_NULL_Pointer_Dereference__deref_after_check_11.c" language="C" size="2874" checksum="1a50c9500ea89680ca69bdc9fb84af908acb0566">
      <mixed line="26" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104645" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/645/CWE476_NULL_Pointer_Dereference__deref_after_check_12.c" language="C" size="2878" checksum="49dd337e87db4dc10c5216f38782a778c81d7ecf">
      <mixed line="26" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104646" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/646/CWE476_NULL_Pointer_Dereference__deref_after_check_13.c" language="C" size="2878" checksum="7d6ed93c915b1e05d13912cc5692e613ba53c1be">
      <mixed line="26" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104647" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/647/CWE476_NULL_Pointer_Dereference__deref_after_check_14.c" language="C" size="2829" checksum="e083b950d356e909a96cf96f094fdbe5a2cda961">
      <mixed line="26" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104648" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/648/CWE476_NULL_Pointer_Dereference__deref_after_check_15.c" language="C" size="3034" checksum="4b9a58b1f44f4d5a9f3dae49f3aab09511169b78">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104649" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/649/CWE476_NULL_Pointer_Dereference__deref_after_check_16.c" language="C" size="2260" checksum="2046f149cf05547da5c9baa3a3548d458a3c81d7">
      <mixed line="26" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104650" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/650/CWE476_NULL_Pointer_Dereference__deref_after_check_17.c" language="C" size="2285" checksum="018015397d7b6f53dc646529f7d81a721d723572">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104651" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: deref_after_check<br/> GoodSink: Do not dereference a pointer if it is NULL<br/> BadSink : Dereference a pointer after checking to see if it is NULL<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/651/CWE476_NULL_Pointer_Dereference__deref_after_check_18.c" language="C" size="2163" checksum="5761cef359b71624abe3f08a52b5766b1cfdd0ee">
      <mixed line="26" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104652" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/652/CWE476_NULL_Pointer_Dereference__int64_t_01.c" language="C" size="2401" checksum="ffab60569e67d7faac4655b4a41ccb1527ba1d2d">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104653" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/653/CWE476_NULL_Pointer_Dereference__int64_t_02.c" language="C" size="3946" checksum="f55d3d15f083c3591faaa989326e2e9a44c77dc1">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104654" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/654/CWE476_NULL_Pointer_Dereference__int64_t_03.c" language="C" size="3994" checksum="058d90987517e02108d2653d221c04283f655802">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104655" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/655/CWE476_NULL_Pointer_Dereference__int64_t_04.c" language="C" size="4478" checksum="40bf31088d05a1271aa66fcea5ba0cebd60bc9fe">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104656" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/656/CWE476_NULL_Pointer_Dereference__int64_t_05.c" language="C" size="4386" checksum="671c9e78290e20b2f24184deaf433ffa97b8c20a">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104657" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/657/CWE476_NULL_Pointer_Dereference__int64_t_06.c" language="C" size="4444" checksum="8e483aaa9688f2cbd998a9e4f8f82733fa22299e">
      <mixed line="40" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104658" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/658/CWE476_NULL_Pointer_Dereference__int64_t_07.c" language="C" size="4361" checksum="38d48a111e277914ee7707169ee7d081a27a0ac2">
      <mixed line="40" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104659" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/659/CWE476_NULL_Pointer_Dereference__int64_t_08.c" language="C" size="4517" checksum="f7dd32da3b026b0544d8df28d2a39c85ed1fcec6">
      <mixed line="48" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104660" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/660/CWE476_NULL_Pointer_Dereference__int64_t_09.c" language="C" size="4207" checksum="0605a1945bcb4daaed0f4312b7f7a6381b7c062a">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104661" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/661/CWE476_NULL_Pointer_Dereference__int64_t_10.c" language="C" size="4095" checksum="bcb0df2eeb09d8f2b5434f43e5104d2def128255">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104662" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/662/CWE476_NULL_Pointer_Dereference__int64_t_11.c" language="C" size="4239" checksum="d7457a4cd1c2761f833000e5b24fe3ad64172f77">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104663" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/663/CWE476_NULL_Pointer_Dereference__int64_t_12.c" language="C" size="4110" checksum="b9906154f9826ccef0ec0ec57fe4df45e136f255">
      <mixed line="43" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104664" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/664/CWE476_NULL_Pointer_Dereference__int64_t_13.c" language="C" size="4250" checksum="fdf88ab999399b49ec90565296b1317f8c803528">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104665" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/665/CWE476_NULL_Pointer_Dereference__int64_t_14.c" language="C" size="4138" checksum="79cda62cb14cf9304027606074cc4d1a1d51ca94">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104666" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/666/CWE476_NULL_Pointer_Dereference__int64_t_15.c" language="C" size="5490" checksum="4a099ec847086aa0c68aa91c0743d4e1b2752c14">
      <mixed line="42" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104667" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/667/CWE476_NULL_Pointer_Dereference__int64_t_16.c" language="C" size="2860" checksum="5f154a4a18080ee0eb068ed8525e584ccf8247f7">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104668" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/668/CWE476_NULL_Pointer_Dereference__int64_t_17.c" language="C" size="2830" checksum="d877d4d1698b2cb3cd3021d10f133fbc5be8aefd">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104669" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/669/CWE476_NULL_Pointer_Dereference__int64_t_18.c" language="C" size="2665" checksum="b5540b18795230312eed013f9ee3c240789b3641">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104670" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/670/CWE476_NULL_Pointer_Dereference__int64_t_21.c" language="C" size="4076" checksum="e0f755c5f955b47c541a98e172b4d991a3ff4579">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104671" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/671/CWE476_NULL_Pointer_Dereference__int64_t_22a.c" language="C" size="3752" checksum="a532a577350324bef4ebc6e982045d67257e87a0"></file>
    <file path="000/104/671/CWE476_NULL_Pointer_Dereference__int64_t_22b.c" language="C" size="2906" checksum="47eaa4570e0b0fd2faf36339f96a8aed4b2ec2f3">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104672" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/672/CWE476_NULL_Pointer_Dereference__int64_t_31.c" language="C" size="2760" checksum="7a947eb0c48fbcd50f51b9880fa4ce03d773167c">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104673" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 32 Data flow using two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/673/CWE476_NULL_Pointer_Dereference__int64_t_32.c" language="C" size="3145" checksum="4717a0450d802362ed5057a2bc94e6cb4d45cfa4">
      <mixed line="38" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104674" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/674/CWE476_NULL_Pointer_Dereference__int64_t_33.cpp" language="C++" size="2780" checksum="aedb2e62cbd8d366f1e5ea66fa527372e496b1d6">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104675" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/675/CWE476_NULL_Pointer_Dereference__int64_t_34.c" language="C" size="3165" checksum="89f697d31c77c36b8a9eed81910c24f72357d11a">
      <mixed line="40" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104676" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/676/CWE476_NULL_Pointer_Dereference__int64_t_41.c" language="C" size="2694" checksum="b2bed557aa38df994440194019e9a1c715f60aab">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104677" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/677/CWE476_NULL_Pointer_Dereference__int64_t_44.c" language="C" size="2942" checksum="38870b37ff9a779475334969c042818cb97772fd">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104678" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/678/CWE476_NULL_Pointer_Dereference__int64_t_45.c" language="C" size="3314" checksum="328d1092c31726ae17cdafeb0837660727ed66a6">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104679" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/679/CWE476_NULL_Pointer_Dereference__int64_t_51a.c" language="C" size="2575" checksum="cfba3790385ea8dac8a857b193e25cf13525f16a"></file>
    <file path="000/104/679/CWE476_NULL_Pointer_Dereference__int64_t_51b.c" language="C" size="1447" checksum="91e3e5a9a7358ec903cedf555a1d2c158b60a659">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104680" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/680/CWE476_NULL_Pointer_Dereference__int64_t_52a.c" language="C" size="2592" checksum="3b4da19f4ba4c8aa32ec5825a75cadbe5a6d4735"></file>
    <file path="000/104/680/CWE476_NULL_Pointer_Dereference__int64_t_52b.c" language="C" size="1552" checksum="d7497073642442019a0fc6edca453c801280b05f"></file>
    <file path="000/104/680/CWE476_NULL_Pointer_Dereference__int64_t_52c.c" language="C" size="1464" checksum="df148876cd3cd686c9ce03c7da2bb110122b05f2">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104681" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/681/CWE476_NULL_Pointer_Dereference__int64_t_53a.c" language="C" size="2619" checksum="8b994c84485177bb42a29a9022dda49071091501"></file>
    <file path="000/104/681/CWE476_NULL_Pointer_Dereference__int64_t_53b.c" language="C" size="1579" checksum="550843126a8ad28c9f9da40e154e68129f8e6663"></file>
    <file path="000/104/681/CWE476_NULL_Pointer_Dereference__int64_t_53c.c" language="C" size="1579" checksum="af4743151c3a901e74e550f16a934e226fd7e5fe"></file>
    <file path="000/104/681/CWE476_NULL_Pointer_Dereference__int64_t_53d.c" language="C" size="1491" checksum="d9379fbe321b4bac65f21d536047143e61d34123">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104682" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/682/CWE476_NULL_Pointer_Dereference__int64_t_54a.c" language="C" size="2620" checksum="94e48cf763c0fe240fba36e0035eae45c88d2638"></file>
    <file path="000/104/682/CWE476_NULL_Pointer_Dereference__int64_t_54b.c" language="C" size="1580" checksum="f452f9d8ef6bcc7eca724ae0b539d0fbd1ef4892"></file>
    <file path="000/104/682/CWE476_NULL_Pointer_Dereference__int64_t_54c.c" language="C" size="1580" checksum="347cbb3ea4b5d095e1e220e86535020aa5b6c507"></file>
    <file path="000/104/682/CWE476_NULL_Pointer_Dereference__int64_t_54d.c" language="C" size="1580" checksum="c4a3d09e196775215d6249e130da0e2515efef22"></file>
    <file path="000/104/682/CWE476_NULL_Pointer_Dereference__int64_t_54e.c" language="C" size="1492" checksum="a3c5d2f274a981e18a560e413278aa43f1706036">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104683" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/683/CWE476_NULL_Pointer_Dereference__int64_t_63a.c" language="C" size="2583" checksum="beaa9ee4b2155281b4f3bfe12e291a9034aeb080"></file>
    <file path="000/104/683/CWE476_NULL_Pointer_Dereference__int64_t_63b.c" language="C" size="1554" checksum="ff4be722ae085a6bb781523fbaa11bc383aeb063">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104684" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/684/CWE476_NULL_Pointer_Dereference__int64_t_64a.c" language="C" size="2591" checksum="9fe4661729e1223e0f63012df64988b88b6749c7"></file>
    <file path="000/104/684/CWE476_NULL_Pointer_Dereference__int64_t_64b.c" language="C" size="2042" checksum="434daaf7db5a787b19ed999e1d3b6afbceeb5137">
      <mixed line="31" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104685" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/685/CWE476_NULL_Pointer_Dereference__int64_t_65a.c" language="C" size="2822" checksum="4b1fcc2c965208dca2507ab11da40a6a4f90a2a5"></file>
    <file path="000/104/685/CWE476_NULL_Pointer_Dereference__int64_t_65b.c" language="C" size="1489" checksum="f3b7123c992c46f268cae3f926ea99ab8eec6497">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104686" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/686/CWE476_NULL_Pointer_Dereference__int64_t_66a.c" language="C" size="2802" checksum="5116a44df73c96274cc2fcb3079afebaa2790d21"></file>
    <file path="000/104/686/CWE476_NULL_Pointer_Dereference__int64_t_66b.c" language="C" size="1611" checksum="23c721a35944bf6ec32d499c636e6a3d3e85ae63">
      <mixed line="29" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104687" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/687/CWE476_NULL_Pointer_Dereference__int64_t_67a.c" language="C" size="3207" checksum="79c4bc07962a4c652d6082155364fbb5f079691e"></file>
    <file path="000/104/687/CWE476_NULL_Pointer_Dereference__int64_t_67b.c" language="C" size="1887" checksum="e2620a8a0fa7ec089e89b8cc265f2a42ad785720">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104688" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/688/CWE476_NULL_Pointer_Dereference__int64_t_68a.c" language="C" size="2964" checksum="71a81b1588e6547f2a4a38f1075c39bba734e0d9"></file>
    <file path="000/104/688/CWE476_NULL_Pointer_Dereference__int64_t_68b.c" language="C" size="1867" checksum="bd6dad1d13172fb0557f255d7525123482c3b589">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104689" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/689/CWE476_NULL_Pointer_Dereference__int64_t_72a.cpp" language="C++" size="3057" checksum="08f177550cdeaa7d80e6529c9023b927daa81285"></file>
    <file path="000/104/689/CWE476_NULL_Pointer_Dereference__int64_t_72b.cpp" language="C++" size="1635" checksum="2f7fc508ef71be2316011eb73c8049f1ecb57b37">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104690" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/690/CWE476_NULL_Pointer_Dereference__int64_t_73a.cpp" language="C++" size="2839" checksum="e893e38785ee61d43bd195729407cdf02d3d0432"></file>
    <file path="000/104/690/CWE476_NULL_Pointer_Dereference__int64_t_73b.cpp" language="C++" size="1623" checksum="95b457f4851879160f7aa81220855e96a9456991">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104691" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/691/CWE476_NULL_Pointer_Dereference__int64_t_74a.cpp" language="C++" size="2787" checksum="bd9c543f376381dee7dc003b2be00de9f4af9401"></file>
    <file path="000/104/691/CWE476_NULL_Pointer_Dereference__int64_t_74b.cpp" language="C++" size="1614" checksum="7d2e6ee9ec1c4242afbe3d9b7cfa93d3184d34f5">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104692" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/692/CWE476_NULL_Pointer_Dereference__int64_t_81.h" language="C" size="1429" checksum="920da7bb2eb26680d19242f2324f2dd505d2610f"></file>
    <file path="000/104/692/CWE476_NULL_Pointer_Dereference__int64_t_81_bad.cpp" language="C++" size="937" checksum="131f70e23b7a1ff5b209ab06d8b091c168eeabbd">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
    <file path="000/104/692/CWE476_NULL_Pointer_Dereference__int64_t_81_goodB2G.cpp" language="C++" size="1049" checksum="a042825f8fea0ed7ed70574e18b5da1a86da4f66"></file>
    <file path="000/104/692/CWE476_NULL_Pointer_Dereference__int64_t_81_goodG2B.cpp" language="C++" size="951" checksum="0bd7d638511272d4469e15fa9bc773fc196da5e4"></file>
    <file path="000/104/692/CWE476_NULL_Pointer_Dereference__int64_t_81a.cpp" language="C++" size="2620" checksum="f6d71f92478fdc862dbea2d30da5dea141f7aec9"></file>
  </testcase>
  <testcase id="104693" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/693/CWE476_NULL_Pointer_Dereference__int64_t_82.h" language="C" size="1403" checksum="05eb0a1b3d05121f0221b6b64b20ef2870490ceb"></file>
    <file path="000/104/693/CWE476_NULL_Pointer_Dereference__int64_t_82_bad.cpp" language="C++" size="929" checksum="cdcdd1de2f0777276df4cd635db89e7dfdf705f0">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
    <file path="000/104/693/CWE476_NULL_Pointer_Dereference__int64_t_82_goodB2G.cpp" language="C++" size="1041" checksum="3dc0a45e7109d7e2130a7d47aff98e620112949f"></file>
    <file path="000/104/693/CWE476_NULL_Pointer_Dereference__int64_t_82_goodG2B.cpp" language="C++" size="943" checksum="51a6b53097c6533c394c0066b08eb716c938f6da"></file>
    <file path="000/104/693/CWE476_NULL_Pointer_Dereference__int64_t_82a.cpp" language="C++" size="2681" checksum="fdf2d5910230db67ff73b8a6615a417d219d31d9"></file>
  </testcase>
  <testcase id="104694" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/694/CWE476_NULL_Pointer_Dereference__int_01.c" language="C" size="2348" checksum="68326825f11c9307636525d62d2a3b80aa85ec54">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104695" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/695/CWE476_NULL_Pointer_Dereference__int_02.c" language="C" size="3869" checksum="8f46de33d46fe3fd4c1327079be61fbead3a7a69">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104696" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/696/CWE476_NULL_Pointer_Dereference__int_03.c" language="C" size="3917" checksum="aeaac0e9381ca51846beb776bf7d5439c7226173">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104697" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/697/CWE476_NULL_Pointer_Dereference__int_04.c" language="C" size="4401" checksum="595790ac53711af16006edf764bae0f2c40a5fac">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104698" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/698/CWE476_NULL_Pointer_Dereference__int_05.c" language="C" size="4309" checksum="245ae5a61a3524cee35761b7f3896b0eedc41d18">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104699" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/699/CWE476_NULL_Pointer_Dereference__int_06.c" language="C" size="4367" checksum="915c759faeff1229c74cd826e4ac6f9f41b01cd6">
      <mixed line="40" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104700" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/700/CWE476_NULL_Pointer_Dereference__int_07.c" language="C" size="4284" checksum="6c63d17f8a768c197d54d26409a2b4487ce5c5a7">
      <mixed line="40" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104701" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/701/CWE476_NULL_Pointer_Dereference__int_08.c" language="C" size="4440" checksum="9dd85097f6d78b59d92b33fecf77fe1b1a5e1b96">
      <mixed line="48" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104702" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/702/CWE476_NULL_Pointer_Dereference__int_09.c" language="C" size="4130" checksum="166bc291a6b91cfa978f3f36ae87632082a6dbe0">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104703" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/703/CWE476_NULL_Pointer_Dereference__int_10.c" language="C" size="4018" checksum="b73c7d1a0b43ee35c9346cdb64502cda6679f79b">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104704" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/704/CWE476_NULL_Pointer_Dereference__int_11.c" language="C" size="4162" checksum="4fe23e7f1b5eeb6604486173a45842353ce2a66b">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104705" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/705/CWE476_NULL_Pointer_Dereference__int_12.c" language="C" size="4030" checksum="9fc6108fefe625ab1d04b537cf5d5b1afb134cc9">
      <mixed line="43" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104706" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/706/CWE476_NULL_Pointer_Dereference__int_13.c" language="C" size="4173" checksum="09c938b16f830291cf649ccd5633b3b36c06c892">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104707" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/707/CWE476_NULL_Pointer_Dereference__int_14.c" language="C" size="4061" checksum="ce4c95e2dd3ccc9156eec10b21197d1b65a5f61f">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104708" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/708/CWE476_NULL_Pointer_Dereference__int_15.c" language="C" size="5413" checksum="ba901b53ad44db164a358e0efe6b1caf58d33d04">
      <mixed line="42" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104709" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/709/CWE476_NULL_Pointer_Dereference__int_16.c" language="C" size="2807" checksum="ec12f0774c982b3e85a54bf6f97c9de98ebd100d">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104710" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/710/CWE476_NULL_Pointer_Dereference__int_17.c" language="C" size="2777" checksum="b239d55acfee3645e7fe96af46f6232f546387d2">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104711" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/711/CWE476_NULL_Pointer_Dereference__int_18.c" language="C" size="2612" checksum="71e18821e49285f68f80eab53bef3746b958a970">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104712" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/712/CWE476_NULL_Pointer_Dereference__int_21.c" language="C" size="3998" checksum="253d8ba805203e42905c5aeae243fe253a10fa2e">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104713" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/713/CWE476_NULL_Pointer_Dereference__int_22a.c" language="C" size="3630" checksum="e016ebe6d5684d334a92ef156c0c8339e8dddcd2"></file>
    <file path="000/104/713/CWE476_NULL_Pointer_Dereference__int_22b.c" language="C" size="2818" checksum="3ddce879ff473b468bafe30c9143b7ff3aa33ae8">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104714" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/714/CWE476_NULL_Pointer_Dereference__int_31.c" language="C" size="2683" checksum="a7f7e684f4bb1747696c12837f2f8db88f1d24f7">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104715" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 32 Data flow using two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/715/CWE476_NULL_Pointer_Dereference__int_32.c" language="C" size="3044" checksum="6d380e71d42a713f78a389c9c71ab87f2a7d1064">
      <mixed line="38" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104716" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/716/CWE476_NULL_Pointer_Dereference__int_33.cpp" language="C++" size="2711" checksum="84b7748aefa979b3ed0530c41883072fda9ba39e">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104717" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/717/CWE476_NULL_Pointer_Dereference__int_34.c" language="C" size="3076" checksum="4c0ee03f83be84165aa92df5a1a634002f8eb38d">
      <mixed line="40" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104718" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/718/CWE476_NULL_Pointer_Dereference__int_41.c" language="C" size="2629" checksum="b5d347cfdd84d7253140c9435c03dc9b7423673a">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104719" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/719/CWE476_NULL_Pointer_Dereference__int_44.c" language="C" size="2865" checksum="01d050f6aa624e7dfe7eeaf7d79c09788f72059e">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104720" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/720/CWE476_NULL_Pointer_Dereference__int_45.c" language="C" size="3201" checksum="f3f929cadf73d01d626f5c1e0e645aeb51b51d40">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104721" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/721/CWE476_NULL_Pointer_Dereference__int_51a.c" language="C" size="2501" checksum="4040e166d7cfb9d8abcdca13df96443c747776ce"></file>
    <file path="000/104/721/CWE476_NULL_Pointer_Dereference__int_51b.c" language="C" size="1404" checksum="78d5cd71124608380250f0d95cdf5440ea15230a">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104722" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/722/CWE476_NULL_Pointer_Dereference__int_52a.c" language="C" size="2518" checksum="bc55eafb170873f80737cd2a4a989f4f54c5a12c"></file>
    <file path="000/104/722/CWE476_NULL_Pointer_Dereference__int_52b.c" language="C" size="1488" checksum="c89dcf17a5247e25178b253ecc361a955f3f5dd5"></file>
    <file path="000/104/722/CWE476_NULL_Pointer_Dereference__int_52c.c" language="C" size="1421" checksum="1e9d722edeb27b80a1555fb9cdad7146a4428d86">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104723" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/723/CWE476_NULL_Pointer_Dereference__int_53a.c" language="C" size="2545" checksum="60e9bd78acb0eabbe67eb8468c2ba8f4206f93c2"></file>
    <file path="000/104/723/CWE476_NULL_Pointer_Dereference__int_53b.c" language="C" size="1515" checksum="7d1a8ef4cd13164ce99d4d5e1fc458878953b414"></file>
    <file path="000/104/723/CWE476_NULL_Pointer_Dereference__int_53c.c" language="C" size="1515" checksum="c81ebd3c33e2b0388a20ee1fbf4eade016c5f3f0"></file>
    <file path="000/104/723/CWE476_NULL_Pointer_Dereference__int_53d.c" language="C" size="1448" checksum="6b7ba164a5de84e23d5d552ff3f5ecf041e1e822">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104724" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/724/CWE476_NULL_Pointer_Dereference__int_54a.c" language="C" size="2546" checksum="cad6bc88a7eabc538d159051aa32865205533d6b"></file>
    <file path="000/104/724/CWE476_NULL_Pointer_Dereference__int_54b.c" language="C" size="1516" checksum="b87e5f91e0f8cce15de8617f141e3ab27f5fca17"></file>
    <file path="000/104/724/CWE476_NULL_Pointer_Dereference__int_54c.c" language="C" size="1516" checksum="e303bdb394627055541621709b85de4d3d97ee42"></file>
    <file path="000/104/724/CWE476_NULL_Pointer_Dereference__int_54d.c" language="C" size="1516" checksum="eb527c3c57204143d5c03f1e92b7c4d0b64e9afa"></file>
    <file path="000/104/724/CWE476_NULL_Pointer_Dereference__int_54e.c" language="C" size="1449" checksum="d551bdad41b65f1b7463b55a522026565c19ec80">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104725" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/725/CWE476_NULL_Pointer_Dereference__int_63a.c" language="C" size="2509" checksum="7cba6829c1c60dd1ded9c6c725b30cab8c9a88ee"></file>
    <file path="000/104/725/CWE476_NULL_Pointer_Dereference__int_63b.c" language="C" size="1499" checksum="cef2fffdf3143b12ebaf1fae1d92e64e3ae7c180">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104726" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/726/CWE476_NULL_Pointer_Dereference__int_64a.c" language="C" size="2529" checksum="17e2be87fe381a498b5c6951a9cb67cb506df7e2"></file>
    <file path="000/104/726/CWE476_NULL_Pointer_Dereference__int_64b.c" language="C" size="1975" checksum="261d2dd1d5b90d2703eca6edc6a3cf96ca2e3370">
      <mixed line="31" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104727" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/727/CWE476_NULL_Pointer_Dereference__int_65a.c" language="C" size="2736" checksum="475cbf5df8c43a8b1eb04da63db081f293efed59"></file>
    <file path="000/104/727/CWE476_NULL_Pointer_Dereference__int_65b.c" language="C" size="1446" checksum="d4ea09a50b27abcf24cb4fef67e4a23d68b3d738">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104728" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/728/CWE476_NULL_Pointer_Dereference__int_66a.c" language="C" size="2716" checksum="2a33c83d5f2c99df90be8b9aad2d78adba3fc726"></file>
    <file path="000/104/728/CWE476_NULL_Pointer_Dereference__int_66b.c" language="C" size="1556" checksum="ea8857347f85b09c63ef643c6c6e8c127700016d">
      <mixed line="29" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104729" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/729/CWE476_NULL_Pointer_Dereference__int_67a.c" language="C" size="3109" checksum="36c6499250ccb307a8d4360e97947187be0eb600"></file>
    <file path="000/104/729/CWE476_NULL_Pointer_Dereference__int_67b.c" language="C" size="1820" checksum="bbb355b40dd61403b9fbc1d8895239e0aadb1342">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104730" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/730/CWE476_NULL_Pointer_Dereference__int_68a.c" language="C" size="2866" checksum="a6b3785af5f376cc8cce1f8e5c2c104931574c31"></file>
    <file path="000/104/730/CWE476_NULL_Pointer_Dereference__int_68b.c" language="C" size="1788" checksum="973ac14b93d86cb587e5ffad6a3886acfab8dfcb">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104731" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/731/CWE476_NULL_Pointer_Dereference__int_72a.cpp" language="C++" size="3003" checksum="f621acdb74e7afc20e52320bbc689d8c6ca4358e"></file>
    <file path="000/104/731/CWE476_NULL_Pointer_Dereference__int_72b.cpp" language="C++" size="1588" checksum="ef101358af1d2a334147672fe2217206b8dc3059">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104732" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/732/CWE476_NULL_Pointer_Dereference__int_73a.cpp" language="C++" size="2785" checksum="4228b700d54bad7477f04864fcf5ac024fea253d"></file>
    <file path="000/104/732/CWE476_NULL_Pointer_Dereference__int_73b.cpp" language="C++" size="1576" checksum="acc853a776f7403cf51e5dcb9d4d604e684771df">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104733" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/733/CWE476_NULL_Pointer_Dereference__int_74a.cpp" language="C++" size="2733" checksum="759e5b0409a3b02cdd9ed784ae2c93b68e981e5d"></file>
    <file path="000/104/733/CWE476_NULL_Pointer_Dereference__int_74b.cpp" language="C++" size="1567" checksum="1f10996fb4ec38bf8b33963c913130bed74ae6d3">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104734" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/734/CWE476_NULL_Pointer_Dereference__int_81.h" language="C" size="1377" checksum="04cc342dc639fb64a80ab2b6d2cb487013084eb2"></file>
    <file path="000/104/734/CWE476_NULL_Pointer_Dereference__int_81_bad.cpp" language="C++" size="912" checksum="273c23339fd164885926a9b3c63eab1d837ee61a">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
    <file path="000/104/734/CWE476_NULL_Pointer_Dereference__int_81_goodB2G.cpp" language="C++" size="1024" checksum="607076f61506c61007a5e88d8396061c5f671bf6"></file>
    <file path="000/104/734/CWE476_NULL_Pointer_Dereference__int_81_goodG2B.cpp" language="C++" size="926" checksum="f6cec9272db40c3d112ab19bf10d34eaeddf4b69"></file>
    <file path="000/104/734/CWE476_NULL_Pointer_Dereference__int_81a.cpp" language="C++" size="2562" checksum="0c4f07e77dcaaf0185c171347fcea9b6dc00def5"></file>
  </testcase>
  <testcase id="104735" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/735/CWE476_NULL_Pointer_Dereference__int_82.h" language="C" size="1351" checksum="ca6bf897803c0225ec551301b1365006eee9e043"></file>
    <file path="000/104/735/CWE476_NULL_Pointer_Dereference__int_82_bad.cpp" language="C++" size="904" checksum="083f37e5214c88ca48496c89f87a1a32b335f27f">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
    <file path="000/104/735/CWE476_NULL_Pointer_Dereference__int_82_goodB2G.cpp" language="C++" size="1016" checksum="1e416f835bfafeccc832199f1df07621ccefa13d"></file>
    <file path="000/104/735/CWE476_NULL_Pointer_Dereference__int_82_goodG2B.cpp" language="C++" size="918" checksum="84f2cb434322e71e41945df0338af5111aec13e2"></file>
    <file path="000/104/735/CWE476_NULL_Pointer_Dereference__int_82a.cpp" language="C++" size="2623" checksum="b198614ad05773ed2fc82fc1a438f90c1ffb9672"></file>
  </testcase>
  <testcase id="104736" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/736/CWE476_NULL_Pointer_Dereference__long_01.c" language="C" size="2361" checksum="bc3d2a5e5b727d5e39775412684eb8435ac9b01a">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104737" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/737/CWE476_NULL_Pointer_Dereference__long_02.c" language="C" size="3888" checksum="34d836a3ec60c61681787af631d49b65e6d87fa8">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104738" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/738/CWE476_NULL_Pointer_Dereference__long_03.c" language="C" size="3936" checksum="b90d33bb95aec5dfb28c75b7747c39ce772c7bc2">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104739" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/739/CWE476_NULL_Pointer_Dereference__long_04.c" language="C" size="4420" checksum="d5e26b989c190b4c3124e5ce40ddd832725d552f">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104740" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/740/CWE476_NULL_Pointer_Dereference__long_05.c" language="C" size="4328" checksum="d5afb2410ebfd29f79c53469929167bf82268be3">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104741" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/741/CWE476_NULL_Pointer_Dereference__long_06.c" language="C" size="4386" checksum="de6ba3eca9ee325768887a3f7de7381fff3b44e6">
      <mixed line="40" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104742" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/742/CWE476_NULL_Pointer_Dereference__long_07.c" language="C" size="4303" checksum="67a39ac57e92be08039257e32ff258efba49b63b">
      <mixed line="40" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104743" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/743/CWE476_NULL_Pointer_Dereference__long_08.c" language="C" size="4459" checksum="218bd84c279e483eef8f352522e619ed17cc3330">
      <mixed line="48" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104744" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/744/CWE476_NULL_Pointer_Dereference__long_09.c" language="C" size="4149" checksum="5e4f05bb10ce97eab03008784ddc0e1de26fc109">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104745" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/745/CWE476_NULL_Pointer_Dereference__long_10.c" language="C" size="4037" checksum="f5da7e5beab8b8114f126479eda345caec440be2">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104746" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/746/CWE476_NULL_Pointer_Dereference__long_11.c" language="C" size="4181" checksum="878aee444454c6b975d07c952636d460ca5b8865">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104747" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/747/CWE476_NULL_Pointer_Dereference__long_12.c" language="C" size="4050" checksum="3d58e49d8c89ddb2d94178bb2e1b6356823fef4f">
      <mixed line="43" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104748" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/748/CWE476_NULL_Pointer_Dereference__long_13.c" language="C" size="4192" checksum="6e2e11476694ceb2874d31864e510045046cc9c7">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104749" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/749/CWE476_NULL_Pointer_Dereference__long_14.c" language="C" size="4080" checksum="8fddf2a100a8f394f2f6ff4f2b702adcf81d23e9">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104750" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/750/CWE476_NULL_Pointer_Dereference__long_15.c" language="C" size="5432" checksum="af57fd96a49f9733a2121fffb1382ed9f246d9b8">
      <mixed line="42" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104751" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/751/CWE476_NULL_Pointer_Dereference__long_16.c" language="C" size="2820" checksum="2332a295244621e008409be29ebc00ee84e2ed8d">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104752" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/752/CWE476_NULL_Pointer_Dereference__long_17.c" language="C" size="2790" checksum="2311ead9c91eda44380d9da6f53bc24dec106c56">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104753" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/753/CWE476_NULL_Pointer_Dereference__long_18.c" language="C" size="2625" checksum="a9a5d36970c40a82bdd15e131676a270e81b013d">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104754" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/754/CWE476_NULL_Pointer_Dereference__long_21.c" language="C" size="4017" checksum="2d49f201c6d3f3d18548e63bedd55eb8668cd99c">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104755" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/755/CWE476_NULL_Pointer_Dereference__long_22a.c" language="C" size="3661" checksum="9d86aac1efdced67d724ab6bf36bdfd6b1b58f37"></file>
    <file path="000/104/755/CWE476_NULL_Pointer_Dereference__long_22b.c" language="C" size="2839" checksum="f672e7e31a9b5bfd4d35017d463c7918f26f4b93">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104756" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/756/CWE476_NULL_Pointer_Dereference__long_31.c" language="C" size="2702" checksum="0d14b2b1826eefff6242c8e7731a8ce6def9281d">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104757" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 32 Data flow using two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/757/CWE476_NULL_Pointer_Dereference__long_32.c" language="C" size="3069" checksum="9f5f8d9fab7199da68887158b511d2ba66103064">
      <mixed line="38" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104758" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/758/CWE476_NULL_Pointer_Dereference__long_33.cpp" language="C++" size="2728" checksum="6d5112cf535099216345be1447e788f9ee722d39">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104759" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/759/CWE476_NULL_Pointer_Dereference__long_34.c" language="C" size="3098" checksum="f5a1f4f647fd8cd422fd2095ff11da15e2725df2">
      <mixed line="40" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104760" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/760/CWE476_NULL_Pointer_Dereference__long_41.c" language="C" size="2645" checksum="061f14e552bea770af17f17aaed6364f9f77221a">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104761" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/761/CWE476_NULL_Pointer_Dereference__long_44.c" language="C" size="2884" checksum="2602fa7f31679ebfd4d9ce3affb2ce81ee68744f">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104762" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/762/CWE476_NULL_Pointer_Dereference__long_45.c" language="C" size="3229" checksum="d707316b9bee6e5dcf34b95b6db4559dd20839da">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104763" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/763/CWE476_NULL_Pointer_Dereference__long_51a.c" language="C" size="2520" checksum="c4cf5d74787dca536ed3a9b4023b4abc6a826ece"></file>
    <file path="000/104/763/CWE476_NULL_Pointer_Dereference__long_51b.c" language="C" size="1414" checksum="4712ace709563025b4806a9d4a5ee57ae78a15b9">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104764" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/764/CWE476_NULL_Pointer_Dereference__long_52a.c" language="C" size="2537" checksum="d529a32abc843504f610d386933ab22ed36fa806"></file>
    <file path="000/104/764/CWE476_NULL_Pointer_Dereference__long_52b.c" language="C" size="1504" checksum="ba508e89cd8a6114b9e479a833c5454a2110f552"></file>
    <file path="000/104/764/CWE476_NULL_Pointer_Dereference__long_52c.c" language="C" size="1431" checksum="d9375f251ab1ef0759431349d2b89ca0be165a7a">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104765" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/765/CWE476_NULL_Pointer_Dereference__long_53a.c" language="C" size="2564" checksum="832873e93f6354568d787cb254767c7d9f7d74be"></file>
    <file path="000/104/765/CWE476_NULL_Pointer_Dereference__long_53b.c" language="C" size="1531" checksum="2e49c5c42a24d744024d7d2c0410da4c38fefc4e"></file>
    <file path="000/104/765/CWE476_NULL_Pointer_Dereference__long_53c.c" language="C" size="1531" checksum="1a2084c26af9eda2cbfd8782c09e1d94b4f122c2"></file>
    <file path="000/104/765/CWE476_NULL_Pointer_Dereference__long_53d.c" language="C" size="1458" checksum="cbb0627ff7275ae617c34a45283cc9dc3635baf1">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104766" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/766/CWE476_NULL_Pointer_Dereference__long_54a.c" language="C" size="2565" checksum="ddd3cb6d7d1488dc01421d8eaaeb0ea49a2a1448"></file>
    <file path="000/104/766/CWE476_NULL_Pointer_Dereference__long_54b.c" language="C" size="1532" checksum="aeefa50eb56e3817f8407526bb9db955ea5b4e9d"></file>
    <file path="000/104/766/CWE476_NULL_Pointer_Dereference__long_54c.c" language="C" size="1532" checksum="87745f646eaa69d45f5b9162d52b61827b6660bf"></file>
    <file path="000/104/766/CWE476_NULL_Pointer_Dereference__long_54d.c" language="C" size="1532" checksum="a34d5e9572982d10243f5b8b98b8a104a03532b3"></file>
    <file path="000/104/766/CWE476_NULL_Pointer_Dereference__long_54e.c" language="C" size="1459" checksum="ed71507c4ad640cb431040002c5d901cbb32ae54">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104767" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/767/CWE476_NULL_Pointer_Dereference__long_63a.c" language="C" size="2528" checksum="e083b6da9277bc18a79f1936fa26afb2580c18e7"></file>
    <file path="000/104/767/CWE476_NULL_Pointer_Dereference__long_63b.c" language="C" size="1512" checksum="306a934f5d811bca718bf882c9ed7dea55ddf9e3">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104768" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/768/CWE476_NULL_Pointer_Dereference__long_64a.c" language="C" size="2545" checksum="fbd48147c7bf19da15706f45b5197ab57426bce8"></file>
    <file path="000/104/768/CWE476_NULL_Pointer_Dereference__long_64b.c" language="C" size="1991" checksum="a4448cee4bf0eaf621574e88eb8fde15d02ac660">
      <mixed line="31" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104769" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/769/CWE476_NULL_Pointer_Dereference__long_65a.c" language="C" size="2758" checksum="4863573128cd898184d60d77ff17dacb8e61b4f4"></file>
    <file path="000/104/769/CWE476_NULL_Pointer_Dereference__long_65b.c" language="C" size="1456" checksum="6fd441c818a4b3bb08fb5841b0a08286deeab8c3">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104770" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/770/CWE476_NULL_Pointer_Dereference__long_66a.c" language="C" size="2738" checksum="6f592904e428e3a5c07dea37cc759868f79eefe5"></file>
    <file path="000/104/770/CWE476_NULL_Pointer_Dereference__long_66b.c" language="C" size="1569" checksum="90938bad291f251bcfca8372f649541fc56b8241">
      <mixed line="29" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104771" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/771/CWE476_NULL_Pointer_Dereference__long_67a.c" language="C" size="3134" checksum="56717568e8e9ab23d5d3d6f3af1db1ff3eb64839"></file>
    <file path="000/104/771/CWE476_NULL_Pointer_Dereference__long_67b.c" language="C" size="1836" checksum="a0437136e1e0059c4350527822a08ca4f00457df">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104772" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/772/CWE476_NULL_Pointer_Dereference__long_68a.c" language="C" size="2891" checksum="7d5689404b66e83bfbbbbac1c93173212be88403"></file>
    <file path="000/104/772/CWE476_NULL_Pointer_Dereference__long_68b.c" language="C" size="1807" checksum="35a4377d8defacf2a318b89d55285144ffbf2e22">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104773" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/773/CWE476_NULL_Pointer_Dereference__long_72a.cpp" language="C++" size="3017" checksum="959277841bbb05a2487098a97b68b3f7ef9d0372"></file>
    <file path="000/104/773/CWE476_NULL_Pointer_Dereference__long_72b.cpp" language="C++" size="1599" checksum="e63bd57380eecf48d17db054c8c4d32d0bb49741">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104774" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/774/CWE476_NULL_Pointer_Dereference__long_73a.cpp" language="C++" size="2799" checksum="ce0c74999a61a33784452322c5ed374742706786"></file>
    <file path="000/104/774/CWE476_NULL_Pointer_Dereference__long_73b.cpp" language="C++" size="1587" checksum="ccd7836906471fa69e97d36891f36c2f922ec873">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104775" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/775/CWE476_NULL_Pointer_Dereference__long_74a.cpp" language="C++" size="2747" checksum="7eff0cc8282ee0341ce8e64a74f3f88f34c7340e"></file>
    <file path="000/104/775/CWE476_NULL_Pointer_Dereference__long_74b.cpp" language="C++" size="1578" checksum="20f8dedb84083011bcc9c6738d515c61bd198829">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104776" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/776/CWE476_NULL_Pointer_Dereference__long_81.h" language="C" size="1390" checksum="c6c8360ae5817f35ea072be0bb1d5dc44017dc56"></file>
    <file path="000/104/776/CWE476_NULL_Pointer_Dereference__long_81_bad.cpp" language="C++" size="918" checksum="44a42b72cd6586cb35cdd4d38d379bdfca09af3c">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
    <file path="000/104/776/CWE476_NULL_Pointer_Dereference__long_81_goodB2G.cpp" language="C++" size="1030" checksum="5ac5e87d88d83c33da38551dceed550efe104e90"></file>
    <file path="000/104/776/CWE476_NULL_Pointer_Dereference__long_81_goodG2B.cpp" language="C++" size="932" checksum="fa53823faffa9f31bcfd36d240fabb008351c9c8"></file>
    <file path="000/104/776/CWE476_NULL_Pointer_Dereference__long_81a.cpp" language="C++" size="2577" checksum="8563b313880da6cdb6200dcefb236934497ecef2"></file>
  </testcase>
  <testcase id="104777" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/777/CWE476_NULL_Pointer_Dereference__long_82.h" language="C" size="1364" checksum="21aac20e208aae3a386efaa3aa79ce3eab5a05d0"></file>
    <file path="000/104/777/CWE476_NULL_Pointer_Dereference__long_82_bad.cpp" language="C++" size="910" checksum="a4c8763afb83a31386cd1de5c64c85763912fffa">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
    <file path="000/104/777/CWE476_NULL_Pointer_Dereference__long_82_goodB2G.cpp" language="C++" size="1022" checksum="1b082b929c68166206916edc26299611c9fc6287"></file>
    <file path="000/104/777/CWE476_NULL_Pointer_Dereference__long_82_goodG2B.cpp" language="C++" size="924" checksum="9aa444b72f6d4d9eadad7de8c837ffec4afef102"></file>
    <file path="000/104/777/CWE476_NULL_Pointer_Dereference__long_82a.cpp" language="C++" size="2638" checksum="ae26bcfde451a80ed90df97f45cc96685a35dc8a"></file>
  </testcase>
  <testcase id="104778" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/778/CWE476_NULL_Pointer_Dereference__null_check_after_deref_01.c" language="C" size="2352" checksum="3076dd2cad990addd30b8ff53b324f94a90efb16">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104779" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/779/CWE476_NULL_Pointer_Dereference__null_check_after_deref_02.c" language="C" size="3174" checksum="ea7de755fb1dd2f734ac444723690c8cfa3059a6">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104780" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/780/CWE476_NULL_Pointer_Dereference__null_check_after_deref_03.c" language="C" size="3195" checksum="eccea4e240691835f4373b593990fadbdf6e4bea">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104781" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/781/CWE476_NULL_Pointer_Dereference__null_check_after_deref_04.c" language="C" size="3560" checksum="4ccf9fc2217bb001b8dacf6c65e2d32a5399a492">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104782" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/782/CWE476_NULL_Pointer_Dereference__null_check_after_deref_05.c" language="C" size="3531" checksum="f46430d260aabc47b0b8a81b444c4188392bdc61">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104783" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/783/CWE476_NULL_Pointer_Dereference__null_check_after_deref_06.c" language="C" size="3501" checksum="853b6980941be20547db07027fd98fa1efe3d4ac">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104784" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/784/CWE476_NULL_Pointer_Dereference__null_check_after_deref_07.c" language="C" size="3481" checksum="8e17ca9fa6be3134bac8504b482595d4b66e631e">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104785" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/785/CWE476_NULL_Pointer_Dereference__null_check_after_deref_08.c" language="C" size="3581" checksum="094612ecacb61c92b92d14334545663d46fb99cc">
      <mixed line="43" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104786" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/786/CWE476_NULL_Pointer_Dereference__null_check_after_deref_09.c" language="C" size="3289" checksum="882d08632b36931d54f13fb9aa3dea084291eccb">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104787" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/787/CWE476_NULL_Pointer_Dereference__null_check_after_deref_10.c" language="C" size="3240" checksum="af29e27740aa7ac919a0eb0930b541d732b1d8fc">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104788" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/788/CWE476_NULL_Pointer_Dereference__null_check_after_deref_11.c" language="C" size="3303" checksum="7f1184ed60948532bcc41708d83110150d5b9520">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104789" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/789/CWE476_NULL_Pointer_Dereference__null_check_after_deref_12.c" language="C" size="3403" checksum="83140da7b3ee17c5784e2a894284c0125a3baa26">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104790" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/790/CWE476_NULL_Pointer_Dereference__null_check_after_deref_13.c" language="C" size="3307" checksum="f9e60834b8b8a4c8e7ccf428cc4d464ff36836ad">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104791" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/791/CWE476_NULL_Pointer_Dereference__null_check_after_deref_14.c" language="C" size="3258" checksum="8fba6836083899235aa29cc263ffa7f2ea068303">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104792" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/792/CWE476_NULL_Pointer_Dereference__null_check_after_deref_15.c" language="C" size="3439" checksum="aa22180d8ddab3637bc4b82216d6ae1cf3c7d796">
      <mixed line="31" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104793" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/793/CWE476_NULL_Pointer_Dereference__null_check_after_deref_16.c" language="C" size="2593" checksum="fe82f4d90e78c1ea3a99a788807d9252ce19d429">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104794" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/794/CWE476_NULL_Pointer_Dereference__null_check_after_deref_17.c" language="C" size="2618" checksum="cbc0f83e6b96b593e0a86deb1f45b2faaf81f321">
      <mixed line="31" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104795" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> Sinks: null_check_after_deref<br/> GoodSink: Do not check for NULL after the pointer has been dereferenced<br/> BadSink : Check for NULL after a pointer has already been dereferenced<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/795/CWE476_NULL_Pointer_Dereference__null_check_after_deref_18.c" language="C" size="2476" checksum="f19de205e3922d00aaf9541dbc417eb8e698e7e8">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104796" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/796/CWE476_NULL_Pointer_Dereference__struct_01.c" language="C" size="2478" checksum="595a772e7d33f6bc4e090ceefb3959c4c9d410ce">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104797" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/797/CWE476_NULL_Pointer_Dereference__struct_02.c" language="C" size="4113" checksum="6d0982247ea48a2b908c5f7ead7a89bb3ff16fcc">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104798" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/798/CWE476_NULL_Pointer_Dereference__struct_03.c" language="C" size="4161" checksum="7a6feb978cd2d6b40b8b9c9ba2d2c81ef0b6a2bb">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104799" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/799/CWE476_NULL_Pointer_Dereference__struct_04.c" language="C" size="4645" checksum="461eed7d4190caaafd9505f60b2c40aa2eef7711">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104800" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/800/CWE476_NULL_Pointer_Dereference__struct_05.c" language="C" size="4553" checksum="d4bf03c8792e687407d09bc2053453b514038282">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104801" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/801/CWE476_NULL_Pointer_Dereference__struct_06.c" language="C" size="4611" checksum="7edcfc4d19a57c19b4435bf5f2e5bb838eee8674">
      <mixed line="40" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104802" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/802/CWE476_NULL_Pointer_Dereference__struct_07.c" language="C" size="4528" checksum="9b02203de0b410da4a1d57dd577f4c378e2ed614">
      <mixed line="40" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104803" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/803/CWE476_NULL_Pointer_Dereference__struct_08.c" language="C" size="4684" checksum="74b2080afc0524240e1173d31bd3b911c4b1e9b8">
      <mixed line="48" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104804" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/804/CWE476_NULL_Pointer_Dereference__struct_09.c" language="C" size="4374" checksum="5784914b64127063921e69e4494fbf9ae834cf4b">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104805" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/805/CWE476_NULL_Pointer_Dereference__struct_10.c" language="C" size="4262" checksum="5caf9633f674ed4c7fd1955cc166023e308fce45">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104806" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/806/CWE476_NULL_Pointer_Dereference__struct_11.c" language="C" size="4406" checksum="e8cf55b8ed35489a14e20a43545665f3938f76c9">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104807" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/807/CWE476_NULL_Pointer_Dereference__struct_12.c" language="C" size="4333" checksum="086586c480df18a4edb1d79b6f36c1ae79dee932">
      <mixed line="45" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104808" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/808/CWE476_NULL_Pointer_Dereference__struct_13.c" language="C" size="4417" checksum="cc32f1b25b7ceed663d50c24bfb3555a077f8fbe">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104809" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/809/CWE476_NULL_Pointer_Dereference__struct_14.c" language="C" size="4305" checksum="c585addbb8ea01983dddab01684e4661f15c08a6">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104810" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/810/CWE476_NULL_Pointer_Dereference__struct_15.c" language="C" size="5641" checksum="8c6e0b03f2873246e9d861c4591aff0ef4f4584b">
      <mixed line="42" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104811" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/811/CWE476_NULL_Pointer_Dereference__struct_16.c" language="C" size="2945" checksum="8bd36bef036a68b2e6eb098fa56adfde909c01c0">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104812" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/812/CWE476_NULL_Pointer_Dereference__struct_17.c" language="C" size="2915" checksum="5984b963edcf1c2bff3817fc2f6fde9a5008c597">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104813" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/813/CWE476_NULL_Pointer_Dereference__struct_18.c" language="C" size="2742" checksum="ac9e0ee48cfdb0e18d20f5181e714eed5d036bd0">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104814" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/814/CWE476_NULL_Pointer_Dereference__struct_21.c" language="C" size="4185" checksum="ec4c81a114cd4ff51c2cbed85b5b0c7ebd014440">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104815" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/815/CWE476_NULL_Pointer_Dereference__struct_22a.c" language="C" size="3837" checksum="0f1bb475c64a9e0ae29bcd9fa4404a8471e2da32"></file>
    <file path="000/104/815/CWE476_NULL_Pointer_Dereference__struct_22b.c" language="C" size="2925" checksum="e3defde9c854c981658f4c78c03b438dd23422d4">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104816" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/816/CWE476_NULL_Pointer_Dereference__struct_31.c" language="C" size="2873" checksum="e33704d13887e0b66beddfea446330c3186e8c73">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104817" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 32 Data flow using two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/817/CWE476_NULL_Pointer_Dereference__struct_32.c" language="C" size="3302" checksum="26a6c2213f7fc6482a75ad9c19063138d14428e9">
      <mixed line="38" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104818" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/818/CWE476_NULL_Pointer_Dereference__struct_33.cpp" language="C++" size="2895" checksum="232cf8132c73c08c38fa8139c0b9a936ba26b14a">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104819" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/819/CWE476_NULL_Pointer_Dereference__struct_34.c" language="C" size="3268" checksum="df04a9a6e77c4fdf9c6530f338afa2afa2c7f429">
      <mixed line="40" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104820" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/820/CWE476_NULL_Pointer_Dereference__struct_41.c" language="C" size="2789" checksum="a846a9d431a04e4228ed9a3334b9be3b95da65cc">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104821" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/821/CWE476_NULL_Pointer_Dereference__struct_44.c" language="C" size="3055" checksum="1f1f2a88693f427e401f6b54548a3f8e8240037d">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104822" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/822/CWE476_NULL_Pointer_Dereference__struct_45.c" language="C" size="3418" checksum="cb248f4e687abd21efd3c1cf9730ddad43f8d7e2">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104823" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/823/CWE476_NULL_Pointer_Dereference__struct_51a.c" language="C" size="2658" checksum="287c0c2a732dac5b566a5a740bba949575120803"></file>
    <file path="000/104/823/CWE476_NULL_Pointer_Dereference__struct_51b.c" language="C" size="1467" checksum="d2c1086fe8881f33e9e64b229442ab79e1371b72">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104824" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/824/CWE476_NULL_Pointer_Dereference__struct_52a.c" language="C" size="2675" checksum="8a706a147bd3b4d9411b1b8fa269917ec24ade49"></file>
    <file path="000/104/824/CWE476_NULL_Pointer_Dereference__struct_52b.c" language="C" size="1578" checksum="b6749caa541d3039725f7edabd0a20ca804fd838"></file>
    <file path="000/104/824/CWE476_NULL_Pointer_Dereference__struct_52c.c" language="C" size="1484" checksum="798a34a3c453aac167998a789b518712228fa9c4">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104825" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/825/CWE476_NULL_Pointer_Dereference__struct_53a.c" language="C" size="2702" checksum="2d9d81e4d405a8f4c9a70b8a1a1fa04c7f7e455f"></file>
    <file path="000/104/825/CWE476_NULL_Pointer_Dereference__struct_53b.c" language="C" size="1605" checksum="5f21410062e7bce750d2c4687d25ce1217d79421"></file>
    <file path="000/104/825/CWE476_NULL_Pointer_Dereference__struct_53c.c" language="C" size="1605" checksum="1fffdbb4ce14e7d068ecac077e9e74711746b18a"></file>
    <file path="000/104/825/CWE476_NULL_Pointer_Dereference__struct_53d.c" language="C" size="1511" checksum="eb32c1bac6ac9006160795d1e4b2cf8e308e4bf3">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104826" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/826/CWE476_NULL_Pointer_Dereference__struct_54a.c" language="C" size="2703" checksum="a84027f00e28a5c5cd809b7157bc0a9a55253003"></file>
    <file path="000/104/826/CWE476_NULL_Pointer_Dereference__struct_54b.c" language="C" size="1606" checksum="69d8138b34d4e8730f2e0a5e68e58e2c92ffc23d"></file>
    <file path="000/104/826/CWE476_NULL_Pointer_Dereference__struct_54c.c" language="C" size="1606" checksum="0f458eeb7feded60b7bb23185f120268977e7a95"></file>
    <file path="000/104/826/CWE476_NULL_Pointer_Dereference__struct_54d.c" language="C" size="1606" checksum="ade561ad26b3e412b5c15b3e113f6fc76caaea4d"></file>
    <file path="000/104/826/CWE476_NULL_Pointer_Dereference__struct_54e.c" language="C" size="1512" checksum="d0e1d94131f82d94391352a39572b97768b4fa5a">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104827" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/827/CWE476_NULL_Pointer_Dereference__struct_63a.c" language="C" size="2666" checksum="5a971a88d7655469ef3fc50c439c246bcb6300c9"></file>
    <file path="000/104/827/CWE476_NULL_Pointer_Dereference__struct_63b.c" language="C" size="1592" checksum="fe867c0bddb83fa4669b660bf350adc2635d992c">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104828" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/828/CWE476_NULL_Pointer_Dereference__struct_64a.c" language="C" size="2656" checksum="6ba6a0d87066f2e49ff34f7533d3503abcfff951"></file>
    <file path="000/104/828/CWE476_NULL_Pointer_Dereference__struct_64b.c" language="C" size="2098" checksum="c5ae673714c3c353e09edf494bd1b90dae1c959f">
      <mixed line="31" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104829" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/829/CWE476_NULL_Pointer_Dereference__struct_65a.c" language="C" size="2923" checksum="8432f7e21445788d234bbf10c2cf057205868e41"></file>
    <file path="000/104/829/CWE476_NULL_Pointer_Dereference__struct_65b.c" language="C" size="1509" checksum="7902b56196ab65bd914dcb0f1f459a1933fe45c2">
      <mixed line="27" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104830" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/830/CWE476_NULL_Pointer_Dereference__struct_66a.c" language="C" size="2903" checksum="7203b325bf0f978eaa96fae82f1fc2412f138dac"></file>
    <file path="000/104/830/CWE476_NULL_Pointer_Dereference__struct_66b.c" language="C" size="1649" checksum="0927b6a52e6395ad8495d4dd1f333d554ee4bf65">
      <mixed line="29" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104831" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/831/CWE476_NULL_Pointer_Dereference__struct_67a.c" language="C" size="3270" checksum="5214116c57e85eaa639a3c9d1bbe4bfac344ebb2"></file>
    <file path="000/104/831/CWE476_NULL_Pointer_Dereference__struct_67b.c" language="C" size="1908" checksum="650ef1e4fba78135d6cc2863d2cd70f022514717">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104832" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/832/CWE476_NULL_Pointer_Dereference__struct_68a.c" language="C" size="3041" checksum="882ae52ddcdd85cbf7c6580c00dbd2b10b6d9365"></file>
    <file path="000/104/832/CWE476_NULL_Pointer_Dereference__struct_68b.c" language="C" size="1899" checksum="05df52ee3bbbb112fa6520658d797270820c9b76">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104833" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/833/CWE476_NULL_Pointer_Dereference__struct_72a.cpp" language="C++" size="3166" checksum="2262144499b9199f5b1ac0a8f94a009487bf5ab4"></file>
    <file path="000/104/833/CWE476_NULL_Pointer_Dereference__struct_72b.cpp" language="C++" size="1675" checksum="3676bef146992463c13a391398ece3b2ff2945b2">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104834" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/834/CWE476_NULL_Pointer_Dereference__struct_73a.cpp" language="C++" size="2948" checksum="51403fd888192428037bef960c8b56256cdef128"></file>
    <file path="000/104/834/CWE476_NULL_Pointer_Dereference__struct_73b.cpp" language="C++" size="1663" checksum="a7fba361e7caf848e3bdec8ac0fedfab207f5015">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104835" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/835/CWE476_NULL_Pointer_Dereference__struct_74a.cpp" language="C++" size="2896" checksum="437979126852df4972cddc858a698cd75025c05e"></file>
    <file path="000/104/835/CWE476_NULL_Pointer_Dereference__struct_74b.cpp" language="C++" size="1654" checksum="ec4a56dd18cff0c509a0a008fffe7dc8c28c01a1">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104836" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/836/CWE476_NULL_Pointer_Dereference__struct_81.h" language="C" size="1444" checksum="2f70830b31b459e61ac9c59c65c8c2fe1a288c92"></file>
    <file path="000/104/836/CWE476_NULL_Pointer_Dereference__struct_81_bad.cpp" language="C++" size="941" checksum="89ce0f4bb9c001725ad8844d4f164ce364211b9a">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
    <file path="000/104/836/CWE476_NULL_Pointer_Dereference__struct_81_goodB2G.cpp" language="C++" size="1053" checksum="02e3456606e1b03e2850e69a10957d52b20f43a4"></file>
    <file path="000/104/836/CWE476_NULL_Pointer_Dereference__struct_81_goodG2B.cpp" language="C++" size="955" checksum="53b6b6a48abe988d8ca282ca6231147ce7a8aa8f"></file>
    <file path="000/104/836/CWE476_NULL_Pointer_Dereference__struct_81a.cpp" language="C++" size="2686" checksum="9aa44434191f29915b77c4a9cf8030a597eb662a"></file>
  </testcase>
  <testcase id="104837" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/837/CWE476_NULL_Pointer_Dereference__struct_82.h" language="C" size="1418" checksum="1079b407f5db3fcf4615e3429be906a0239dc98a"></file>
    <file path="000/104/837/CWE476_NULL_Pointer_Dereference__struct_82_bad.cpp" language="C++" size="933" checksum="4376d213ef121a58d44177488c5f323a51412767">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
    <file path="000/104/837/CWE476_NULL_Pointer_Dereference__struct_82_goodB2G.cpp" language="C++" size="1045" checksum="e31d2613ed22b0c47f28a4146ecae3a34838cc52"></file>
    <file path="000/104/837/CWE476_NULL_Pointer_Dereference__struct_82_goodG2B.cpp" language="C++" size="947" checksum="40c3c385672e98648e49922577674feb3dddb6eb"></file>
    <file path="000/104/837/CWE476_NULL_Pointer_Dereference__struct_82a.cpp" language="C++" size="2747" checksum="10d10261b8577b5c42e996ccd94095bb340918c9"></file>
  </testcase>
  <testcase id="104838" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/838/CWE476_NULL_Pointer_Dereference__wchar_t_01.c" language="C" size="2549" checksum="4c3afe583ae210e5ad5dbaac77a00df2b83f95b7">
      <mixed line="31" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104839" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/839/CWE476_NULL_Pointer_Dereference__wchar_t_02.c" language="C" size="4173" checksum="118ce419b05eb120c7c9892f9ebd10c965efa512">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104840" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/840/CWE476_NULL_Pointer_Dereference__wchar_t_03.c" language="C" size="4221" checksum="9fa8573285e1f5e5e97cdcdc081183d340aaa9a3">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104841" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/841/CWE476_NULL_Pointer_Dereference__wchar_t_04.c" language="C" size="4705" checksum="9c28969c0718b9668ffee1b403a182de23c35686">
      <mixed line="42" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104842" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/842/CWE476_NULL_Pointer_Dereference__wchar_t_05.c" language="C" size="4613" checksum="1a03997c988ad28d784572eb87e954d373f078e0">
      <mixed line="42" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104843" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/843/CWE476_NULL_Pointer_Dereference__wchar_t_06.c" language="C" size="4671" checksum="b6647931dbc0ec0f6b2742e39818624cc3b7d349">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104844" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/844/CWE476_NULL_Pointer_Dereference__wchar_t_07.c" language="C" size="4588" checksum="3698ffb1dfa4d8fa03365dd67ceb132128dfd84c">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104845" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/845/CWE476_NULL_Pointer_Dereference__wchar_t_08.c" language="C" size="4744" checksum="67ca2a10379844ee2b106949d6082eb78f1744d3">
      <mixed line="49" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104846" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/846/CWE476_NULL_Pointer_Dereference__wchar_t_09.c" language="C" size="4434" checksum="f96b175738e80d4647f8096310962b2ac86c1a0b">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104847" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/847/CWE476_NULL_Pointer_Dereference__wchar_t_10.c" language="C" size="4322" checksum="94497d907a87046590b8f4a7990a90c845858fd5">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104848" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/848/CWE476_NULL_Pointer_Dereference__wchar_t_11.c" language="C" size="4466" checksum="c05bc0dcd866f6746769adfe4af7192b795730cb">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104849" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/849/CWE476_NULL_Pointer_Dereference__wchar_t_12.c" language="C" size="4347" checksum="6910720b9d27e50ef7654bffc5e5d0e1dbe56e20">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104850" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/850/CWE476_NULL_Pointer_Dereference__wchar_t_13.c" language="C" size="4477" checksum="7a0f4318074b2155053007174467c134aa766eb0">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104851" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/851/CWE476_NULL_Pointer_Dereference__wchar_t_14.c" language="C" size="4365" checksum="4353f217d4795c7e14d66bc95811b2924899c512">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104852" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/852/CWE476_NULL_Pointer_Dereference__wchar_t_15.c" language="C" size="5757" checksum="512d352823783c6ed0c895551f8b6cf28f7cd067">
      <mixed line="43" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104853" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/853/CWE476_NULL_Pointer_Dereference__wchar_t_16.c" language="C" size="3008" checksum="c4662af84dc2939a938cd55a9218e4b5ffd20cb8">
      <mixed line="37" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104854" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/854/CWE476_NULL_Pointer_Dereference__wchar_t_17.c" language="C" size="2978" checksum="3d3847a50d6ab65e768c5f414227643d13f366d4">
      <mixed line="37" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104855" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/855/CWE476_NULL_Pointer_Dereference__wchar_t_18.c" language="C" size="2813" checksum="c41f78c3174c0cef42d542e4248c6845f25f7f33">
      <mixed line="35" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104856" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/856/CWE476_NULL_Pointer_Dereference__wchar_t_21.c" language="C" size="4309" checksum="8399e75144080ece6b2a60ecebf77338b4e81307">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104857" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/857/CWE476_NULL_Pointer_Dereference__wchar_t_22a.c" language="C" size="3701" checksum="b58f3a50604b0d641f726363797358cb64ae3294"></file>
    <file path="000/104/857/CWE476_NULL_Pointer_Dereference__wchar_t_22b.c" language="C" size="3190" checksum="872acd66d9d004e8bb4d8bece5dd2bfe55072d3b">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104858" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/858/CWE476_NULL_Pointer_Dereference__wchar_t_31.c" language="C" size="2920" checksum="a49bd6bd8c27a387c564499a5458d66e7b2501ee">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104859" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 32 Data flow using two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/859/CWE476_NULL_Pointer_Dereference__wchar_t_32.c" language="C" size="3293" checksum="1a19db9c974bb3a9b8fb597a2c166c3f786bb36a">
      <mixed line="39" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104860" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/860/CWE476_NULL_Pointer_Dereference__wchar_t_33.cpp" language="C++" size="2940" checksum="0ff140f03bb4393dbb30de05d067e348f8cc9e2c">
      <mixed line="37" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104861" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/861/CWE476_NULL_Pointer_Dereference__wchar_t_34.c" language="C" size="3325" checksum="45859f8a7f1992cb7eee93662d64ba6dce134313">
      <mixed line="41" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104862" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/862/CWE476_NULL_Pointer_Dereference__wchar_t_41.c" language="C" size="2842" checksum="51d88b9fa7a5f4f8e6748b3019223200df1b4c96">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104863" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/863/CWE476_NULL_Pointer_Dereference__wchar_t_44.c" language="C" size="3090" checksum="4ec48bb91f7f9a7b10cf166a8abe444662a3b6d9">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104864" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/864/CWE476_NULL_Pointer_Dereference__wchar_t_45.c" language="C" size="3462" checksum="3f652f7a1e4ad51050bed5143a2bf0c431db7ffa">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104865" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/865/CWE476_NULL_Pointer_Dereference__wchar_t_51a.c" language="C" size="2524" checksum="3b75755507efe5ef5a2d5c8e79bd3deff0186cc6"></file>
    <file path="000/104/865/CWE476_NULL_Pointer_Dereference__wchar_t_51b.c" language="C" size="1646" checksum="b00de8f1b362235caf7c228c0dba05dda2ff6dcc">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104866" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/866/CWE476_NULL_Pointer_Dereference__wchar_t_52a.c" language="C" size="2541" checksum="13575ec3b83fb89032b36a0bff31dd5940901065"></file>
    <file path="000/104/866/CWE476_NULL_Pointer_Dereference__wchar_t_52b.c" language="C" size="1552" checksum="8c16b90883564a6cbcd2090dc8cc76dffcc7a596"></file>
    <file path="000/104/866/CWE476_NULL_Pointer_Dereference__wchar_t_52c.c" language="C" size="1663" checksum="4f5b2955e4626738084612a854940cef18956a3e">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104867" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/867/CWE476_NULL_Pointer_Dereference__wchar_t_53a.c" language="C" size="2568" checksum="dc8fa3783c8f52ff29292e2763ef7ead4f915798"></file>
    <file path="000/104/867/CWE476_NULL_Pointer_Dereference__wchar_t_53b.c" language="C" size="1579" checksum="4827cb9592b4b386dfb44c702627463eb5a7c92d"></file>
    <file path="000/104/867/CWE476_NULL_Pointer_Dereference__wchar_t_53c.c" language="C" size="1579" checksum="74056ddb1513270e28cf8412f9510c04e812dc9f"></file>
    <file path="000/104/867/CWE476_NULL_Pointer_Dereference__wchar_t_53d.c" language="C" size="1690" checksum="4954b7b6c1900f7d52f8d56d977fb375d810e0c8">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104868" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/868/CWE476_NULL_Pointer_Dereference__wchar_t_54a.c" language="C" size="2569" checksum="bd3162822cc278a279dbff5eced1344c9596aa16"></file>
    <file path="000/104/868/CWE476_NULL_Pointer_Dereference__wchar_t_54b.c" language="C" size="1580" checksum="200f6142e9d0677d4d67118dec536d70ca2b07fb"></file>
    <file path="000/104/868/CWE476_NULL_Pointer_Dereference__wchar_t_54c.c" language="C" size="1580" checksum="763e883d52ca95d0c51d42410d397b981bb2e139"></file>
    <file path="000/104/868/CWE476_NULL_Pointer_Dereference__wchar_t_54d.c" language="C" size="1580" checksum="495cf39fc70d077cbca8aa97cee2eb7b01940efb"></file>
    <file path="000/104/868/CWE476_NULL_Pointer_Dereference__wchar_t_54e.c" language="C" size="1691" checksum="49f9f1b8ce9040986bd60c38aed3176ff60ee5af">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104869" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/869/CWE476_NULL_Pointer_Dereference__wchar_t_63a.c" language="C" size="2532" checksum="f35894c0022983b830a38527c59dddfaadbcf1e1"></file>
    <file path="000/104/869/CWE476_NULL_Pointer_Dereference__wchar_t_63b.c" language="C" size="1753" checksum="f53c894c18527479079a779acecde852b0884e8b">
      <mixed line="29" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104870" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/870/CWE476_NULL_Pointer_Dereference__wchar_t_64a.c" language="C" size="2540" checksum="be1ee939d75b7735f6b86ccfe0da287644cb893b"></file>
    <file path="000/104/870/CWE476_NULL_Pointer_Dereference__wchar_t_64b.c" language="C" size="2241" checksum="8dd07725488106da65f997a21c68f4e2af392e24">
      <mixed line="32" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104871" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/871/CWE476_NULL_Pointer_Dereference__wchar_t_65a.c" language="C" size="2771" checksum="5f062fc3fbbd375b5c19790dfd12dbe76ae7eb4d"></file>
    <file path="000/104/871/CWE476_NULL_Pointer_Dereference__wchar_t_65b.c" language="C" size="1688" checksum="38be5fae713820a1ff1ebac07efc2e6eb78863c1">
      <mixed line="28" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104872" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/872/CWE476_NULL_Pointer_Dereference__wchar_t_66a.c" language="C" size="2751" checksum="7f72b0bcb3b598c22d2a23c4efd4fe92fdf98b8b"></file>
    <file path="000/104/872/CWE476_NULL_Pointer_Dereference__wchar_t_66b.c" language="C" size="1810" checksum="f3859bc296357ad6ae0a52d9198229bd2769b95a">
      <mixed line="30" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104873" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/873/CWE476_NULL_Pointer_Dereference__wchar_t_67a.c" language="C" size="3156" checksum="21fba0839a27618867c619e59c9d903b9deab191"></file>
    <file path="000/104/873/CWE476_NULL_Pointer_Dereference__wchar_t_67b.c" language="C" size="2086" checksum="df627a9e2ab8a91186900fedab2bd0dbc725943d">
      <mixed line="34" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104874" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/874/CWE476_NULL_Pointer_Dereference__wchar_t_68a.c" language="C" size="2913" checksum="c96cf4c363e75da75076f0ce37e75fae87fa33c5"></file>
    <file path="000/104/874/CWE476_NULL_Pointer_Dereference__wchar_t_68b.c" language="C" size="2066" checksum="97a8816bef093443ad534b640944dc6160baa716">
      <mixed line="33" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104875" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/875/CWE476_NULL_Pointer_Dereference__wchar_t_72a.cpp" language="C++" size="3006" checksum="251577d62d425ce732dfa984680e4364c4ab1609"></file>
    <file path="000/104/875/CWE476_NULL_Pointer_Dereference__wchar_t_72b.cpp" language="C++" size="1834" checksum="6e47a718cf0994f27c6b6c39f9805568640439d5">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104876" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/876/CWE476_NULL_Pointer_Dereference__wchar_t_73a.cpp" language="C++" size="2788" checksum="856c07af14668ad712b907cfcba2c3fa1e5b080b"></file>
    <file path="000/104/876/CWE476_NULL_Pointer_Dereference__wchar_t_73b.cpp" language="C++" size="1822" checksum="a7014fe5801d10b0ade67b4a286ca6e4629c00ac">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104877" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/877/CWE476_NULL_Pointer_Dereference__wchar_t_74a.cpp" language="C++" size="2736" checksum="7bdf3963c5316c7e2e91c50ea785b0663f7d1135"></file>
    <file path="000/104/877/CWE476_NULL_Pointer_Dereference__wchar_t_74b.cpp" language="C++" size="1813" checksum="df149df2b449a59b9ca730f4d3847219ad3f397c">
      <mixed line="36" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
  </testcase>
  <testcase id="104878" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/878/CWE476_NULL_Pointer_Dereference__wchar_t_81.h" language="C" size="1429" checksum="7a8d35f6b39b2d6cd905ffc5a9df8a202fa37451"></file>
    <file path="000/104/878/CWE476_NULL_Pointer_Dereference__wchar_t_81_bad.cpp" language="C++" size="1002" checksum="0bbaebd5be79177a1c1e3416670dca70e2eec3d4">
      <mixed line="29" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
    <file path="000/104/878/CWE476_NULL_Pointer_Dereference__wchar_t_81_goodB2G.cpp" language="C++" size="1118" checksum="1e94585ef4cae5ae8f386342d58a41c48cbf7a13"></file>
    <file path="000/104/878/CWE476_NULL_Pointer_Dereference__wchar_t_81_goodG2B.cpp" language="C++" size="1016" checksum="7e3ee7dd676811a7692afb030428b56e000ef262"></file>
    <file path="000/104/878/CWE476_NULL_Pointer_Dereference__wchar_t_81a.cpp" language="C++" size="2569" checksum="4a001029d65dc306f49ace98db4c67936feaee80"></file>
  </testcase>
  <testcase id="104879" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 476 NULL Pointer Dereference<br/> BadSource:  Set data to NULL<br/> GoodSource: Initialize data<br/> Sinks:<br/> GoodSink: Check for NULL before attempting to print data<br/> BadSink : Print data<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/879/CWE476_NULL_Pointer_Dereference__wchar_t_82.h" language="C" size="1403" checksum="efe05ace0a6e8c9caa6c5b5e2c7739861608e638"></file>
    <file path="000/104/879/CWE476_NULL_Pointer_Dereference__wchar_t_82_bad.cpp" language="C++" size="994" checksum="1a0adad49c870e5b0fbf3191a5c2873bd1349390">
      <mixed line="29" name="CWE-476: NULL Pointer Dereference"></mixed>
    </file>
    <file path="000/104/879/CWE476_NULL_Pointer_Dereference__wchar_t_82_goodB2G.cpp" language="C++" size="1110" checksum="d9b5a93f8c7edbbd79f4b6bd0c8f6d6264447500"></file>
    <file path="000/104/879/CWE476_NULL_Pointer_Dereference__wchar_t_82_goodG2B.cpp" language="C++" size="1008" checksum="07c7012bb0d1002247f6bc7518d04051aa0b4ee9"></file>
    <file path="000/104/879/CWE476_NULL_Pointer_Dereference__wchar_t_82a.cpp" language="C++" size="2630" checksum="1c53825f81052a541a0bd9e8f5807a3dd5b05c51"></file>
  </testcase>
  <testcase id="104952" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/952/CWE482_Comparing_Instead_of_Assigning__basic_01.c" language="C" size="2099" checksum="230236a723363d6ad4050bd5292d58cda4ffeb88">
      <mixed line="27" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104953" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/953/CWE482_Comparing_Instead_of_Assigning__basic_02.c" language="C" size="2835" checksum="356196023afc8d91ff04262dbf8b6b5867e152b2">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104954" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/954/CWE482_Comparing_Instead_of_Assigning__basic_03.c" language="C" size="2856" checksum="aa58d0099dbc989ebd917972791f26ad372468c9">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104955" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/955/CWE482_Comparing_Instead_of_Assigning__basic_04.c" language="C" size="3221" checksum="d2750f308658831d80adaa0c2911505f6b0ba5c3">
      <mixed line="35" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104956" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/956/CWE482_Comparing_Instead_of_Assigning__basic_05.c" language="C" size="3192" checksum="b46a9b2d1d683b236e777e677969e557b127e087">
      <mixed line="35" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104957" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/957/CWE482_Comparing_Instead_of_Assigning__basic_06.c" language="C" size="3162" checksum="0a017afe994309eff1e08cfc4745988b9ce3ce98">
      <mixed line="34" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104958" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/958/CWE482_Comparing_Instead_of_Assigning__basic_07.c" language="C" size="3142" checksum="a43c2bb7de9c88898ef77c5fae839b5ab4712f9c">
      <mixed line="34" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104959" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/959/CWE482_Comparing_Instead_of_Assigning__basic_08.c" language="C" size="3242" checksum="3c4c2dce88c10f4632280f203a6e64e68acd1425">
      <mixed line="42" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104960" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/960/CWE482_Comparing_Instead_of_Assigning__basic_09.c" language="C" size="2950" checksum="cd3b0d61c065dcf2354aefa902f64ed3d4a33e05">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104961" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/961/CWE482_Comparing_Instead_of_Assigning__basic_10.c" language="C" size="2901" checksum="f22679e62485488de3210e8f6633149adc3c374f">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104962" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/962/CWE482_Comparing_Instead_of_Assigning__basic_11.c" language="C" size="2964" checksum="544a71a9c6c03de461e8c2b09dbfc426071b21f9">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104963" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/963/CWE482_Comparing_Instead_of_Assigning__basic_12.c" language="C" size="2998" checksum="2dbbd6c130729cb5df7aa51bb1dc5c4c5b7e7998">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104964" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/964/CWE482_Comparing_Instead_of_Assigning__basic_13.c" language="C" size="2968" checksum="dd59383c440b74175990958ce1b2ac14008bbe27">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104965" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/965/CWE482_Comparing_Instead_of_Assigning__basic_14.c" language="C" size="2919" checksum="0e2174722c9e72654fc37d79d0d2444437de4900">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104966" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/966/CWE482_Comparing_Instead_of_Assigning__basic_15.c" language="C" size="3124" checksum="a9e7e95d6101361a4e6aead21f7850db0e28e124">
      <mixed line="30" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104967" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/967/CWE482_Comparing_Instead_of_Assigning__basic_16.c" language="C" size="2320" checksum="710e97983f075830689e210b02da9f8e2fc9e1ce">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104968" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/968/CWE482_Comparing_Instead_of_Assigning__basic_17.c" language="C" size="2345" checksum="1392f6060d91906efd80e44aaab3472df4373eaa">
      <mixed line="30" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="104969" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/104/969/CWE482_Comparing_Instead_of_Assigning__basic_18.c" language="C" size="2223" checksum="e2901f7859710e9e45999c164819294bd8566c2e">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase id="105489" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Unused code via return before code]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/489/CWE561_Dead_Code__return_before_code_01.c" language="C" size="1314" checksum="61f517b8d5377ac0973d287c1e5bb7ef52f9a8fc">
      <mixed line="14" name="CWE-561: Dead Code"></mixed>
    </file>
  </testcase>
  <testcase id="105490" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Unused function declaration]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/490/CWE561_Dead_Code__unused_function_01.c" language="C" size="1619" checksum="ce6a3762725ca3df324c28db45f22290a22c8308">
      <mixed line="12" name="CWE-561: Dead Code"></mixed>
    </file>
  </testcase>
  <testcase id="105491" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Return of local buffer address to local buffer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/491/CWE562_Return_of_Stack_Variable_Address__return_buf_01.c" language="C" size="1916" checksum="61de02ea2b6105c10007dd47436bebdba4bc5494">
      <mixed line="17" name="CWE-562: Return of Stack Variable Address"></mixed>
    </file>
  </testcase>
  <testcase id="105492" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Return of local buffer address via stack-allocated object]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/492/CWE562_Return_of_Stack_Variable_Address__return_local_class_member_01.cpp" language="C++" size="2257" checksum="5840e32d3531acb2427afdd76e8f9ddefd252285">
      <mixed line="38" name="CWE-562: Return of Stack Variable Address"></mixed>
    </file>
  </testcase>
  <testcase id="105493" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Return of local buffer address via pointer to a local buffer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/493/CWE562_Return_of_Stack_Variable_Address__return_pointer_buf_01.c" language="C" size="2098" checksum="311d9ad7869bc4d3e1322cb161b7479a330bec32">
      <mixed line="20" name="CWE-562: Return of Stack Variable Address"></mixed>
    </file>
  </testcase>
  <testcase id="105494" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[Unused class member value]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/494/CWE563_Unused_Variable__unused_class_member_value_01_bad.cpp" language="C++" size="1346" checksum="df007c0fe86301c779cb1798296c2962da4b5828">
      <mixed line="23" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/494/CWE563_Unused_Variable__unused_class_member_value_01_good1.cpp" language="C++" size="1394" checksum="062e7bf652d200cbd9f3d8a36c056bdc87799f7c"></file>
  </testcase>
  <testcase id="105495" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[Unused class member variable]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/495/CWE563_Unused_Variable__unused_class_member_variable_01_bad.cpp" language="C++" size="1325" checksum="1711da197f2b8614e08ce9ec1f7e93000112c3d3">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/495/CWE563_Unused_Variable__unused_class_member_variable_01_good1.cpp" language="C++" size="1355" checksum="44e12be11508d952f2c698b90ce3c07bde825cf2"></file>
  </testcase>
  <testcase id="105496" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Unused global value]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/496/CWE563_Unused_Variable__unused_global_value_01.c" language="C" size="1675" checksum="78d53039f7bdbeec8f909000ced6c28bb631168a">
      <mixed line="15" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105497" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Unused global variable]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/497/CWE563_Unused_Variable__unused_global_variable_01.c" language="C" size="1615" checksum="e4682f1119800f0beec02639ec5be753e1288bdb">
      <mixed line="15" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105498" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/498/CWE563_Unused_Variable__unused_init_variable_char_01.c" language="C" size="1961" checksum="877ea7614aae84f93074529a7352d096172469b3">
      <mixed line="29" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105499" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/499/CWE563_Unused_Variable__unused_init_variable_char_02.c" language="C" size="2516" checksum="4d853a6d866a3a2d9fb3d5dcd8ff756f3e06dd2b">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105500" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/500/CWE563_Unused_Variable__unused_init_variable_char_03.c" language="C" size="2537" checksum="86e66bd5201f24c16551ebe83972ee64bbb2b7af">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105501" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/501/CWE563_Unused_Variable__unused_init_variable_char_04.c" language="C" size="2902" checksum="e35e04fa35dfc3c9d64f54755c8aa70d78219b19">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105502" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/502/CWE563_Unused_Variable__unused_init_variable_char_05.c" language="C" size="2873" checksum="087fe329866ae9f41859ad3b6640e0f74aa1b992">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105503" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/503/CWE563_Unused_Variable__unused_init_variable_char_06.c" language="C" size="2843" checksum="c2cd926416512e460d4c96dc98c45d3b835ecf5d">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105504" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/504/CWE563_Unused_Variable__unused_init_variable_char_07.c" language="C" size="2823" checksum="b36d0165d07212441f9fef6c8d975668aea3cff1">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105505" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/505/CWE563_Unused_Variable__unused_init_variable_char_08.c" language="C" size="2923" checksum="2f5621ac44d51f4770f18c3802e6fc2e3bc54650">
      <mixed line="44" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105506" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/506/CWE563_Unused_Variable__unused_init_variable_char_09.c" language="C" size="2631" checksum="59e4870c699b8b2d1d48b599fc9a463d6f80c319">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105507" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/507/CWE563_Unused_Variable__unused_init_variable_char_10.c" language="C" size="2582" checksum="a21fad6896f82f295007ed0ec39d8fd904c595d1">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105508" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/508/CWE563_Unused_Variable__unused_init_variable_char_11.c" language="C" size="2645" checksum="d3b7c39455607139a326e62c3a9de4e45e26dffb">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105509" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/509/CWE563_Unused_Variable__unused_init_variable_char_13.c" language="C" size="2649" checksum="6fc842487fb484b1837b9f51700ae4ac92727622">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105510" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/510/CWE563_Unused_Variable__unused_init_variable_char_14.c" language="C" size="2600" checksum="cae95fddcb6d50f086881a247d24182713d12882">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105511" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/511/CWE563_Unused_Variable__unused_init_variable_char_15.c" language="C" size="2939" checksum="ace46f77c82b25a7c866cfc69c28a3250c7b5aa3">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105512" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/512/CWE563_Unused_Variable__unused_init_variable_char_16.c" language="C" size="2126" checksum="1e632b3d9783d47873c99419852d5eefa9157ab4">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105513" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/513/CWE563_Unused_Variable__unused_init_variable_char_17.c" language="C" size="2107" checksum="6f6fbbaa1d98c2f9d9243751dc6fbbf3b63b7105">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105514" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/514/CWE563_Unused_Variable__unused_init_variable_char_18.c" language="C" size="2066" checksum="81e4d7a8a788cf365d6b0dacd03e3f078066be93">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105515" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/515/CWE563_Unused_Variable__unused_init_variable_char_21.c" language="C" size="3257" checksum="883c9e73253da7440fcfb80e774e72abef719fb9">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105516" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/516/CWE563_Unused_Variable__unused_init_variable_char_22a.c" language="C" size="3335" checksum="a3b1a0ca0a64affc1b72196a0c64cb59f10b17d8"></file>
    <file path="000/105/516/CWE563_Unused_Variable__unused_init_variable_char_22b.c" language="C" size="2215" checksum="6ff153073735ed0c93ff25701ed11a22378a2a49">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105517" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/517/CWE563_Unused_Variable__unused_init_variable_char_33.cpp" language="C++" size="2185" checksum="257d0ac9fc43d0ec936b746523a097038fbac398">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105518" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/518/CWE563_Unused_Variable__unused_init_variable_char_43.cpp" language="C++" size="2193" checksum="86392a74e6e1ad3f9e163069d1fb266779e0f365">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105519" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/519/CWE563_Unused_Variable__unused_init_variable_char_72a.cpp" language="C++" size="2489" checksum="a12aff4b154301f2a9f9a1f56a5737a5b340a76c"></file>
    <file path="000/105/519/CWE563_Unused_Variable__unused_init_variable_char_72b.cpp" language="C++" size="1207" checksum="3f1a9acd51581f042f5e896cd9d73cf74c01f3bb">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105520" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/520/CWE563_Unused_Variable__unused_init_variable_char_73a.cpp" language="C++" size="2343" checksum="24d3f24d7efecd1eb992db4b28de93d1bb6aa9b4"></file>
    <file path="000/105/520/CWE563_Unused_Variable__unused_init_variable_char_73b.cpp" language="C++" size="1197" checksum="cd972488b2e6673ab72f4c293115f190d7565b4d">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105521" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/521/CWE563_Unused_Variable__unused_init_variable_char_74a.cpp" language="C++" size="2308" checksum="474e022d8da8d0891665b8c9a6fa72f34599a5e2"></file>
    <file path="000/105/521/CWE563_Unused_Variable__unused_init_variable_char_74b.cpp" language="C++" size="1190" checksum="3bcad76009edff164e415d2741c5e6e5afa19d17">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105522" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/522/CWE563_Unused_Variable__unused_init_variable_char_81.h" language="C" size="1234" checksum="700c3e47ebd09f4fb1119aa9d68281e6144534d7"></file>
    <file path="000/105/522/CWE563_Unused_Variable__unused_init_variable_char_81_bad.cpp" language="C++" size="925" checksum="58c29e120773dc43f5133180781bcc24f1aabda9">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/522/CWE563_Unused_Variable__unused_init_variable_char_81_goodB2G.cpp" language="C++" size="871" checksum="808926d9bb86cb48e7abe31924fae11df57f8c9c"></file>
    <file path="000/105/522/CWE563_Unused_Variable__unused_init_variable_char_81a.cpp" language="C++" size="2259" checksum="3c814da814527c2c07516f2a91b27b413a50531f"></file>
  </testcase>
  <testcase id="105523" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/523/CWE563_Unused_Variable__unused_init_variable_char_82.h" language="C" size="1214" checksum="9212b4fffc1b5aba7c59f0bb0225da3fbfd86bdf"></file>
    <file path="000/105/523/CWE563_Unused_Variable__unused_init_variable_char_82_bad.cpp" language="C++" size="917" checksum="a58747395fea32abe0b9d5142126c4a353cde36d">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/523/CWE563_Unused_Variable__unused_init_variable_char_82_goodB2G.cpp" language="C++" size="863" checksum="5b7d79002358cb4dc531bd2db18d4944e91228d6"></file>
    <file path="000/105/523/CWE563_Unused_Variable__unused_init_variable_char_82a.cpp" language="C++" size="2299" checksum="bf6cf58c2d546b0e61dd4095a58b1bb94a86f65a"></file>
  </testcase>
  <testcase id="105524" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/524/CWE563_Unused_Variable__unused_init_variable_char_83.h" language="C" size="1239" checksum="3b3435d8041718979d55434cd78cab84ce100345"></file>
    <file path="000/105/524/CWE563_Unused_Variable__unused_init_variable_char_83_bad.cpp" language="C++" size="1209" checksum="365f4e29bdf3b2f76b839fb4763b3fe16c376ffd">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/524/CWE563_Unused_Variable__unused_init_variable_char_83_goodB2G.cpp" language="C++" size="1167" checksum="ec5db3d6c363d446651b15ec47cf733048510880"></file>
    <file path="000/105/524/CWE563_Unused_Variable__unused_init_variable_char_83a.cpp" language="C++" size="1943" checksum="0a98d195df6e71038116296fa447bfa851210f46"></file>
  </testcase>
  <testcase id="105525" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/525/CWE563_Unused_Variable__unused_init_variable_char_84.h" language="C" size="1264" checksum="884acefc1e55e7cdd75b1c058ac6f66bbbb6a79f"></file>
    <file path="000/105/525/CWE563_Unused_Variable__unused_init_variable_char_84_bad.cpp" language="C++" size="1234" checksum="89b4b6ab6b14d4f81f16c37bd1b17fa43b9e5edd">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/525/CWE563_Unused_Variable__unused_init_variable_char_84_goodB2G.cpp" language="C++" size="1192" checksum="5212d004a4bb888cbc95ff1e6858e38dd9c2d609"></file>
    <file path="000/105/525/CWE563_Unused_Variable__unused_init_variable_char_84a.cpp" language="C++" size="2152" checksum="3392919aca0e8166327557b81b6206118a3a8d5b"></file>
  </testcase>
  <testcase id="105526" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/526/CWE563_Unused_Variable__unused_init_variable_int64_t_01.c" language="C" size="1983" checksum="05888cdb8d18f807cf95a057b7629454a3645f6c">
      <mixed line="29" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105527" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/527/CWE563_Unused_Variable__unused_init_variable_int64_t_02.c" language="C" size="2542" checksum="ce114af32bd083f9685f1495c4d492c4bd3800fc">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105528" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/528/CWE563_Unused_Variable__unused_init_variable_int64_t_03.c" language="C" size="2563" checksum="ee628bfdb761948a41fab6be3dff66d6eee64b89">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105529" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/529/CWE563_Unused_Variable__unused_init_variable_int64_t_04.c" language="C" size="2928" checksum="98e1839a8e04b69d8129572b69f96d26761c97ea">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105530" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/530/CWE563_Unused_Variable__unused_init_variable_int64_t_05.c" language="C" size="2899" checksum="596ba1d4e7182eb053b937f625cb666fc8d63e0d">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105531" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/531/CWE563_Unused_Variable__unused_init_variable_int64_t_06.c" language="C" size="2869" checksum="8521e116a81915349b3d598a663cf8fe7c17a641">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105532" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/532/CWE563_Unused_Variable__unused_init_variable_int64_t_07.c" language="C" size="2849" checksum="83f4a2ae2ed426ffe08713c9b96b91831c391a01">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105533" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/533/CWE563_Unused_Variable__unused_init_variable_int64_t_08.c" language="C" size="2949" checksum="2ed151d1f60e2a1ed221b261ced4f66095526258">
      <mixed line="44" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105534" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/534/CWE563_Unused_Variable__unused_init_variable_int64_t_09.c" language="C" size="2657" checksum="ccd83503dc569ead04a8f4d728e1396d96995e79">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105535" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/535/CWE563_Unused_Variable__unused_init_variable_int64_t_10.c" language="C" size="2608" checksum="0f3beff58465f8dbb5d1dd3d1e5fa09a4a25b367">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105536" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/536/CWE563_Unused_Variable__unused_init_variable_int64_t_11.c" language="C" size="2671" checksum="f15dc3cd5d2cdb9fd326f7ed74d30c5e90f40cae">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105537" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/537/CWE563_Unused_Variable__unused_init_variable_int64_t_13.c" language="C" size="2675" checksum="af763a406f17654b083ea798ddf6cb203139bc2c">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105538" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/538/CWE563_Unused_Variable__unused_init_variable_int64_t_14.c" language="C" size="2626" checksum="06647e92c9057265ba586078454ea72110e0694d">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105539" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/539/CWE563_Unused_Variable__unused_init_variable_int64_t_15.c" language="C" size="2965" checksum="cec7ffd1e228031e91b239c62bbe653c37c5f95e">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105540" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/540/CWE563_Unused_Variable__unused_init_variable_int64_t_16.c" language="C" size="2148" checksum="e69608ccf00806bf74dbbe72b6b776bdadff2afa">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105541" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/541/CWE563_Unused_Variable__unused_init_variable_int64_t_17.c" language="C" size="2129" checksum="57f40cff26aa6091904bacd20872c135836acad9">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105542" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/542/CWE563_Unused_Variable__unused_init_variable_int64_t_18.c" language="C" size="2088" checksum="3475c6c2331907ebc035f0eca96e07b83779231e">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105543" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/543/CWE563_Unused_Variable__unused_init_variable_int64_t_21.c" language="C" size="3292" checksum="3d752c7c4f3c5048ed62fd2176ad14bd43bbe00a">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105544" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/544/CWE563_Unused_Variable__unused_init_variable_int64_t_22a.c" language="C" size="3404" checksum="facc932005f4b299225ec5e35a3a48d53093a17d"></file>
    <file path="000/105/544/CWE563_Unused_Variable__unused_init_variable_int64_t_22b.c" language="C" size="2256" checksum="147fae4b2a433375ceaffeaf4a9879678e51ebb4">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105545" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/545/CWE563_Unused_Variable__unused_init_variable_int64_t_33.cpp" language="C++" size="2213" checksum="5599810f1f5082074bdb834f3172349ed7cc2a58">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105546" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/546/CWE563_Unused_Variable__unused_init_variable_int64_t_43.cpp" language="C++" size="2215" checksum="e58202ecae2c6204c26a22212f20c6780ea3a581">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105547" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/547/CWE563_Unused_Variable__unused_init_variable_int64_t_72a.cpp" language="C++" size="2516" checksum="779d27657fde5ac04dee382a7adc2658bb1c6e50"></file>
    <file path="000/105/547/CWE563_Unused_Variable__unused_init_variable_int64_t_72b.cpp" language="C++" size="1226" checksum="1f1d85993e90451316086b1d9f2958620ac17e5a">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105548" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/548/CWE563_Unused_Variable__unused_init_variable_int64_t_73a.cpp" language="C++" size="2370" checksum="059a634d796ff97342efcd03583674ef81a615cc"></file>
    <file path="000/105/548/CWE563_Unused_Variable__unused_init_variable_int64_t_73b.cpp" language="C++" size="1216" checksum="035d8866f30cd8341aa98832422903a8a9aba2c9">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105549" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/549/CWE563_Unused_Variable__unused_init_variable_int64_t_74a.cpp" language="C++" size="2335" checksum="cbc8580de6feaf284066038d7d8372ce138e9a31"></file>
    <file path="000/105/549/CWE563_Unused_Variable__unused_init_variable_int64_t_74b.cpp" language="C++" size="1209" checksum="3f2fdcae8172b750b0d9fae792896e1c8cf84c80">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105550" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/550/CWE563_Unused_Variable__unused_init_variable_int64_t_81.h" language="C" size="1264" checksum="e4a8df6edac2f9467f5ce44bac1d107636b75b5e"></file>
    <file path="000/105/550/CWE563_Unused_Variable__unused_init_variable_int64_t_81_bad.cpp" language="C++" size="940" checksum="c9e8826a9a389494f810827283f9fcfa99b232c5">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/550/CWE563_Unused_Variable__unused_init_variable_int64_t_81_goodB2G.cpp" language="C++" size="887" checksum="62595e96db507f78105e208da55df7728e14f46b"></file>
    <file path="000/105/550/CWE563_Unused_Variable__unused_init_variable_int64_t_81a.cpp" language="C++" size="2289" checksum="a588d7cd5552fd7e54d18f27710a648accee13b0"></file>
  </testcase>
  <testcase id="105551" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/551/CWE563_Unused_Variable__unused_init_variable_int64_t_82.h" language="C" size="1244" checksum="c591679705c13dc663937a09efa3a62016d42747"></file>
    <file path="000/105/551/CWE563_Unused_Variable__unused_init_variable_int64_t_82_bad.cpp" language="C++" size="932" checksum="1d7ef5c7502d34dc091fc0df861c57d7a324b6d8">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/551/CWE563_Unused_Variable__unused_init_variable_int64_t_82_goodB2G.cpp" language="C++" size="879" checksum="2fac48e29ea5e0b9df4c75a5d3dd2bd08852db47"></file>
    <file path="000/105/551/CWE563_Unused_Variable__unused_init_variable_int64_t_82a.cpp" language="C++" size="2329" checksum="af815fe9b2e4ec9d5c2ea56030951a766b6321da"></file>
  </testcase>
  <testcase id="105552" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/552/CWE563_Unused_Variable__unused_init_variable_int64_t_83.h" language="C" size="1275" checksum="0d82f15f55e7679d9426224ddf07c480cf64c758"></file>
    <file path="000/105/552/CWE563_Unused_Variable__unused_init_variable_int64_t_83_bad.cpp" language="C++" size="1233" checksum="eaae8efef0f9c728ec48c8c303538e08677c10e0">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/552/CWE563_Unused_Variable__unused_init_variable_int64_t_83_goodB2G.cpp" language="C++" size="1192" checksum="ca38fa6cbba9259c373af6073aea8473d912e268"></file>
    <file path="000/105/552/CWE563_Unused_Variable__unused_init_variable_int64_t_83a.cpp" language="C++" size="1967" checksum="d7fc42f385059129debfb04d5518a98fef03851e"></file>
  </testcase>
  <testcase id="105553" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/553/CWE563_Unused_Variable__unused_init_variable_int64_t_84.h" language="C" size="1300" checksum="cdaf62970d44c89cf8b8430a6f50dc4d7a0abe8a"></file>
    <file path="000/105/553/CWE563_Unused_Variable__unused_init_variable_int64_t_84_bad.cpp" language="C++" size="1258" checksum="e4d404f9f5444e146be2538c3033360209d69209">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/553/CWE563_Unused_Variable__unused_init_variable_int64_t_84_goodB2G.cpp" language="C++" size="1217" checksum="082b78888f1a140677c30e97b4ed6c7ce1116d42"></file>
    <file path="000/105/553/CWE563_Unused_Variable__unused_init_variable_int64_t_84a.cpp" language="C++" size="2182" checksum="d134c9e9c08b39012b3115c71e0a15d8e7d9dd17"></file>
  </testcase>
  <testcase id="105554" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/554/CWE563_Unused_Variable__unused_init_variable_int_01.c" language="C" size="1946" checksum="9306b1a9a74479acf14f8e57cafda68821c4a00d">
      <mixed line="29" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105555" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/555/CWE563_Unused_Variable__unused_init_variable_int_02.c" language="C" size="2494" checksum="017b86efb446f99926c4f82485519edd7b059a6f">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105556" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/556/CWE563_Unused_Variable__unused_init_variable_int_03.c" language="C" size="2515" checksum="4fe458722a80c16e6b5c5bba58cbae57df82c5bb">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105557" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/557/CWE563_Unused_Variable__unused_init_variable_int_04.c" language="C" size="2880" checksum="487f2798ed9ea010d98905702f019c42dd86a193">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105558" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/558/CWE563_Unused_Variable__unused_init_variable_int_05.c" language="C" size="2851" checksum="df6bc76f0ad9e9f823e12c21861de8ed87e6e316">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105559" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/559/CWE563_Unused_Variable__unused_init_variable_int_06.c" language="C" size="2821" checksum="1fe57103f869ecade5329ffd048f60e2d5eb9103">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105560" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/560/CWE563_Unused_Variable__unused_init_variable_int_07.c" language="C" size="2801" checksum="052093591e12381df6f02553294e75ed597a3208">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105561" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/561/CWE563_Unused_Variable__unused_init_variable_int_08.c" language="C" size="2901" checksum="254c3005b11c6fce64a3c511c8a8f62a0568fecd">
      <mixed line="44" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105562" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/562/CWE563_Unused_Variable__unused_init_variable_int_09.c" language="C" size="2609" checksum="9a99407426d78a96e0dcc3af88989c09fd59ed6a">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105563" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/563/CWE563_Unused_Variable__unused_init_variable_int_10.c" language="C" size="2560" checksum="e491805dbc57409206f5c8cd82eeca9291bfe78c">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105564" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/564/CWE563_Unused_Variable__unused_init_variable_int_11.c" language="C" size="2623" checksum="93ce6e995fdef779e4b6c46c7b4e16b66408991f">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105565" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/565/CWE563_Unused_Variable__unused_init_variable_int_13.c" language="C" size="2627" checksum="c9affbcf1022c938ef1955f92ba434ceba6c5775">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105566" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/566/CWE563_Unused_Variable__unused_init_variable_int_14.c" language="C" size="2578" checksum="9c2b3d15048a44f2aebd832557ea64cba9d15ccb">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105567" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/567/CWE563_Unused_Variable__unused_init_variable_int_15.c" language="C" size="2917" checksum="4c402c524251e4d8b83f6e7c76ae464cdefa278b">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105568" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/568/CWE563_Unused_Variable__unused_init_variable_int_16.c" language="C" size="2111" checksum="83e8aab1373bc36fcde57068f197f41e52aa9c48">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105569" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/569/CWE563_Unused_Variable__unused_init_variable_int_17.c" language="C" size="2092" checksum="ae7981b912ae54196a896685f1da2c6c39954591">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105570" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/570/CWE563_Unused_Variable__unused_init_variable_int_18.c" language="C" size="2051" checksum="7cd4b8a5830386819f4de221484612c83f2fb300">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105571" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/571/CWE563_Unused_Variable__unused_init_variable_int_21.c" language="C" size="3232" checksum="934c35ecb3ea6296c2b680ee365488c3aed30183">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105572" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/572/CWE563_Unused_Variable__unused_init_variable_int_22a.c" language="C" size="3306" checksum="6c8b7714b533f377ea47317ee091cefa38fb784c"></file>
    <file path="000/105/572/CWE563_Unused_Variable__unused_init_variable_int_22b.c" language="C" size="2194" checksum="d46039ce72aca4b559e4ec6961e54c018ffe8af1">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105573" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/573/CWE563_Unused_Variable__unused_init_variable_int_33.cpp" language="C++" size="2168" checksum="e5f3c67b72857604aab0cd943fb216a9768f40b6">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105574" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/574/CWE563_Unused_Variable__unused_init_variable_int_43.cpp" language="C++" size="2178" checksum="0b5db86db23cf6ae2b10c54eb2f10bb70a9b0d0f">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105575" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/575/CWE563_Unused_Variable__unused_init_variable_int_72a.cpp" language="C++" size="2476" checksum="c7147315ab0909adc7bcc9fc97c5a9db60e69aa8"></file>
    <file path="000/105/575/CWE563_Unused_Variable__unused_init_variable_int_72b.cpp" language="C++" size="1197" checksum="13964e79ccfa9d6fbfccefe39d5be2d5d20f4179">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105576" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/576/CWE563_Unused_Variable__unused_init_variable_int_73a.cpp" language="C++" size="2330" checksum="1a37b8c2bb67f0d22a65265816c2cc024c2747cc"></file>
    <file path="000/105/576/CWE563_Unused_Variable__unused_init_variable_int_73b.cpp" language="C++" size="1187" checksum="fa62cd9080cc24400d9fc278ee78fa40051eb0ff">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105577" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/577/CWE563_Unused_Variable__unused_init_variable_int_74a.cpp" language="C++" size="2295" checksum="5acadbb72b4ba240ec7463119cf7d51a9850d8cd"></file>
    <file path="000/105/577/CWE563_Unused_Variable__unused_init_variable_int_74b.cpp" language="C++" size="1180" checksum="1029ae15a2a9ed06dec0e0382a296f25bd23ad42">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105578" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/578/CWE563_Unused_Variable__unused_init_variable_int_81.h" language="C" size="1224" checksum="0020d65c9edd7ee5a829c6d8f52af89e04fb1ecc"></file>
    <file path="000/105/578/CWE563_Unused_Variable__unused_init_variable_int_81_bad.cpp" language="C++" size="920" checksum="679504a1dcb3b735c4b52b546b2f7e13c41d61d9">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/578/CWE563_Unused_Variable__unused_init_variable_int_81_goodB2G.cpp" language="C++" size="862" checksum="df25120c8006a818b5e04654fe296442ba8dd0fa"></file>
    <file path="000/105/578/CWE563_Unused_Variable__unused_init_variable_int_81a.cpp" language="C++" size="2245" checksum="01eee69ad9c2f6d8b59795fb9ee71ac534c3b989"></file>
  </testcase>
  <testcase id="105579" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/579/CWE563_Unused_Variable__unused_init_variable_int_82.h" language="C" size="1204" checksum="ccc398fefda9b3681bf5bf2a3e864b379bed6d04"></file>
    <file path="000/105/579/CWE563_Unused_Variable__unused_init_variable_int_82_bad.cpp" language="C++" size="912" checksum="4ee0cbe94c321642a321b26172730c839abb722b">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/579/CWE563_Unused_Variable__unused_init_variable_int_82_goodB2G.cpp" language="C++" size="854" checksum="06eb724400ae971fd4055e984fbcbdd6a77970c5"></file>
    <file path="000/105/579/CWE563_Unused_Variable__unused_init_variable_int_82a.cpp" language="C++" size="2285" checksum="a5665a8a9e0213e148e6bc5465bd36e7b788578e"></file>
  </testcase>
  <testcase id="105580" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/580/CWE563_Unused_Variable__unused_init_variable_int_83.h" language="C" size="1227" checksum="b2db5baf00975ddc00f1ea657fbdcbe8a7a8fa91"></file>
    <file path="000/105/580/CWE563_Unused_Variable__unused_init_variable_int_83_bad.cpp" language="C++" size="1199" checksum="55f98db2dc3f0b2effd69651a675871d228edf69">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/580/CWE563_Unused_Variable__unused_init_variable_int_83_goodB2G.cpp" language="C++" size="1153" checksum="a953ff6949eef234ffe832f129c064190556aa1a"></file>
    <file path="000/105/580/CWE563_Unused_Variable__unused_init_variable_int_83a.cpp" language="C++" size="1935" checksum="76635a483edcbb8b3272da4bbf3a84d2bf24e26e"></file>
  </testcase>
  <testcase id="105581" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/581/CWE563_Unused_Variable__unused_init_variable_int_84.h" language="C" size="1252" checksum="f8d43d360ca4ab07b7b7953449b94d4bc67fbcc7"></file>
    <file path="000/105/581/CWE563_Unused_Variable__unused_init_variable_int_84_bad.cpp" language="C++" size="1224" checksum="be27a835bd33d4610cc3a8a6219dae2ed35aa7da">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/581/CWE563_Unused_Variable__unused_init_variable_int_84_goodB2G.cpp" language="C++" size="1178" checksum="8181e737f1656a9d85cb52be2bd8e6312a004374"></file>
    <file path="000/105/581/CWE563_Unused_Variable__unused_init_variable_int_84a.cpp" language="C++" size="2142" checksum="32ec9cfb5d6c5f127ad6e9366665b79a2c3e4f9b"></file>
  </testcase>
  <testcase id="105582" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/582/CWE563_Unused_Variable__unused_init_variable_long_01.c" language="C" size="1956" checksum="81218384184815e15220ebc15a90b7e776bc0582">
      <mixed line="29" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105583" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/583/CWE563_Unused_Variable__unused_init_variable_long_02.c" language="C" size="2507" checksum="dd7484a579a2f0e75050a5072729ddc3ea6e924d">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105584" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/584/CWE563_Unused_Variable__unused_init_variable_long_03.c" language="C" size="2528" checksum="c2447f87918337dda3d39eb95985b497f21afccc">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105585" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/585/CWE563_Unused_Variable__unused_init_variable_long_04.c" language="C" size="2893" checksum="a125674851e2595743c92565f08254032fb36e4c">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105586" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/586/CWE563_Unused_Variable__unused_init_variable_long_05.c" language="C" size="2864" checksum="be3bf80cd9c7cd509e327607577b13d6a4d8f82c">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105587" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/587/CWE563_Unused_Variable__unused_init_variable_long_06.c" language="C" size="2834" checksum="3d5d4df5bfcc582ee8ffa31eb4309ba23c7117b1">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105588" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/588/CWE563_Unused_Variable__unused_init_variable_long_07.c" language="C" size="2814" checksum="c1965745e773527b497e8c676bf7a4af25c10708">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105589" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/589/CWE563_Unused_Variable__unused_init_variable_long_08.c" language="C" size="2914" checksum="a2c6f31a227db4e48cc1122016e86d3b6131f0a9">
      <mixed line="44" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105590" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/590/CWE563_Unused_Variable__unused_init_variable_long_09.c" language="C" size="2622" checksum="ab77d2e4d80d2ea7da3ba1abf696780ed76f1e9e">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105591" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/591/CWE563_Unused_Variable__unused_init_variable_long_10.c" language="C" size="2573" checksum="fc0e12eddc0ea077ef2b2c0704ebe33c9efa01d4">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105592" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/592/CWE563_Unused_Variable__unused_init_variable_long_11.c" language="C" size="2636" checksum="79887c15db6182608623769f4ad25f25ab2a252c">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105593" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/593/CWE563_Unused_Variable__unused_init_variable_long_13.c" language="C" size="2640" checksum="ba8682a78d85385fe3b233bbfff9fff559baf80d">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105594" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/594/CWE563_Unused_Variable__unused_init_variable_long_14.c" language="C" size="2591" checksum="600fec149e807ee829347e6d250846292e7f4901">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105595" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/595/CWE563_Unused_Variable__unused_init_variable_long_15.c" language="C" size="2930" checksum="a54c74e8ccee32fb7f45d507f9efb7a52d1c8f25">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105596" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/596/CWE563_Unused_Variable__unused_init_variable_long_16.c" language="C" size="2121" checksum="4c09921229023c266340f8ef540ecaef200caaae">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105597" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/597/CWE563_Unused_Variable__unused_init_variable_long_17.c" language="C" size="2102" checksum="0e4dccb53d599f9c0bb9cdde51005e59b1ccc7af">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105598" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/598/CWE563_Unused_Variable__unused_init_variable_long_18.c" language="C" size="2061" checksum="3f965eae25872cc75cb76ac889726d6da31557b2">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105599" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/599/CWE563_Unused_Variable__unused_init_variable_long_21.c" language="C" size="3248" checksum="846bf12aaea4476bcb2df850613f2b5fc9a21bf1">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105600" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/600/CWE563_Unused_Variable__unused_init_variable_long_22a.c" language="C" size="3332" checksum="7b4a5f9537998f4c14f401dcec090272e78952fe"></file>
    <file path="000/105/600/CWE563_Unused_Variable__unused_init_variable_long_22b.c" language="C" size="2209" checksum="cfba8a082a2ca417754c62a810d8a458292f4675">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105601" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/601/CWE563_Unused_Variable__unused_init_variable_long_33.cpp" language="C++" size="2180" checksum="81738152ea484ce27fba743ce455b8547b7d05b4">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105602" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/602/CWE563_Unused_Variable__unused_init_variable_long_43.cpp" language="C++" size="2188" checksum="ca47d88191561e5837f9837cba5dae9815fd6ada">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105603" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/603/CWE563_Unused_Variable__unused_init_variable_long_72a.cpp" language="C++" size="2487" checksum="f0149518d5063d74b9c0f63c1de0fd775f886347"></file>
    <file path="000/105/603/CWE563_Unused_Variable__unused_init_variable_long_72b.cpp" language="C++" size="1204" checksum="411e0e5f1304f0085d9c7a971d9e7f12ae8e40a8">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105604" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/604/CWE563_Unused_Variable__unused_init_variable_long_73a.cpp" language="C++" size="2341" checksum="ceee0deba43a9baa9e59c35033b398cd6d8d21ca"></file>
    <file path="000/105/604/CWE563_Unused_Variable__unused_init_variable_long_73b.cpp" language="C++" size="1194" checksum="d6a1356b841c40bc3301c1e75326ecc6c0800f75">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105605" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/605/CWE563_Unused_Variable__unused_init_variable_long_74a.cpp" language="C++" size="2306" checksum="c7b47da4313abee6f1f7a464e62c379f2388a0d3"></file>
    <file path="000/105/605/CWE563_Unused_Variable__unused_init_variable_long_74b.cpp" language="C++" size="1187" checksum="d4e7f74e9b3efdcca6a4e64b9e0e7d0231431a52">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105606" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/606/CWE563_Unused_Variable__unused_init_variable_long_81.h" language="C" size="1234" checksum="2a9c94a465ef49726aa3d6b2accd4c47f0e73a01"></file>
    <file path="000/105/606/CWE563_Unused_Variable__unused_init_variable_long_81_bad.cpp" language="C++" size="925" checksum="0df8e8633127aa4e3a9e45bc0cac557d1b3e9419">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/606/CWE563_Unused_Variable__unused_init_variable_long_81_goodB2G.cpp" language="C++" size="868" checksum="7d3029f0fa21cfd4fa81aaf6a6c64fff30be0c7e"></file>
    <file path="000/105/606/CWE563_Unused_Variable__unused_init_variable_long_81a.cpp" language="C++" size="2257" checksum="aa0b6427772de703830a115b5cbd4eae7ca6a5ca"></file>
  </testcase>
  <testcase id="105607" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/607/CWE563_Unused_Variable__unused_init_variable_long_82.h" language="C" size="1214" checksum="f2f9f225584a99d7dd160ebe65353c5bd7a11c11"></file>
    <file path="000/105/607/CWE563_Unused_Variable__unused_init_variable_long_82_bad.cpp" language="C++" size="917" checksum="d9173ea7fec0376b59221269b2043d9e02d5b9cb">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/607/CWE563_Unused_Variable__unused_init_variable_long_82_goodB2G.cpp" language="C++" size="860" checksum="efeee06d7430b86380ab6ccb3d1fb64d2d2d3d1f"></file>
    <file path="000/105/607/CWE563_Unused_Variable__unused_init_variable_long_82a.cpp" language="C++" size="2297" checksum="bec9fb117b2559dd1654ccd92fb68d7ad23690b9"></file>
  </testcase>
  <testcase id="105608" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/608/CWE563_Unused_Variable__unused_init_variable_long_83.h" language="C" size="1239" checksum="29005cf45ef06f4fba0c51887b1aafe418c2110b"></file>
    <file path="000/105/608/CWE563_Unused_Variable__unused_init_variable_long_83_bad.cpp" language="C++" size="1208" checksum="a8ce6a8fd9cc75bbfd213fd07b5fd760734e5b4a">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/608/CWE563_Unused_Variable__unused_init_variable_long_83_goodB2G.cpp" language="C++" size="1163" checksum="70db1c0981371476a063b7bb0a49dd60eab0be5b"></file>
    <file path="000/105/608/CWE563_Unused_Variable__unused_init_variable_long_83a.cpp" language="C++" size="1943" checksum="50f15069ac5358fc8043d42fb6e07e0f637e94df"></file>
  </testcase>
  <testcase id="105609" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/609/CWE563_Unused_Variable__unused_init_variable_long_84.h" language="C" size="1264" checksum="6a01afd9275bf85f6483437d993192cedb304162"></file>
    <file path="000/105/609/CWE563_Unused_Variable__unused_init_variable_long_84_bad.cpp" language="C++" size="1233" checksum="c1b4824cfbc8acc716f84fec55b950e986b3d6d8">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/609/CWE563_Unused_Variable__unused_init_variable_long_84_goodB2G.cpp" language="C++" size="1188" checksum="38b306673b125dec05f88d2cb8af3993bc54f195"></file>
    <file path="000/105/609/CWE563_Unused_Variable__unused_init_variable_long_84a.cpp" language="C++" size="2152" checksum="102f13faab2f20886e11869cc643d018db4b084e"></file>
  </testcase>
  <testcase id="105610" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/610/CWE563_Unused_Variable__unused_init_variable_struct_01.c" language="C" size="2043" checksum="622e2a16392bc4622b4750b1f59ad003a4bc8006">
      <mixed line="30" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105611" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/611/CWE563_Unused_Variable__unused_init_variable_struct_02.c" language="C" size="2634" checksum="e27f7bcf4c9a61ad7024258d434f7913d0db2f78">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105612" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/612/CWE563_Unused_Variable__unused_init_variable_struct_03.c" language="C" size="2655" checksum="204a430c07ae9e4befa84958f50e0705be7cbcfc">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105613" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/613/CWE563_Unused_Variable__unused_init_variable_struct_04.c" language="C" size="3020" checksum="68512000347cd289196b5f05433e64a29d358d45">
      <mixed line="38" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105614" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/614/CWE563_Unused_Variable__unused_init_variable_struct_05.c" language="C" size="2991" checksum="0dcada1f897aac420977229e61f72562bd28832a">
      <mixed line="38" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105615" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/615/CWE563_Unused_Variable__unused_init_variable_struct_06.c" language="C" size="2961" checksum="98d694400a5bcec2a53ca9c909b485c8dbcdd001">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105616" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/616/CWE563_Unused_Variable__unused_init_variable_struct_07.c" language="C" size="2941" checksum="6381b1b91f89540c9fb953c28a08f6971d4c6328">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105617" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/617/CWE563_Unused_Variable__unused_init_variable_struct_08.c" language="C" size="3041" checksum="73033c7f1cc07f92c0a673326e21fd603a6512ba">
      <mixed line="45" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105618" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/618/CWE563_Unused_Variable__unused_init_variable_struct_09.c" language="C" size="2749" checksum="a9d882893f4a602c5c59004771afb864ebbd4772">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105619" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/619/CWE563_Unused_Variable__unused_init_variable_struct_10.c" language="C" size="2700" checksum="5cd56f67f86e2cd0fdb0a929a3f5a094cfe7e46c">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105620" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/620/CWE563_Unused_Variable__unused_init_variable_struct_11.c" language="C" size="2763" checksum="996e65c83ca9894fbc81d713e59dbedc6feb1b41">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105621" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/621/CWE563_Unused_Variable__unused_init_variable_struct_13.c" language="C" size="2767" checksum="0d6af1d529bd73f2072550dc1b917fb4dc8aa172">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105622" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/622/CWE563_Unused_Variable__unused_init_variable_struct_14.c" language="C" size="2718" checksum="763b8c5040cc7d29e9e600fb59758f023ceaf7ff">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105623" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/623/CWE563_Unused_Variable__unused_init_variable_struct_15.c" language="C" size="3057" checksum="399f2dff8f1e0c6983c68ab9f923177370321138">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105624" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/624/CWE563_Unused_Variable__unused_init_variable_struct_16.c" language="C" size="2208" checksum="e4054d9215c2b6f1c0d11433a192490515f4fb16">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105625" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/625/CWE563_Unused_Variable__unused_init_variable_struct_17.c" language="C" size="2189" checksum="97c9f54474248031d42217c43263fbe570beaa9a">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105626" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/626/CWE563_Unused_Variable__unused_init_variable_struct_18.c" language="C" size="2148" checksum="a0a496f02f6fd0c986897de8d67c24ae63f61c4c">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105627" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/627/CWE563_Unused_Variable__unused_init_variable_struct_21.c" language="C" size="3402" checksum="90e3d86e2d59c35e7726d36e58756631cf99f425">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105628" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/628/CWE563_Unused_Variable__unused_init_variable_struct_22a.c" language="C" size="3504" checksum="c7554f7679f5e3e4e6fd9c10a60ef0dd34f40e2a"></file>
    <file path="000/105/628/CWE563_Unused_Variable__unused_init_variable_struct_22b.c" language="C" size="2262" checksum="aaeaab369ca0f73a154c9602f0674e3e3979d299">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105629" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/629/CWE563_Unused_Variable__unused_init_variable_struct_33.cpp" language="C++" size="2299" checksum="de1af6bcd704892e7145de46d78741c813078953">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105630" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/630/CWE563_Unused_Variable__unused_init_variable_struct_43.cpp" language="C++" size="2289" checksum="12b8de3ce2ae6ff89ca41aefbde1f35db09aec1c">
      <mixed line="38" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105631" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/631/CWE563_Unused_Variable__unused_init_variable_struct_72a.cpp" language="C++" size="2603" checksum="f555b61aaeb5e08917d4b5b281d49f779bd708f6"></file>
    <file path="000/105/631/CWE563_Unused_Variable__unused_init_variable_struct_72b.cpp" language="C++" size="1247" checksum="a525c1f04548f4b6ed2be13b6ebc855e20e9bd64">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105632" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/632/CWE563_Unused_Variable__unused_init_variable_struct_73a.cpp" language="C++" size="2457" checksum="346eac4fdaee38631689859c8ae0e9680996a18b"></file>
    <file path="000/105/632/CWE563_Unused_Variable__unused_init_variable_struct_73b.cpp" language="C++" size="1237" checksum="97fb170d657babf5759753e578c5d0d572beaa18">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105633" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/633/CWE563_Unused_Variable__unused_init_variable_struct_74a.cpp" language="C++" size="2422" checksum="ea0799fbdb36d3f08d0f472e44cca663a7e041e1"></file>
    <file path="000/105/633/CWE563_Unused_Variable__unused_init_variable_struct_74b.cpp" language="C++" size="1230" checksum="05a4bfa4d5e5228e680ae2f27c497ba8eb2c54dc">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105634" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/634/CWE563_Unused_Variable__unused_init_variable_struct_81.h" language="C" size="1275" checksum="7de939d44c9f08cba0e61b5a089db639da27d5d4"></file>
    <file path="000/105/634/CWE563_Unused_Variable__unused_init_variable_struct_81_bad.cpp" language="C++" size="942" checksum="3738565171c11739d01771dd47cbaede14d02c1b">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/634/CWE563_Unused_Variable__unused_init_variable_struct_81_goodB2G.cpp" language="C++" size="888" checksum="2c8be47b8117940fe5b7694a30d629096ecbfe0b"></file>
    <file path="000/105/634/CWE563_Unused_Variable__unused_init_variable_struct_81a.cpp" language="C++" size="2347" checksum="1f1179a53f9b1fae6c1089fae5ba6159ba0fa2c0"></file>
  </testcase>
  <testcase id="105635" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/635/CWE563_Unused_Variable__unused_init_variable_struct_82.h" language="C" size="1255" checksum="871765d325eb0ad655cb9f14c6bff6844c266980"></file>
    <file path="000/105/635/CWE563_Unused_Variable__unused_init_variable_struct_82_bad.cpp" language="C++" size="934" checksum="ab8995b7bcd3bd9d0de44d9ae185a5a0a1b3159b">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/635/CWE563_Unused_Variable__unused_init_variable_struct_82_goodB2G.cpp" language="C++" size="880" checksum="26339360765f1ad3b0cfa5d852d55effe4341df2"></file>
    <file path="000/105/635/CWE563_Unused_Variable__unused_init_variable_struct_82a.cpp" language="C++" size="2387" checksum="ac7121789f57c192c5078dbfe9bafe8b809a0859"></file>
  </testcase>
  <testcase id="105636" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/636/CWE563_Unused_Variable__unused_init_variable_struct_83.h" language="C" size="1291" checksum="ad743aef617c2cd775581fccc0c93c000b896c73"></file>
    <file path="000/105/636/CWE563_Unused_Variable__unused_init_variable_struct_83_bad.cpp" language="C++" size="1259" checksum="8a60e2f01d1bf5d5a0e1c6cb2b0c066cbb8a1973">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/636/CWE563_Unused_Variable__unused_init_variable_struct_83_goodB2G.cpp" language="C++" size="1217" checksum="4d8eb3194beda4963fdaf3cd15a8583fac3bbe9c"></file>
    <file path="000/105/636/CWE563_Unused_Variable__unused_init_variable_struct_83a.cpp" language="C++" size="1973" checksum="27ce6a3e697bdeaa83f1a8dd7e17ec7b90d27a51"></file>
  </testcase>
  <testcase id="105637" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/637/CWE563_Unused_Variable__unused_init_variable_struct_84.h" language="C" size="1316" checksum="842c3d7c2733a1597430406a460776d9d88b7477"></file>
    <file path="000/105/637/CWE563_Unused_Variable__unused_init_variable_struct_84_bad.cpp" language="C++" size="1284" checksum="4ca09f9ce9d43164a113b147bbfa3838234dea6e">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/637/CWE563_Unused_Variable__unused_init_variable_struct_84_goodB2G.cpp" language="C++" size="1242" checksum="c9a1e781642a186cbbbfda07e0bb87664482701f"></file>
    <file path="000/105/637/CWE563_Unused_Variable__unused_init_variable_struct_84a.cpp" language="C++" size="2186" checksum="3e62428ec30d509e182c35ee6a6cc44903b49da3"></file>
  </testcase>
  <testcase id="105638" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/638/CWE563_Unused_Variable__unused_init_variable_wchar_t_01.c" language="C" size="1982" checksum="f9f2e65f9b81d9c71ee9139b831fb20a1f49f37e">
      <mixed line="29" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105639" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/639/CWE563_Unused_Variable__unused_init_variable_wchar_t_02.c" language="C" size="2539" checksum="c75e6852c229587ee326c2fef67975e7b0a58265">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105640" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/640/CWE563_Unused_Variable__unused_init_variable_wchar_t_03.c" language="C" size="2560" checksum="fba56521dd28d43c22584ca65ff307f906a96f06">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105641" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/641/CWE563_Unused_Variable__unused_init_variable_wchar_t_04.c" language="C" size="2925" checksum="73e56e1e3a2e2ca3fe5d947b6e6ff2d1495f23bd">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105642" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/642/CWE563_Unused_Variable__unused_init_variable_wchar_t_05.c" language="C" size="2896" checksum="e4c1dfbef98b64bfa300f8982ab2b280470d7ba4">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105643" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/643/CWE563_Unused_Variable__unused_init_variable_wchar_t_06.c" language="C" size="2866" checksum="ec6d6c35d7cfff5622e418655c6c90141304b456">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105644" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/644/CWE563_Unused_Variable__unused_init_variable_wchar_t_07.c" language="C" size="2846" checksum="9465883c6d450685571052586d5c8de08192ae4b">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105645" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/645/CWE563_Unused_Variable__unused_init_variable_wchar_t_08.c" language="C" size="2946" checksum="a5653570deb019285de9736754d414fa66bfcd38">
      <mixed line="44" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105646" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/646/CWE563_Unused_Variable__unused_init_variable_wchar_t_09.c" language="C" size="2654" checksum="909857ebda9c5bc5ff0d6d58930a33a02ac8f26b">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105647" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/647/CWE563_Unused_Variable__unused_init_variable_wchar_t_10.c" language="C" size="2605" checksum="4ef21edb36a193b533224cfb86a4398ddd12e0ad">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105648" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/648/CWE563_Unused_Variable__unused_init_variable_wchar_t_11.c" language="C" size="2668" checksum="1361e5f728e1304a6eca7904afb961b0b07c1329">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105649" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/649/CWE563_Unused_Variable__unused_init_variable_wchar_t_13.c" language="C" size="2672" checksum="bf90e032b11a73e8972cac725953f308378062d7">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105650" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/650/CWE563_Unused_Variable__unused_init_variable_wchar_t_14.c" language="C" size="2623" checksum="40caf9d864b9b1c9d23bc759d62da92d4610b190">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105651" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/651/CWE563_Unused_Variable__unused_init_variable_wchar_t_15.c" language="C" size="2962" checksum="77dd653881f0aeabeac2a29a834592dcc8ca7cd2">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105652" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/652/CWE563_Unused_Variable__unused_init_variable_wchar_t_16.c" language="C" size="2147" checksum="88c28d24ab55c0524eb3f46c136f665e4bdb92eb">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105653" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/653/CWE563_Unused_Variable__unused_init_variable_wchar_t_17.c" language="C" size="2128" checksum="d02df6acc4bde0416c5d5fcc230690b8ae30b2ce">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105654" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/654/CWE563_Unused_Variable__unused_init_variable_wchar_t_18.c" language="C" size="2087" checksum="4e072eb1831750c113932f2e2cd56f4199f86fa9">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105655" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/655/CWE563_Unused_Variable__unused_init_variable_wchar_t_21.c" language="C" size="3289" checksum="134be2c6562bfb680f2e1eb4fe8f426f479f887e">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105656" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/656/CWE563_Unused_Variable__unused_init_variable_wchar_t_22a.c" language="C" size="3407" checksum="70737387740753bb2fdf233e30f4d6076ddf0469"></file>
    <file path="000/105/656/CWE563_Unused_Variable__unused_init_variable_wchar_t_22b.c" language="C" size="2250" checksum="f30cd4e389d51918a4ddd22ed4850ae8abe446b9">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105657" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/657/CWE563_Unused_Variable__unused_init_variable_wchar_t_33.cpp" language="C++" size="2212" checksum="440021f70ab5f890d590b07dcedd774c396865f9">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105658" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/658/CWE563_Unused_Variable__unused_init_variable_wchar_t_43.cpp" language="C++" size="2214" checksum="8447a538dd976c0456004f276306eb5ffab87b97">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105659" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/659/CWE563_Unused_Variable__unused_init_variable_wchar_t_72a.cpp" language="C++" size="2518" checksum="bbdd95af3fcbbfd93f8c09ff425042c7a764d185"></file>
    <file path="000/105/659/CWE563_Unused_Variable__unused_init_variable_wchar_t_72b.cpp" language="C++" size="1223" checksum="bb7bae6abafab8f400713eca44d62f40e1c704bc">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105660" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/660/CWE563_Unused_Variable__unused_init_variable_wchar_t_73a.cpp" language="C++" size="2372" checksum="9744da7f7fb18d211202fc7a07571fec50ee0cc5"></file>
    <file path="000/105/660/CWE563_Unused_Variable__unused_init_variable_wchar_t_73b.cpp" language="C++" size="1213" checksum="feb3ca06b5b11fd20bfe3b3e72c5d48a94d22141">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105661" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/661/CWE563_Unused_Variable__unused_init_variable_wchar_t_74a.cpp" language="C++" size="2337" checksum="3393d94fa654aba83b9184f1787ed589a156598d"></file>
    <file path="000/105/661/CWE563_Unused_Variable__unused_init_variable_wchar_t_74b.cpp" language="C++" size="1206" checksum="0bb4e1d9c4a23528e729588a00d2cae0099e2f6d">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105662" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/662/CWE563_Unused_Variable__unused_init_variable_wchar_t_81.h" language="C" size="1264" checksum="d63d53e14594ca7990fdf2dc6c67422126c74a67"></file>
    <file path="000/105/662/CWE563_Unused_Variable__unused_init_variable_wchar_t_81_bad.cpp" language="C++" size="940" checksum="e611d1153363951a4954ce9c6d0ec01be589d22d">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/662/CWE563_Unused_Variable__unused_init_variable_wchar_t_81_goodB2G.cpp" language="C++" size="884" checksum="5a50d7ed28cfc11b51998d0de57920dd688e58da"></file>
    <file path="000/105/662/CWE563_Unused_Variable__unused_init_variable_wchar_t_81a.cpp" language="C++" size="2291" checksum="9f6313c02488239f66d22e57a061dace8bc843e3"></file>
  </testcase>
  <testcase id="105663" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/663/CWE563_Unused_Variable__unused_init_variable_wchar_t_82.h" language="C" size="1244" checksum="7bd816d47f33f7b8c12a4f29027e812fcc8ecdfc"></file>
    <file path="000/105/663/CWE563_Unused_Variable__unused_init_variable_wchar_t_82_bad.cpp" language="C++" size="932" checksum="300f6c19fce17d323adb154740873628487f3187">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/663/CWE563_Unused_Variable__unused_init_variable_wchar_t_82_goodB2G.cpp" language="C++" size="876" checksum="8d7d6ebe09ffedb715427adc40340dded7965527"></file>
    <file path="000/105/663/CWE563_Unused_Variable__unused_init_variable_wchar_t_82a.cpp" language="C++" size="2331" checksum="2e35cd602a5d8cb5f9e72382a09f9cfddf144155"></file>
  </testcase>
  <testcase id="105664" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/664/CWE563_Unused_Variable__unused_init_variable_wchar_t_83.h" language="C" size="1275" checksum="8ee5041174564448acc27e8443bf36d515a5ec6d"></file>
    <file path="000/105/664/CWE563_Unused_Variable__unused_init_variable_wchar_t_83_bad.cpp" language="C++" size="1234" checksum="5719faa38f5a4a6fc5886c2758d18ad5eed3b890">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/664/CWE563_Unused_Variable__unused_init_variable_wchar_t_83_goodB2G.cpp" language="C++" size="1190" checksum="b075838dc5197d8f9cb07e400be4bc53bfbb9c73"></file>
    <file path="000/105/664/CWE563_Unused_Variable__unused_init_variable_wchar_t_83a.cpp" language="C++" size="1967" checksum="bc01ef62c75f5f3052e42c888683bd61c29a57d1"></file>
  </testcase>
  <testcase id="105665" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : do nothing<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/665/CWE563_Unused_Variable__unused_init_variable_wchar_t_84.h" language="C" size="1300" checksum="1e8cedc07de7eec1df69fb75381cb883024b3ce5"></file>
    <file path="000/105/665/CWE563_Unused_Variable__unused_init_variable_wchar_t_84_bad.cpp" language="C++" size="1259" checksum="d67567fb34a8671ea8969a6fb7d8ed6902af4b81">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/665/CWE563_Unused_Variable__unused_init_variable_wchar_t_84_goodB2G.cpp" language="C++" size="1215" checksum="caac9f976b92921efbf1ed4ba11fd2d16c600b62"></file>
    <file path="000/105/665/CWE563_Unused_Variable__unused_init_variable_wchar_t_84a.cpp" language="C++" size="2182" checksum="cee6156eefd4ba28df5c1299049cf1ba5c6386cf"></file>
  </testcase>
  <testcase id="105666" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Unused parameter value]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/666/CWE563_Unused_Variable__unused_parameter_value_01.c" language="C" size="1535" checksum="c31f77c454e7e0ecdd065bd499d0cd7e2e1c95c7">
      <mixed line="13" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105667" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Unused parameter variable]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/667/CWE563_Unused_Variable__unused_parameter_variable_01.c" language="C" size="1532" checksum="b9ed040ceefa9433a3ae4c280b745da4a100d81a">
      <mixed line="13" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105668" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Unused static global value]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/668/CWE563_Unused_Variable__unused_static_global_value_01.c" language="C" size="1530" checksum="a1ab7189c4eed7bce629d044782aac56515f7104">
      <mixed line="15" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105669" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Unused static global variable]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/669/CWE563_Unused_Variable__unused_static_global_variable_01.c" language="C" size="1500" checksum="26fd7e8ef271f270689c99b7129f57f94bf465f5">
      <mixed line="15" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105670" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/670/CWE563_Unused_Variable__unused_uninit_variable_char_01.c" language="C" size="2103" checksum="c6ca69149e891081b33ae81c4962ccc85d206972">
      <mixed line="29" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105671" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/671/CWE563_Unused_Variable__unused_uninit_variable_char_02.c" language="C" size="2739" checksum="ebf58157ee67da63dacd257dd263c01d19e3dd0c">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105672" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/672/CWE563_Unused_Variable__unused_uninit_variable_char_03.c" language="C" size="2760" checksum="2b2482fa7726d83e4116bee084ba8ecafb799aa5">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105673" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/673/CWE563_Unused_Variable__unused_uninit_variable_char_04.c" language="C" size="3125" checksum="2978b4a6d2a821c73cf6456354fb8fa81bb4d489">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105674" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/674/CWE563_Unused_Variable__unused_uninit_variable_char_05.c" language="C" size="3096" checksum="62e5b9aee0d019a6c1dcc0bf84e35dbe1210257d">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105675" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/675/CWE563_Unused_Variable__unused_uninit_variable_char_06.c" language="C" size="3066" checksum="8eb8cc27b046dbac39c146c275dc95711efeb451">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105676" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/676/CWE563_Unused_Variable__unused_uninit_variable_char_07.c" language="C" size="3046" checksum="d87665ff52425cfbea9b95c539251670bb1f3691">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105677" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/677/CWE563_Unused_Variable__unused_uninit_variable_char_08.c" language="C" size="3146" checksum="76cb4f0886a7849d6a856b5180e7a62e5813d49c">
      <mixed line="44" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105678" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/678/CWE563_Unused_Variable__unused_uninit_variable_char_09.c" language="C" size="2854" checksum="65381d5df594fa2fa3337120a249f01948800ade">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105679" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/679/CWE563_Unused_Variable__unused_uninit_variable_char_10.c" language="C" size="2805" checksum="f6a7f7f82162176d247110da4d9c253a98c0e12a">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105680" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/680/CWE563_Unused_Variable__unused_uninit_variable_char_11.c" language="C" size="2868" checksum="76aa8826fadcd823f32bbbe711af0632ad39ccf6">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105681" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/681/CWE563_Unused_Variable__unused_uninit_variable_char_13.c" language="C" size="2872" checksum="e883e1de0ab442aef92c4684e8a8cf00e98640bb">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105682" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/682/CWE563_Unused_Variable__unused_uninit_variable_char_14.c" language="C" size="2823" checksum="df0f329b79ae0a24cd3e7b86a204b923e3083622">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105683" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/683/CWE563_Unused_Variable__unused_uninit_variable_char_15.c" language="C" size="3162" checksum="4bda4ff9edb4d1db7ded80832d02393e7ed4a2dc">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105684" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/684/CWE563_Unused_Variable__unused_uninit_variable_char_16.c" language="C" size="2272" checksum="4f8ebce0d750f1d77089218154ab0ee96551195c">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105685" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/685/CWE563_Unused_Variable__unused_uninit_variable_char_17.c" language="C" size="2253" checksum="e45d31614936330836f994f61dc65a7c46a7d17d">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105686" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/686/CWE563_Unused_Variable__unused_uninit_variable_char_18.c" language="C" size="2208" checksum="4d32d6139c1a1d5786162709f46dc4ca5fe11202">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105687" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/687/CWE563_Unused_Variable__unused_uninit_variable_char_21.c" language="C" size="3480" checksum="ecdcb5198eb870fd4df6f30ef351343d835a9892">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105688" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/688/CWE563_Unused_Variable__unused_uninit_variable_char_22a.c" language="C" size="3508" checksum="9c21f39b8586849b2105d6ef6665ffa88667e941"></file>
    <file path="000/105/688/CWE563_Unused_Variable__unused_uninit_variable_char_22b.c" language="C" size="2328" checksum="e9791359264c49100b4d99bf92432356ba6a0eb4">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105689" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/689/CWE563_Unused_Variable__unused_uninit_variable_char_33.cpp" language="C++" size="2327" checksum="ef44ff538974e6b4b66877a33a1bafaa11963cb4">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105690" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/690/CWE563_Unused_Variable__unused_uninit_variable_char_43.cpp" language="C++" size="2331" checksum="a06662d61fb48e9ced5cbc3e115a0ddcb4866513">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105691" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/691/CWE563_Unused_Variable__unused_uninit_variable_char_72a.cpp" language="C++" size="2594" checksum="882653df01cbaf1c92e1e09d0dc57caceecd8d68"></file>
    <file path="000/105/691/CWE563_Unused_Variable__unused_uninit_variable_char_72b.cpp" language="C++" size="1263" checksum="ae68d82bcbc6d17782df95b5aaeec0a7e9fece8c">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105692" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/692/CWE563_Unused_Variable__unused_uninit_variable_char_73a.cpp" language="C++" size="2448" checksum="bb9cae2be79f827f6e784d023a4fc3d4bf7a43cc"></file>
    <file path="000/105/692/CWE563_Unused_Variable__unused_uninit_variable_char_73b.cpp" language="C++" size="1253" checksum="ed4d3e45531d408986cc4a5ed0d9d19c3947f283">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105693" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/693/CWE563_Unused_Variable__unused_uninit_variable_char_74a.cpp" language="C++" size="2413" checksum="6255a3d10b986e6f3f4da4b8fb151b7e96c24253"></file>
    <file path="000/105/693/CWE563_Unused_Variable__unused_uninit_variable_char_74b.cpp" language="C++" size="1246" checksum="c88f96d0c53f3281b5e5993f062beecb31831e26">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105694" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/694/CWE563_Unused_Variable__unused_uninit_variable_char_81.h" language="C" size="1267" checksum="2b3ffaf3bc40630e215fe034a87a7d4dde8b17ab"></file>
    <file path="000/105/694/CWE563_Unused_Variable__unused_uninit_variable_char_81_bad.cpp" language="C++" size="952" checksum="d4828f8cf83319a1f8af129f16863e9cbeb672c9">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/694/CWE563_Unused_Variable__unused_uninit_variable_char_81_goodB2G.cpp" language="C++" size="931" checksum="563700b1f285cc9c14e38732fca963235843bc81"></file>
    <file path="000/105/694/CWE563_Unused_Variable__unused_uninit_variable_char_81a.cpp" language="C++" size="2374" checksum="f0f78b6e1d758c1a5141467d678fe1e2b8eafbb3"></file>
  </testcase>
  <testcase id="105695" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/695/CWE563_Unused_Variable__unused_uninit_variable_char_82.h" language="C" size="1247" checksum="f5771a1e79d43c7c397d52c99eaee07b19143120"></file>
    <file path="000/105/695/CWE563_Unused_Variable__unused_uninit_variable_char_82_bad.cpp" language="C++" size="944" checksum="b7845c823a75e83957a766f42a3c3f90ae0381f3">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/695/CWE563_Unused_Variable__unused_uninit_variable_char_82_goodB2G.cpp" language="C++" size="923" checksum="6ab2436a7bac36c4373d47881ee0670370af8386"></file>
    <file path="000/105/695/CWE563_Unused_Variable__unused_uninit_variable_char_82a.cpp" language="C++" size="2414" checksum="4de8ebb509baaae53d65bc0e61de94d4baddcbab"></file>
  </testcase>
  <testcase id="105696" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/696/CWE563_Unused_Variable__unused_uninit_variable_char_83.h" language="C" size="1274" checksum="cb64038da6640f4e8ce15a0a9848b224911eec19"></file>
    <file path="000/105/696/CWE563_Unused_Variable__unused_uninit_variable_char_83_bad.cpp" language="C++" size="1282" checksum="d1f7e42bac4ba26b29902584cfa0c77f26309a2d">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/696/CWE563_Unused_Variable__unused_uninit_variable_char_83_goodB2G.cpp" language="C++" size="1273" checksum="5ddeafd600215cbe6001f6d042207be9ccba6225"></file>
    <file path="000/105/696/CWE563_Unused_Variable__unused_uninit_variable_char_83a.cpp" language="C++" size="1974" checksum="ce42b86c0c7c5fb368d4263e91bd4beed933da08"></file>
  </testcase>
  <testcase id="105697" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/697/CWE563_Unused_Variable__unused_uninit_variable_char_84.h" language="C" size="1299" checksum="e793c9b71a384c943845cf413409971e21b9c12e"></file>
    <file path="000/105/697/CWE563_Unused_Variable__unused_uninit_variable_char_84_bad.cpp" language="C++" size="1307" checksum="bcae7da2198e1b11c824d5b3923d83aac702b1e6">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/697/CWE563_Unused_Variable__unused_uninit_variable_char_84_goodB2G.cpp" language="C++" size="1298" checksum="397cdfd04d3b61534848bf554a78e9eb36e0cf67"></file>
    <file path="000/105/697/CWE563_Unused_Variable__unused_uninit_variable_char_84a.cpp" language="C++" size="2187" checksum="eeb7198afbb47f0f73f212d7900b0cae6803f8d9"></file>
  </testcase>
  <testcase id="105698" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/698/CWE563_Unused_Variable__unused_uninit_variable_int64_t_01.c" language="C" size="2125" checksum="07dc15433b4a82315f2941c64045c77d3f6ebb25">
      <mixed line="29" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105699" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/699/CWE563_Unused_Variable__unused_uninit_variable_int64_t_02.c" language="C" size="2765" checksum="6a709369b25a8596def5cd627a3299ae380dc9d1">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105700" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/700/CWE563_Unused_Variable__unused_uninit_variable_int64_t_03.c" language="C" size="2786" checksum="36acbfe3494d23a0baf1a3bc50bd738be42537cd">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105701" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/701/CWE563_Unused_Variable__unused_uninit_variable_int64_t_04.c" language="C" size="3151" checksum="6091696c6d0ceff53f4b38550aa0d29d707e29c7">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105702" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/702/CWE563_Unused_Variable__unused_uninit_variable_int64_t_05.c" language="C" size="3122" checksum="13f5781bee0bae31eaea8729bf97754755f1f5a7">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105703" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/703/CWE563_Unused_Variable__unused_uninit_variable_int64_t_06.c" language="C" size="3092" checksum="4363f9ce4a538e8ad4ae1b538bc9f1c94810cbab">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105704" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/704/CWE563_Unused_Variable__unused_uninit_variable_int64_t_07.c" language="C" size="3072" checksum="1e5f37e69780c566157a4dd5ee0adccd0fb53c74">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105705" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/705/CWE563_Unused_Variable__unused_uninit_variable_int64_t_08.c" language="C" size="3172" checksum="0f54eb23aa9e6656f3de37c94b394c7d823628a3">
      <mixed line="44" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105706" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/706/CWE563_Unused_Variable__unused_uninit_variable_int64_t_09.c" language="C" size="2880" checksum="f179526dc59c6af1a162a94ea531989bade36436">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105707" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/707/CWE563_Unused_Variable__unused_uninit_variable_int64_t_10.c" language="C" size="2831" checksum="6b60b4dcf170042614599d4e35320f3d827044ff">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105708" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/708/CWE563_Unused_Variable__unused_uninit_variable_int64_t_11.c" language="C" size="2894" checksum="9ffd13aabd090329fd1dd937897038688d873488">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105709" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/709/CWE563_Unused_Variable__unused_uninit_variable_int64_t_13.c" language="C" size="2898" checksum="25d0a6b7a3dd37e7f5cc144da5b820e72d82792f">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105710" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/710/CWE563_Unused_Variable__unused_uninit_variable_int64_t_14.c" language="C" size="2849" checksum="6ba290655c236f9cf30a26bd611637cf6d0d7dfc">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105711" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/711/CWE563_Unused_Variable__unused_uninit_variable_int64_t_15.c" language="C" size="3188" checksum="d221c8ac98c541d5c786bb586b974be550c6d951">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105712" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/712/CWE563_Unused_Variable__unused_uninit_variable_int64_t_16.c" language="C" size="2294" checksum="09e588772ac9938813091c8fa9c547783e2c37ee">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105713" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/713/CWE563_Unused_Variable__unused_uninit_variable_int64_t_17.c" language="C" size="2275" checksum="2ea9bbcd93fb5e882a0f38cf016830cf458b2891">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105714" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/714/CWE563_Unused_Variable__unused_uninit_variable_int64_t_18.c" language="C" size="2230" checksum="b0312087fd2f658c1fe7e2d4b04fb98e9dbde2fc">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105715" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/715/CWE563_Unused_Variable__unused_uninit_variable_int64_t_21.c" language="C" size="3515" checksum="99a4ccff0ad4b014235b3ace1882fe844374c6e0">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105716" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/716/CWE563_Unused_Variable__unused_uninit_variable_int64_t_22a.c" language="C" size="3577" checksum="bc387d0c70218ceed47747fced6486f731673923"></file>
    <file path="000/105/716/CWE563_Unused_Variable__unused_uninit_variable_int64_t_22b.c" language="C" size="2369" checksum="bf3022bcf7c618dc04e35e15f3feb55f56d942cf">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105717" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/717/CWE563_Unused_Variable__unused_uninit_variable_int64_t_33.cpp" language="C++" size="2355" checksum="49979f5f7889f1eeaa38ea95d737311ae7ce9980">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105718" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/718/CWE563_Unused_Variable__unused_uninit_variable_int64_t_43.cpp" language="C++" size="2353" checksum="3375ea452f4c5311802b35a857bb860e7bd70ce8">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105719" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/719/CWE563_Unused_Variable__unused_uninit_variable_int64_t_72a.cpp" language="C++" size="2621" checksum="4311c77dbf558bac62a5e41a173084c4eab48252"></file>
    <file path="000/105/719/CWE563_Unused_Variable__unused_uninit_variable_int64_t_72b.cpp" language="C++" size="1282" checksum="0db6e55144ccf63d49475e00e4d3684f82a0b0be">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105720" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/720/CWE563_Unused_Variable__unused_uninit_variable_int64_t_73a.cpp" language="C++" size="2475" checksum="8bd7df432d86e1c55a21e52aacc4c69114405c6d"></file>
    <file path="000/105/720/CWE563_Unused_Variable__unused_uninit_variable_int64_t_73b.cpp" language="C++" size="1272" checksum="b3956223076b8637c648884d470b9677b3267c52">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105721" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/721/CWE563_Unused_Variable__unused_uninit_variable_int64_t_74a.cpp" language="C++" size="2440" checksum="d5c5f4c7eae9786db22dd42fc8c24c98acbf0792"></file>
    <file path="000/105/721/CWE563_Unused_Variable__unused_uninit_variable_int64_t_74b.cpp" language="C++" size="1265" checksum="c85039f78da4c35672245f77aba99165a276d5bf">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105722" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/722/CWE563_Unused_Variable__unused_uninit_variable_int64_t_81.h" language="C" size="1297" checksum="c2595b7f0da7a0637c718bc70e5168a809babb51"></file>
    <file path="000/105/722/CWE563_Unused_Variable__unused_uninit_variable_int64_t_81_bad.cpp" language="C++" size="967" checksum="639deb03c0295cf4de17f51f9dc7c0dc8911dc66">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/722/CWE563_Unused_Variable__unused_uninit_variable_int64_t_81_goodB2G.cpp" language="C++" size="947" checksum="5f4db91ec7f4c7e77a908567440d1cc28f572a32"></file>
    <file path="000/105/722/CWE563_Unused_Variable__unused_uninit_variable_int64_t_81a.cpp" language="C++" size="2404" checksum="a4d8271829138362a6608e4d5a60438e9e3c2fa2"></file>
  </testcase>
  <testcase id="105723" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/723/CWE563_Unused_Variable__unused_uninit_variable_int64_t_82.h" language="C" size="1277" checksum="2aff0e61045d1eefa4480c2e1790374e0483b1fa"></file>
    <file path="000/105/723/CWE563_Unused_Variable__unused_uninit_variable_int64_t_82_bad.cpp" language="C++" size="959" checksum="cbcd626c4a6083fb89e32c6c1dd398107d08cf0c">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/723/CWE563_Unused_Variable__unused_uninit_variable_int64_t_82_goodB2G.cpp" language="C++" size="939" checksum="8e6b123d01ece0d18e8621dcfe92073518add2be"></file>
    <file path="000/105/723/CWE563_Unused_Variable__unused_uninit_variable_int64_t_82a.cpp" language="C++" size="2444" checksum="4a080b3d4ade14360d7f541a0bfe1dbf3b662287"></file>
  </testcase>
  <testcase id="105724" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/724/CWE563_Unused_Variable__unused_uninit_variable_int64_t_83.h" language="C" size="1310" checksum="990f8e0829536fa14d20ee60f88a2cfa8c207d24"></file>
    <file path="000/105/724/CWE563_Unused_Variable__unused_uninit_variable_int64_t_83_bad.cpp" language="C++" size="1306" checksum="93796970f8ed939d97ed9079807a3fa0e13f9abb">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/724/CWE563_Unused_Variable__unused_uninit_variable_int64_t_83_goodB2G.cpp" language="C++" size="1298" checksum="c37e8f7e8e97db60a3695e0409babeb50c4dfc3e"></file>
    <file path="000/105/724/CWE563_Unused_Variable__unused_uninit_variable_int64_t_83a.cpp" language="C++" size="1998" checksum="26fae2bb42c6f440a76e58c82cd363f9d0b8fd41"></file>
  </testcase>
  <testcase id="105725" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/725/CWE563_Unused_Variable__unused_uninit_variable_int64_t_84.h" language="C" size="1335" checksum="25a8270ddf700a95dc8c1c3e70c4679c57555701"></file>
    <file path="000/105/725/CWE563_Unused_Variable__unused_uninit_variable_int64_t_84_bad.cpp" language="C++" size="1331" checksum="fad74ce95a6c408e506d74f785f1f32b8bf22514">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/725/CWE563_Unused_Variable__unused_uninit_variable_int64_t_84_goodB2G.cpp" language="C++" size="1323" checksum="8585af4cb5c2ddd23d04a8a8336519775f31ccd4"></file>
    <file path="000/105/725/CWE563_Unused_Variable__unused_uninit_variable_int64_t_84a.cpp" language="C++" size="2217" checksum="8c55d0c20252a50ef2db793f79cb5e5dedf41c7e"></file>
  </testcase>
  <testcase id="105726" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/726/CWE563_Unused_Variable__unused_uninit_variable_int_01.c" language="C" size="2090" checksum="af6886ad3f804d5fdb7921f774695b9f2baddec8">
      <mixed line="29" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105727" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/727/CWE563_Unused_Variable__unused_uninit_variable_int_02.c" language="C" size="2719" checksum="db8a87d52cf1d76ef46294f773657cbaa4bf1a14">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105728" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/728/CWE563_Unused_Variable__unused_uninit_variable_int_03.c" language="C" size="2740" checksum="a10ee74533491cb5402d8f6b422bf0a97da81268">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105729" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/729/CWE563_Unused_Variable__unused_uninit_variable_int_04.c" language="C" size="3105" checksum="332d27206de3b28633945facbe217b7e64a2c318">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105730" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/730/CWE563_Unused_Variable__unused_uninit_variable_int_05.c" language="C" size="3076" checksum="d306ab446ffd3439dac354d27d625c0732b49af3">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105731" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/731/CWE563_Unused_Variable__unused_uninit_variable_int_06.c" language="C" size="3046" checksum="c0f679091526caf6db8cf427fab72571965650f9">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105732" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/732/CWE563_Unused_Variable__unused_uninit_variable_int_07.c" language="C" size="3026" checksum="49b1c65fe6f5d496482b6e960c13f899b62ceb33">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105733" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/733/CWE563_Unused_Variable__unused_uninit_variable_int_08.c" language="C" size="3126" checksum="8ddba6ea52dc5ef91b9a170a0fd2e5ac324a8ec3">
      <mixed line="44" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105734" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/734/CWE563_Unused_Variable__unused_uninit_variable_int_09.c" language="C" size="2834" checksum="3d8068538686e00f917e9fe9ac104348634445c1">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105735" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/735/CWE563_Unused_Variable__unused_uninit_variable_int_10.c" language="C" size="2785" checksum="1119ca76f1281a1787763a9329e7677b5be2a857">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105736" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/736/CWE563_Unused_Variable__unused_uninit_variable_int_11.c" language="C" size="2848" checksum="b0aeaa2c480dc598ce01c2af0144d95b07a1d204">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105737" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/737/CWE563_Unused_Variable__unused_uninit_variable_int_13.c" language="C" size="2852" checksum="cf8f5434c4c4a12475929dd2a10c92bdf3e42947">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105738" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/738/CWE563_Unused_Variable__unused_uninit_variable_int_14.c" language="C" size="2803" checksum="852987c5696c0d404bd140bd4fc06e5df42668eb">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105739" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/739/CWE563_Unused_Variable__unused_uninit_variable_int_15.c" language="C" size="3142" checksum="fdf36c2b940111920be14cbb101c1ddc767ba47d">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105740" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/740/CWE563_Unused_Variable__unused_uninit_variable_int_16.c" language="C" size="2259" checksum="d5d4399bc74b0665d2bfc5fae2bfd5c45a26a16a">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105741" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/741/CWE563_Unused_Variable__unused_uninit_variable_int_17.c" language="C" size="2240" checksum="527ac9e57780cbadeacea28748c358d8d999de88">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105742" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/742/CWE563_Unused_Variable__unused_uninit_variable_int_18.c" language="C" size="2195" checksum="0be901acfda412310673c040b25b176caa006d89">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105743" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/743/CWE563_Unused_Variable__unused_uninit_variable_int_21.c" language="C" size="3457" checksum="469009d7b032d6df44fbbeef074a2adbc28e2268">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105744" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/744/CWE563_Unused_Variable__unused_uninit_variable_int_22a.c" language="C" size="3485" checksum="8ec9bb48fc979ba53117ec8c70f66cd53b10946c"></file>
    <file path="000/105/744/CWE563_Unused_Variable__unused_uninit_variable_int_22b.c" language="C" size="2303" checksum="564ce18ca181fd7fa092218d7832ffc24b688578">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105745" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/745/CWE563_Unused_Variable__unused_uninit_variable_int_33.cpp" language="C++" size="2312" checksum="90d23090e6d271e012e87d6bcff5f7e583f69d2d">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105746" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/746/CWE563_Unused_Variable__unused_uninit_variable_int_43.cpp" language="C++" size="2318" checksum="fc09c9483b74f200b1d5cc9b3bf0532054675cde">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105747" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/747/CWE563_Unused_Variable__unused_uninit_variable_int_72a.cpp" language="C++" size="2585" checksum="33078778ab63040a153944f2744ce849713767c2"></file>
    <file path="000/105/747/CWE563_Unused_Variable__unused_uninit_variable_int_72b.cpp" language="C++" size="1251" checksum="fb24adc68c7046e5cbcbd03ca356358476842464">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105748" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/748/CWE563_Unused_Variable__unused_uninit_variable_int_73a.cpp" language="C++" size="2439" checksum="677deb54f0212ef0e5bb08d4b6eac7aea12992e2"></file>
    <file path="000/105/748/CWE563_Unused_Variable__unused_uninit_variable_int_73b.cpp" language="C++" size="1241" checksum="a15b3a5c37a97b1d16943985b9c4fe6be4e246ae">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105749" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/749/CWE563_Unused_Variable__unused_uninit_variable_int_74a.cpp" language="C++" size="2404" checksum="7f52484262e6ab041b6bcb34e1c8012e83323646"></file>
    <file path="000/105/749/CWE563_Unused_Variable__unused_uninit_variable_int_74b.cpp" language="C++" size="1234" checksum="31d85c309731f35b13938ca1d33a36105e0092bd">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105750" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/750/CWE563_Unused_Variable__unused_uninit_variable_int_81.h" language="C" size="1257" checksum="3c0dd08673a534eeb1ea63820256d6219455d6c4"></file>
    <file path="000/105/750/CWE563_Unused_Variable__unused_uninit_variable_int_81_bad.cpp" language="C++" size="947" checksum="65146418480ede7fe0512eefe1aadbadb641b9ec">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/750/CWE563_Unused_Variable__unused_uninit_variable_int_81_goodB2G.cpp" language="C++" size="920" checksum="3e983de1c63d5e755ed9e6671a756a9d9db6e73e"></file>
    <file path="000/105/750/CWE563_Unused_Variable__unused_uninit_variable_int_81a.cpp" language="C++" size="2364" checksum="31c6316be319c1b04c541518a70c219e6110ee5a"></file>
  </testcase>
  <testcase id="105751" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/751/CWE563_Unused_Variable__unused_uninit_variable_int_82.h" language="C" size="1237" checksum="7d8d2ae1aa10de95da9729fda906e9c62a8f18ef"></file>
    <file path="000/105/751/CWE563_Unused_Variable__unused_uninit_variable_int_82_bad.cpp" language="C++" size="939" checksum="2f52d52fb9dab57db56976192f425a7a93456a41">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/751/CWE563_Unused_Variable__unused_uninit_variable_int_82_goodB2G.cpp" language="C++" size="912" checksum="a0479fa433ff73f1630dc946629a5cb5d8600c51"></file>
    <file path="000/105/751/CWE563_Unused_Variable__unused_uninit_variable_int_82a.cpp" language="C++" size="2404" checksum="a619958e33f50c9e2597bc61b070fc97ed0cf893"></file>
  </testcase>
  <testcase id="105752" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/752/CWE563_Unused_Variable__unused_uninit_variable_int_83.h" language="C" size="1262" checksum="81702eca2daeb76a85c964bf69ac1fbdde59d5af"></file>
    <file path="000/105/752/CWE563_Unused_Variable__unused_uninit_variable_int_83_bad.cpp" language="C++" size="1274" checksum="c5d0650696414a6f6c8806bb830a4ca656d89baa">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/752/CWE563_Unused_Variable__unused_uninit_variable_int_83_goodB2G.cpp" language="C++" size="1259" checksum="ba34ff1e97c47a266c18aee075e472dfe737ded7"></file>
    <file path="000/105/752/CWE563_Unused_Variable__unused_uninit_variable_int_83a.cpp" language="C++" size="1966" checksum="3d1ff901d408ff4182615b050cf65ca1548d4f83"></file>
  </testcase>
  <testcase id="105753" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/753/CWE563_Unused_Variable__unused_uninit_variable_int_84.h" language="C" size="1287" checksum="45ea26e64103cbf58c215b08bf6ca3f87426a986"></file>
    <file path="000/105/753/CWE563_Unused_Variable__unused_uninit_variable_int_84_bad.cpp" language="C++" size="1299" checksum="a956953cb4af8d0579220548d120ad4636a22e84">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/753/CWE563_Unused_Variable__unused_uninit_variable_int_84_goodB2G.cpp" language="C++" size="1284" checksum="89a0765dec837313789a15822fc5e4ee320bfc74"></file>
    <file path="000/105/753/CWE563_Unused_Variable__unused_uninit_variable_int_84a.cpp" language="C++" size="2177" checksum="8740fd19860ffb96662150eb4421a55c483d8cec"></file>
  </testcase>
  <testcase id="105754" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/754/CWE563_Unused_Variable__unused_uninit_variable_long_01.c" language="C" size="2099" checksum="1282d82fb48150f3a26aa6049ecf7bebab693c40">
      <mixed line="29" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105755" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/755/CWE563_Unused_Variable__unused_uninit_variable_long_02.c" language="C" size="2731" checksum="f91206052bfcdd72d5c3cc032479cc1fce97f705">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105756" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/756/CWE563_Unused_Variable__unused_uninit_variable_long_03.c" language="C" size="2752" checksum="9db5ef8edc79a99d53cd22f78fca92bf0b3bb5a2">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105757" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/757/CWE563_Unused_Variable__unused_uninit_variable_long_04.c" language="C" size="3117" checksum="7ec0935640b236efda4a845d0a17f4e401166ed1">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105758" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/758/CWE563_Unused_Variable__unused_uninit_variable_long_05.c" language="C" size="3088" checksum="17b81edae2807752801e79ccab20a6de4f306fae">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105759" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/759/CWE563_Unused_Variable__unused_uninit_variable_long_06.c" language="C" size="3058" checksum="e837c2ec383d2ac8646202f6f0d1476dc147362b">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105760" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/760/CWE563_Unused_Variable__unused_uninit_variable_long_07.c" language="C" size="3038" checksum="1a0056b6ffe70d181452663be78f9d1322b28f93">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105761" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/761/CWE563_Unused_Variable__unused_uninit_variable_long_08.c" language="C" size="3138" checksum="a0791e68cf02df7bdd929f6166796adaa3b9fa27">
      <mixed line="44" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105762" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/762/CWE563_Unused_Variable__unused_uninit_variable_long_09.c" language="C" size="2846" checksum="aa6d2302db52cae3d0f53746009ea6c9531a5ea9">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105763" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/763/CWE563_Unused_Variable__unused_uninit_variable_long_10.c" language="C" size="2797" checksum="3514be3cf0616287c42181a9118577176a739745">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105764" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/764/CWE563_Unused_Variable__unused_uninit_variable_long_11.c" language="C" size="2860" checksum="6018b7fde62eb180edba9af1f97d485efb81ead9">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105765" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/765/CWE563_Unused_Variable__unused_uninit_variable_long_13.c" language="C" size="2864" checksum="9097e9b55b1230a9abb7aafefd2c18ce3a95c873">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105766" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/766/CWE563_Unused_Variable__unused_uninit_variable_long_14.c" language="C" size="2815" checksum="6010ff465685909ef4a17a8fe6bc284fa03824a7">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105767" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/767/CWE563_Unused_Variable__unused_uninit_variable_long_15.c" language="C" size="3154" checksum="203018f82e24bf53a6c3c46bdc9c8a0080b29226">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105768" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/768/CWE563_Unused_Variable__unused_uninit_variable_long_16.c" language="C" size="2268" checksum="7dfd957d902485347fea4649ea52b9bf8517ce9d">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105769" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/769/CWE563_Unused_Variable__unused_uninit_variable_long_17.c" language="C" size="2249" checksum="27e753d2dd1340aa76ae2299b9d206da9693002b">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105770" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/770/CWE563_Unused_Variable__unused_uninit_variable_long_18.c" language="C" size="2204" checksum="58a498a658303290625dab62df5b31af87edd926">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105771" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/771/CWE563_Unused_Variable__unused_uninit_variable_long_21.c" language="C" size="3472" checksum="6965d5d84cd1beaf60566efbac2a2303dea41665">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105772" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/772/CWE563_Unused_Variable__unused_uninit_variable_long_22a.c" language="C" size="3508" checksum="a24b554daf0bb052109f891e8ea06bbc3740ba8e"></file>
    <file path="000/105/772/CWE563_Unused_Variable__unused_uninit_variable_long_22b.c" language="C" size="2320" checksum="91ae98efdafa983c3cce46a304c331ed02b2ce15">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105773" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/773/CWE563_Unused_Variable__unused_uninit_variable_long_33.cpp" language="C++" size="2323" checksum="a18fdc37d791a62137812bda565e65704d23db3c">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105774" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/774/CWE563_Unused_Variable__unused_uninit_variable_long_43.cpp" language="C++" size="2327" checksum="05b1d1f33096c94533c36463ba602c019c8c731e">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105775" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/775/CWE563_Unused_Variable__unused_uninit_variable_long_72a.cpp" language="C++" size="2594" checksum="f552a3478896a7ccf8d2ef0c11736e1dd7150c68"></file>
    <file path="000/105/775/CWE563_Unused_Variable__unused_uninit_variable_long_72b.cpp" language="C++" size="1259" checksum="819a8c18ae24c5026e0ad80beb8be3816f608147">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105776" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/776/CWE563_Unused_Variable__unused_uninit_variable_long_73a.cpp" language="C++" size="2448" checksum="477250c2f3f0276fbef124588eab0825ff9d5556"></file>
    <file path="000/105/776/CWE563_Unused_Variable__unused_uninit_variable_long_73b.cpp" language="C++" size="1249" checksum="d1dfe0b420fe573574720f339022ee6e5316e3dd">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105777" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/777/CWE563_Unused_Variable__unused_uninit_variable_long_74a.cpp" language="C++" size="2413" checksum="c0f87ad7d7169b4a35a1595df86b94931f9fa144"></file>
    <file path="000/105/777/CWE563_Unused_Variable__unused_uninit_variable_long_74b.cpp" language="C++" size="1242" checksum="d44d2cd349937bde44089eb9021a38bc569f575e">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105778" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/778/CWE563_Unused_Variable__unused_uninit_variable_long_81.h" language="C" size="1267" checksum="41ef26e7b977c63d9adb2feb41de0274192074e7"></file>
    <file path="000/105/778/CWE563_Unused_Variable__unused_uninit_variable_long_81_bad.cpp" language="C++" size="952" checksum="6e1e181d4f4a17fdbc07a2b483e34a154aebd737">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/778/CWE563_Unused_Variable__unused_uninit_variable_long_81_goodB2G.cpp" language="C++" size="927" checksum="023a863c388aca821a4e6a8f21f673f85f398787"></file>
    <file path="000/105/778/CWE563_Unused_Variable__unused_uninit_variable_long_81a.cpp" language="C++" size="2374" checksum="a8773fa2bbec71f2131d42de63946eaf2c765832"></file>
  </testcase>
  <testcase id="105779" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/779/CWE563_Unused_Variable__unused_uninit_variable_long_82.h" language="C" size="1247" checksum="be48150d91183b66c426c5eab98fb018f8c183ee"></file>
    <file path="000/105/779/CWE563_Unused_Variable__unused_uninit_variable_long_82_bad.cpp" language="C++" size="944" checksum="a5ea17a4c26d3d45ab7c1b5e766e1498136068bf">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/779/CWE563_Unused_Variable__unused_uninit_variable_long_82_goodB2G.cpp" language="C++" size="919" checksum="9f0835b7f9d9a2f2aca8e40d5b9f15d2368cce32"></file>
    <file path="000/105/779/CWE563_Unused_Variable__unused_uninit_variable_long_82a.cpp" language="C++" size="2414" checksum="98d8e941a6b379042004cc4d09e5ecc676084d84"></file>
  </testcase>
  <testcase id="105780" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/780/CWE563_Unused_Variable__unused_uninit_variable_long_83.h" language="C" size="1274" checksum="1e4dcf5b37cbb9e9428e0f48d4da37c151d31878"></file>
    <file path="000/105/780/CWE563_Unused_Variable__unused_uninit_variable_long_83_bad.cpp" language="C++" size="1282" checksum="f4dcb13fc1951185db749ef3d1989b9513fd1396">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/780/CWE563_Unused_Variable__unused_uninit_variable_long_83_goodB2G.cpp" language="C++" size="1269" checksum="22ebde3fb4b8e2f152d347d6060de141a1b501e0"></file>
    <file path="000/105/780/CWE563_Unused_Variable__unused_uninit_variable_long_83a.cpp" language="C++" size="1974" checksum="a238e8ab1a39bda509c9bd85a8f200a2b2f5c251"></file>
  </testcase>
  <testcase id="105781" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/781/CWE563_Unused_Variable__unused_uninit_variable_long_84.h" language="C" size="1299" checksum="db3d76aa1ddc99a52749ada4f02c5eff65f9207c"></file>
    <file path="000/105/781/CWE563_Unused_Variable__unused_uninit_variable_long_84_bad.cpp" language="C++" size="1307" checksum="81113515c3cdb9088318c63721003a773f545718">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/781/CWE563_Unused_Variable__unused_uninit_variable_long_84_goodB2G.cpp" language="C++" size="1294" checksum="d1b270f5014c58701d1fad6298ac544d020bd671"></file>
    <file path="000/105/781/CWE563_Unused_Variable__unused_uninit_variable_long_84a.cpp" language="C++" size="2187" checksum="f6d38f7b9a335a0c5de30cac7c7d504b18074b3d"></file>
  </testcase>
  <testcase id="105782" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/782/CWE563_Unused_Variable__unused_uninit_variable_struct_01.c" language="C" size="2158" checksum="712f5cc66a5d9e25d8d700efda8d7fd872ea5c20">
      <mixed line="29" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105783" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/783/CWE563_Unused_Variable__unused_uninit_variable_struct_02.c" language="C" size="2838" checksum="e6def3e21c799e9c396aa73f769dee5dd8b46c2c">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105784" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/784/CWE563_Unused_Variable__unused_uninit_variable_struct_03.c" language="C" size="2859" checksum="b9020abfabb31e379bb442a2c24349d8dfa81201">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105785" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/785/CWE563_Unused_Variable__unused_uninit_variable_struct_04.c" language="C" size="3224" checksum="e94355c3fa1ec88980744c119d09d55fc0fabe33">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105786" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/786/CWE563_Unused_Variable__unused_uninit_variable_struct_05.c" language="C" size="3195" checksum="6a4263097212f6428551c6981c1a7b3f49465045">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105787" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/787/CWE563_Unused_Variable__unused_uninit_variable_struct_06.c" language="C" size="3165" checksum="fdd0f161ee80e98bd03aa2d8bceb1294221ef327">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105788" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/788/CWE563_Unused_Variable__unused_uninit_variable_struct_07.c" language="C" size="3145" checksum="b3b9609b16aee593e53f17e8463670bb883fdbed">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105789" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/789/CWE563_Unused_Variable__unused_uninit_variable_struct_08.c" language="C" size="3245" checksum="7c8d15e54de98870a1f21a2ff26d111acdd6c894">
      <mixed line="44" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105790" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/790/CWE563_Unused_Variable__unused_uninit_variable_struct_09.c" language="C" size="2953" checksum="420295c1e1920a34c5a9f99ed5e9fb03501e6197">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105791" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/791/CWE563_Unused_Variable__unused_uninit_variable_struct_10.c" language="C" size="2904" checksum="5f58cbd3124521bb130c5de3a979fcbb388a472a">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105792" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/792/CWE563_Unused_Variable__unused_uninit_variable_struct_11.c" language="C" size="2967" checksum="78b46ef3a6b3fbc1251810ad276e1921c96790c1">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105793" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/793/CWE563_Unused_Variable__unused_uninit_variable_struct_13.c" language="C" size="2971" checksum="fd2acd8161f22da3a0c4e18a2c534696928a4586">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105794" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/794/CWE563_Unused_Variable__unused_uninit_variable_struct_14.c" language="C" size="2922" checksum="7d5ddd2434ccd6bb0c5c8d0e082f6e4d622679d8">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105795" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/795/CWE563_Unused_Variable__unused_uninit_variable_struct_15.c" language="C" size="3261" checksum="be021d56163e103a64de34cdfc95f36ddcf0fee6">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105796" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/796/CWE563_Unused_Variable__unused_uninit_variable_struct_16.c" language="C" size="2331" checksum="ad9611718004b042e89874be0a638ad894a53165">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105797" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/797/CWE563_Unused_Variable__unused_uninit_variable_struct_17.c" language="C" size="2312" checksum="6779bf3bcb0cf36a7c7c183dc2dc3ed2c3edea04">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105798" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/798/CWE563_Unused_Variable__unused_uninit_variable_struct_18.c" language="C" size="2263" checksum="8b09a175bc60ca929753158cee34adf0d295c44b">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105799" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/799/CWE563_Unused_Variable__unused_uninit_variable_struct_21.c" language="C" size="3606" checksum="37d4d98626806c3030fad3e22f82a0b642cad615">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105800" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/800/CWE563_Unused_Variable__unused_uninit_variable_struct_22a.c" language="C" size="3596" checksum="a820460036f9898fd0c74012934ec7a98decff35"></file>
    <file path="000/105/800/CWE563_Unused_Variable__unused_uninit_variable_struct_22b.c" language="C" size="2437" checksum="bb95e66c15dbb2d71c38929fdc46d811452e00e3">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105801" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/801/CWE563_Unused_Variable__unused_uninit_variable_struct_33.cpp" language="C++" size="2418" checksum="9ab3d80fdaf5c0d670bcd63b51a33e896057dc9f">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105802" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/802/CWE563_Unused_Variable__unused_uninit_variable_struct_43.cpp" language="C++" size="2400" checksum="fc691f0f2b72a405c4bef7b2d31e684cb75b1974">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105803" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/803/CWE563_Unused_Variable__unused_uninit_variable_struct_72a.cpp" language="C++" size="2654" checksum="95d50a3c6b77ef0b9a957a302ab1acb1755c7757"></file>
    <file path="000/105/803/CWE563_Unused_Variable__unused_uninit_variable_struct_72b.cpp" language="C++" size="1330" checksum="e8de7514ad4adb59b6cf00a8b42819e914e3c917">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105804" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/804/CWE563_Unused_Variable__unused_uninit_variable_struct_73a.cpp" language="C++" size="2508" checksum="6ae7769f026897cf419b560a6049d6146bd8b3fe"></file>
    <file path="000/105/804/CWE563_Unused_Variable__unused_uninit_variable_struct_73b.cpp" language="C++" size="1320" checksum="5879ab369dc13c54ca7e706ea91d021aa27f3462">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105805" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/805/CWE563_Unused_Variable__unused_uninit_variable_struct_74a.cpp" language="C++" size="2473" checksum="7fd303a3255dd2c41ca33a4c8306f6ce9447850f"></file>
    <file path="000/105/805/CWE563_Unused_Variable__unused_uninit_variable_struct_74b.cpp" language="C++" size="1313" checksum="d927750048eaee2b7c8615ed19022585717a0ada">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105806" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/806/CWE563_Unused_Variable__unused_uninit_variable_struct_81.h" language="C" size="1308" checksum="f8c6fc239fc48d6977f0dddecfd88f0e96c9e8ea"></file>
    <file path="000/105/806/CWE563_Unused_Variable__unused_uninit_variable_struct_81_bad.cpp" language="C++" size="969" checksum="6d27cd015fe3d475b9665952c7a845ca193080cc">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/806/CWE563_Unused_Variable__unused_uninit_variable_struct_81_goodB2G.cpp" language="C++" size="975" checksum="6bb947756002648d5f94fbabbcc31d1acf9e465d"></file>
    <file path="000/105/806/CWE563_Unused_Variable__unused_uninit_variable_struct_81a.cpp" language="C++" size="2408" checksum="1246d59c6dc53474d7c08f90d2468a135c9eb901"></file>
  </testcase>
  <testcase id="105807" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/807/CWE563_Unused_Variable__unused_uninit_variable_struct_82.h" language="C" size="1288" checksum="37e6389db8202a08c84878d87f4814227100387e"></file>
    <file path="000/105/807/CWE563_Unused_Variable__unused_uninit_variable_struct_82_bad.cpp" language="C++" size="961" checksum="1b10670bc631283e4674ef0c854872dbdf872fb7">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/807/CWE563_Unused_Variable__unused_uninit_variable_struct_82_goodB2G.cpp" language="C++" size="967" checksum="7602fe0fbc76daff84bdbfa3983453e90ef02df6"></file>
    <file path="000/105/807/CWE563_Unused_Variable__unused_uninit_variable_struct_82a.cpp" language="C++" size="2448" checksum="0771dc6978765fdc1332865511b4d2c9bae8b2dc"></file>
  </testcase>
  <testcase id="105808" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/808/CWE563_Unused_Variable__unused_uninit_variable_struct_83.h" language="C" size="1326" checksum="b64a60bd4fdb1dd21fd10ed63165deca227b0a58"></file>
    <file path="000/105/808/CWE563_Unused_Variable__unused_uninit_variable_struct_83_bad.cpp" language="C++" size="1305" checksum="4bf810e9ba4953539faf597f6a82abd6c8e9dc66">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/808/CWE563_Unused_Variable__unused_uninit_variable_struct_83_goodB2G.cpp" language="C++" size="1323" checksum="f7c90169bd4e260527db8e51516452110c69ac42"></file>
    <file path="000/105/808/CWE563_Unused_Variable__unused_uninit_variable_struct_83a.cpp" language="C++" size="2004" checksum="def3fc8405fba51aa88355b86ba25f1d3bec019d"></file>
  </testcase>
  <testcase id="105809" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/809/CWE563_Unused_Variable__unused_uninit_variable_struct_84.h" language="C" size="1351" checksum="43a6ab64a7038d1782291212f139a24640efade6"></file>
    <file path="000/105/809/CWE563_Unused_Variable__unused_uninit_variable_struct_84_bad.cpp" language="C++" size="1330" checksum="3d73c4ecd06cb9d9238e18d8af650ebb3e0fbc70">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/809/CWE563_Unused_Variable__unused_uninit_variable_struct_84_goodB2G.cpp" language="C++" size="1348" checksum="63b704ee451f0fbc7441ea309366bb7f5adc6ed9"></file>
    <file path="000/105/809/CWE563_Unused_Variable__unused_uninit_variable_struct_84a.cpp" language="C++" size="2221" checksum="182d8f9baa31ec5b3f9d3f1f3cc347af59f64ef1"></file>
  </testcase>
  <testcase id="105810" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/810/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_01.c" language="C" size="2123" checksum="6c5f5f4ec41992f99d0cc6f4c4156b8e345030ba">
      <mixed line="29" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105811" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/811/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_02.c" language="C" size="2761" checksum="5254317da775777605e92a13305adc7b6cb0d6b4">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105812" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/812/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_03.c" language="C" size="2782" checksum="4d161b5446f1d580d2acc665f5601ca6ed091923">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105813" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/813/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_04.c" language="C" size="3147" checksum="e55528b50a226f930f19a6c2e22c68945a77ac77">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105814" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/814/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_05.c" language="C" size="3118" checksum="f47b95b8dbd1ddbac5fad90bff536f1d551450a5">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105815" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/815/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_06.c" language="C" size="3088" checksum="bc835a1d1795a42c72071d4636e58545ae9ddaaf">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105816" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/816/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_07.c" language="C" size="3068" checksum="e5818223379447b6447e9ad932ecbe669e2dacf5">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105817" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/817/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_08.c" language="C" size="3168" checksum="3352f75f940613e70d4a18d227aa8a478560b89c">
      <mixed line="44" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105818" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/818/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_09.c" language="C" size="2876" checksum="028323997a078187fb9998a732470a6e0c90ee37">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105819" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/819/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_10.c" language="C" size="2827" checksum="b050b4866800d3e26daece1cf41b3c1e474ba938">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105820" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/820/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_11.c" language="C" size="2890" checksum="4f0fb7a8bf0f177d95b734a5f6cbab7aa4c4f1ce">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105821" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/821/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_13.c" language="C" size="2894" checksum="4365145725fe18182059256cc3a98773c155f7b4">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105822" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/822/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_14.c" language="C" size="2845" checksum="3205db3f515c118f5cf21b14c1510c1e173e8f1b">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105823" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/823/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_15.c" language="C" size="3184" checksum="64bf89c1953e7db48d14ef6e4e6eeef1a679e528">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105824" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/824/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_16.c" language="C" size="2292" checksum="5a2db91e09a257c492f93b2efbc3247424047ca2">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105825" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/825/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_17.c" language="C" size="2273" checksum="dd3c22c30dd17593306676c759d1ea58cf25fd9f">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105826" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/826/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_18.c" language="C" size="2228" checksum="572d9cc61a9210ad9108f995b97bd865a9721de7">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105827" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/827/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_21.c" language="C" size="3511" checksum="30ac8730fef8a405b2186272077a6ee1e6c51c5b">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105828" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/828/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_22a.c" language="C" size="3577" checksum="0a497654fe044c19e4409f0d6869e50dc4e2216a"></file>
    <file path="000/105/828/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_22b.c" language="C" size="2365" checksum="f84de6f7599d6363a0da28cf2d822880e3f32545">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105829" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/829/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_33.cpp" language="C++" size="2353" checksum="89a70f785c9edc3593ebf99a3f10cd5ce3b32ac8">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105830" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/830/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_43.cpp" language="C++" size="2351" checksum="f627450c2e45e8c74e22fcfe657815ffd32d7eab">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105831" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/831/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_72a.cpp" language="C++" size="2621" checksum="ea11de19cdd4abc2642d943ccb1420d974bed7b4"></file>
    <file path="000/105/831/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_72b.cpp" language="C++" size="1280" checksum="03ed77f58937121ca70ef68983e7101634c04200">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105832" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/832/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_73a.cpp" language="C++" size="2475" checksum="bc938e35ba15d28776edfbaa92a5831bae71ecae"></file>
    <file path="000/105/832/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_73b.cpp" language="C++" size="1270" checksum="021e4248cdbc568db4dadc0acae0fb94ea5832c7">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105833" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/833/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_74a.cpp" language="C++" size="2440" checksum="c1ca8c88443bc90e63f9d8b2b5741d7d8c3eb39b"></file>
    <file path="000/105/833/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_74b.cpp" language="C++" size="1263" checksum="793887c9de5491fd2e32997ac9efbba927f4c56d">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105834" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/834/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_81.h" language="C" size="1297" checksum="e78c700681756cecdffd8620058854c40b6da4fb"></file>
    <file path="000/105/834/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_81_bad.cpp" language="C++" size="967" checksum="f2d8a3c8a71b6b63817e7bdb4c04d0eb12fcafd8">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/834/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_81_goodB2G.cpp" language="C++" size="945" checksum="726071f4720bcea76caa4b254ec9813a80e29459"></file>
    <file path="000/105/834/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_81a.cpp" language="C++" size="2404" checksum="d2caf5bdbd41389cabe638b6d94b8da75505cc0d"></file>
  </testcase>
  <testcase id="105835" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/835/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_82.h" language="C" size="1277" checksum="2fab72f0494dccfe9b2744f925d5c12d0de5b57a"></file>
    <file path="000/105/835/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_82_bad.cpp" language="C++" size="959" checksum="04fc2b0e59357ea104e193dfe7b63d02d1d2e88a">
      <mixed line="27" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/835/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_82_goodB2G.cpp" language="C++" size="937" checksum="19cbd4a4538e0d478a0de46538800a86de1eed72"></file>
    <file path="000/105/835/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_82a.cpp" language="C++" size="2444" checksum="6f1a2418a1baa421e355f7a9ce78aa8328cc4709"></file>
  </testcase>
  <testcase id="105836" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/836/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_83.h" language="C" size="1310" checksum="42b94472664c2ecbff8c8c933c0c60ced505d478"></file>
    <file path="000/105/836/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_83_bad.cpp" language="C++" size="1306" checksum="c8ed6e1ec7b496a68f214fdd8b15d0a6d0786a01">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/836/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_83_goodB2G.cpp" language="C++" size="1296" checksum="262d9f6aec54e756246c11794f66ea56aa482a9f"></file>
    <file path="000/105/836/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_83a.cpp" language="C++" size="1998" checksum="d35a2430f89629e70e657c28a763c9aab8f4c58f"></file>
  </testcase>
  <testcase id="105837" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> Sinks:<br/> GoodSink: Initialize, then use data<br/> BadSink : Do nothing<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/837/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_84.h" language="C" size="1335" checksum="7a7d83ee8989372f6ca154bb6a09fb77d54eef20"></file>
    <file path="000/105/837/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_84_bad.cpp" language="C++" size="1331" checksum="05b7caa3be667bea3b22f98720c8199c33479bc1">
      <mixed line="33" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/837/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_84_goodB2G.cpp" language="C++" size="1321" checksum="2c0b10be3505ea83138d03cf41006f0d78fa7eaa"></file>
    <file path="000/105/837/CWE563_Unused_Variable__unused_uninit_variable_wchar_t_84a.cpp" language="C++" size="2217" checksum="cce0b3a1d76b103efc4dd0dbbc00a5543187d632"></file>
  </testcase>
  <testcase id="105838" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/838/CWE563_Unused_Variable__unused_value_char_01.c" language="C" size="2370" checksum="9527c0e21f567e6fbd62123999aea1f15c813244">
      <mixed line="30" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105839" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/839/CWE563_Unused_Variable__unused_value_char_02.c" language="C" size="3794" checksum="1b27f34e7e3903b760ae5e44d8bbf0ec72dc79a8">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105840" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/840/CWE563_Unused_Variable__unused_value_char_03.c" language="C" size="3842" checksum="513196e4ac75b7b2b5f19dc896a5d71e8d713ecd">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105841" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/841/CWE563_Unused_Variable__unused_value_char_04.c" language="C" size="4326" checksum="6e668ab2689552b038ef05090df64d68d1b3b660">
      <mixed line="41" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105842" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/842/CWE563_Unused_Variable__unused_value_char_05.c" language="C" size="4234" checksum="28d14080f0371b0eb516c4ba4195f2c87b1a8c08">
      <mixed line="41" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105843" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/843/CWE563_Unused_Variable__unused_value_char_06.c" language="C" size="4292" checksum="c64d724b12fe523bf7ad089fcf97a4ddac02a250">
      <mixed line="40" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105844" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/844/CWE563_Unused_Variable__unused_value_char_07.c" language="C" size="4209" checksum="641f469ef64a848136a1fb5ed46bf9aa16c21179">
      <mixed line="40" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105845" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/845/CWE563_Unused_Variable__unused_value_char_08.c" language="C" size="4365" checksum="0420e64b7352fb3e0dfd07f59b72c8ca4946b116">
      <mixed line="48" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105846" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/846/CWE563_Unused_Variable__unused_value_char_09.c" language="C" size="4055" checksum="cf74ee6ebb4d9ac06c5a987302fa277266d085bb">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105847" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/847/CWE563_Unused_Variable__unused_value_char_10.c" language="C" size="3943" checksum="587ba05fd736956827c18390408b4948b89d0965">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105848" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/848/CWE563_Unused_Variable__unused_value_char_11.c" language="C" size="4087" checksum="97f81d429b93fddcab166ee3d75001f55811df4d">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105849" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/849/CWE563_Unused_Variable__unused_value_char_13.c" language="C" size="4098" checksum="eab18a4c4c433ceb74f55f6e1e214f9fd49069f8">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105850" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/850/CWE563_Unused_Variable__unused_value_char_14.c" language="C" size="3986" checksum="6a5c2c153e917eaeac118a09cfd3513936609eb8">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105851" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/851/CWE563_Unused_Variable__unused_value_char_15.c" language="C" size="5378" checksum="77671997be3ffb29afde0959b27c134e21415d11">
      <mixed line="42" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105852" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/852/CWE563_Unused_Variable__unused_value_char_16.c" language="C" size="2801" checksum="b70b5fafc011dd92f899d16e770e5a2cebafa1ab">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105853" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/853/CWE563_Unused_Variable__unused_value_char_17.c" language="C" size="2771" checksum="0da22d34170d08a42701f266286a88af6747cad7">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105854" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/854/CWE563_Unused_Variable__unused_value_char_18.c" language="C" size="2634" checksum="2d75301acf5429212016f318f31323dee3e323d5">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105855" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/855/CWE563_Unused_Variable__unused_value_char_21.c" language="C" size="3876" checksum="943a848990dfce2042b1ee38b631a61e00ed4ed2">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105856" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/856/CWE563_Unused_Variable__unused_value_char_22a.c" language="C" size="3760" checksum="f73821d474e28d05ee2beb41297184c5b37e16d3"></file>
    <file path="000/105/856/CWE563_Unused_Variable__unused_value_char_22b.c" language="C" size="2685" checksum="b5648c635be7f54b109f57ccccf8bf4bb1fe2939">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105857" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/857/CWE563_Unused_Variable__unused_value_char_33.cpp" language="C++" size="2697" checksum="78979a17659b9bef06d06b52863fc9d0d924d0fd">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105858" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/858/CWE563_Unused_Variable__unused_value_char_43.cpp" language="C++" size="2695" checksum="94e334aa0d93f84db5b57ee82ebfad4906539eee">
      <mixed line="38" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105859" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/859/CWE563_Unused_Variable__unused_value_char_72a.cpp" language="C++" size="3028" checksum="1048707efe62561f100b65dafddf238a6a39d993"></file>
    <file path="000/105/859/CWE563_Unused_Variable__unused_value_char_72b.cpp" language="C++" size="1551" checksum="915e8b876d69e00bfb4e3541ec5cdf41cb98f412">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105860" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/860/CWE563_Unused_Variable__unused_value_char_73a.cpp" language="C++" size="2810" checksum="736bf2de049e8f3d884f16bb3e8686e53130ab5a"></file>
    <file path="000/105/860/CWE563_Unused_Variable__unused_value_char_73b.cpp" language="C++" size="1539" checksum="095349c38029bb73ff460bcd1a1b7c6bac6b1b99">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105861" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/861/CWE563_Unused_Variable__unused_value_char_74a.cpp" language="C++" size="2758" checksum="7d6308c08631daf418f780abfad99ec58710b61b"></file>
    <file path="000/105/861/CWE563_Unused_Variable__unused_value_char_74b.cpp" language="C++" size="1530" checksum="87be1823d125ab77a3898ab011d681d461265079">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105862" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/862/CWE563_Unused_Variable__unused_value_char_81.h" language="C" size="1396" checksum="054548b1cc67395fe84b695047f48233cfb248bb"></file>
    <file path="000/105/862/CWE563_Unused_Variable__unused_value_char_81_bad.cpp" language="C++" size="952" checksum="b21b07157557dd6bb13320e412952c9fe89d180c">
      <mixed line="28" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/862/CWE563_Unused_Variable__unused_value_char_81_goodB2G.cpp" language="C++" size="916" checksum="e5409d5560f3ebd9489c2a06c7ad49a4dd76aadd"></file>
    <file path="000/105/862/CWE563_Unused_Variable__unused_value_char_81_goodG2B.cpp" language="C++" size="966" checksum="9887fde070ab82198d73c473fbea7e76594485d1"></file>
    <file path="000/105/862/CWE563_Unused_Variable__unused_value_char_81a.cpp" language="C++" size="2628" checksum="d044bb46125cbe7356f8b735b4752a9318f84066"></file>
  </testcase>
  <testcase id="105863" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/863/CWE563_Unused_Variable__unused_value_char_82.h" language="C" size="1370" checksum="fb88995c3a885bc250b6fc422ef6fb4cd7cbac36"></file>
    <file path="000/105/863/CWE563_Unused_Variable__unused_value_char_82_bad.cpp" language="C++" size="944" checksum="11ce070245bb02b6c198e16b745111028db70003">
      <mixed line="28" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/863/CWE563_Unused_Variable__unused_value_char_82_goodB2G.cpp" language="C++" size="908" checksum="acd40a4682b7d88308022a242193a361362185d8"></file>
    <file path="000/105/863/CWE563_Unused_Variable__unused_value_char_82_goodG2B.cpp" language="C++" size="958" checksum="a91108f3b9651d81a9b95b8c630d27fccf6f48b0"></file>
    <file path="000/105/863/CWE563_Unused_Variable__unused_value_char_82a.cpp" language="C++" size="2689" checksum="bc4de3d1a69638dcf4a99c8af4b74274b0b9898b"></file>
  </testcase>
  <testcase id="105864" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/864/CWE563_Unused_Variable__unused_value_char_83.h" language="C" size="1463" checksum="cc53e556a0b67873810fb6dc24d0e6c0114bf220"></file>
    <file path="000/105/864/CWE563_Unused_Variable__unused_value_char_83_bad.cpp" language="C++" size="1212" checksum="0986fbe24a57984828c08f76babf951c2263c6cc">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/864/CWE563_Unused_Variable__unused_value_char_83_goodB2G.cpp" language="C++" size="1188" checksum="a02f85b880ff87e8e66137cefeff2c20ffd245a7"></file>
    <file path="000/105/864/CWE563_Unused_Variable__unused_value_char_83_goodG2B.cpp" language="C++" size="1273" checksum="7d6512875fad63743bdb777a1efb3b10e735f064"></file>
    <file path="000/105/864/CWE563_Unused_Variable__unused_value_char_83a.cpp" language="C++" size="2135" checksum="249b3927cf1b4a2671a1848cac902415f056a072"></file>
  </testcase>
  <testcase id="105865" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/865/CWE563_Unused_Variable__unused_value_char_84.h" language="C" size="1488" checksum="33afd8ce41a89f2b1a25fc3ff92fae6e1a7fd91b"></file>
    <file path="000/105/865/CWE563_Unused_Variable__unused_value_char_84_bad.cpp" language="C++" size="1237" checksum="d4275396009cadf93f6ff5211ffd6f6e179ed584">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/865/CWE563_Unused_Variable__unused_value_char_84_goodB2G.cpp" language="C++" size="1213" checksum="9d7ee1dfa133ae192e3efa2a1a13d9acf9faf1c4"></file>
    <file path="000/105/865/CWE563_Unused_Variable__unused_value_char_84_goodG2B.cpp" language="C++" size="1298" checksum="79a39df0f636adc13eb357a45f4a862360c273c7"></file>
    <file path="000/105/865/CWE563_Unused_Variable__unused_value_char_84a.cpp" language="C++" size="2416" checksum="a236d2966f5abdeefe4653181a5609bfb64fad90"></file>
  </testcase>
  <testcase id="105866" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/866/CWE563_Unused_Variable__unused_value_int64_t_01.c" language="C" size="2400" checksum="41992365a6ae743969bccf961c3782d198f442c7">
      <mixed line="30" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105867" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/867/CWE563_Unused_Variable__unused_value_int64_t_02.c" language="C" size="3834" checksum="02a4cf9e18ac6f782c7cc6dee402693170a42bd8">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105868" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/868/CWE563_Unused_Variable__unused_value_int64_t_03.c" language="C" size="3882" checksum="a6981fd9f99a3b6a5351ba2c699ce3fc638b0b12">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105869" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/869/CWE563_Unused_Variable__unused_value_int64_t_04.c" language="C" size="4366" checksum="84767f0fd63c12afee2f36250c47748e8c3cddaa">
      <mixed line="41" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105870" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/870/CWE563_Unused_Variable__unused_value_int64_t_05.c" language="C" size="4274" checksum="d1a47fe57d93c8d1fd8b393c1a7beab0e494dbeb">
      <mixed line="41" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105871" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/871/CWE563_Unused_Variable__unused_value_int64_t_06.c" language="C" size="4332" checksum="f43d434a029d79d2de9a4ef7c2052125e4207581">
      <mixed line="40" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105872" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/872/CWE563_Unused_Variable__unused_value_int64_t_07.c" language="C" size="4249" checksum="5be3235acbbe86de9f9c287ce1288b9ed47d67f9">
      <mixed line="40" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105873" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/873/CWE563_Unused_Variable__unused_value_int64_t_08.c" language="C" size="4405" checksum="11c6dbfa450852176ad1615c914d96719a7a6710">
      <mixed line="48" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105874" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/874/CWE563_Unused_Variable__unused_value_int64_t_09.c" language="C" size="4095" checksum="2b50f9472b0fed8915394834cfd24f1215bcfd77">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105875" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/875/CWE563_Unused_Variable__unused_value_int64_t_10.c" language="C" size="3983" checksum="76a6c83be3094f9644b0894953f147d662329753">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105876" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/876/CWE563_Unused_Variable__unused_value_int64_t_11.c" language="C" size="4127" checksum="45104226a8cf702135b5b40b782378bcf5f7edaf">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105877" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/877/CWE563_Unused_Variable__unused_value_int64_t_13.c" language="C" size="4138" checksum="42fed64e8550abf75f605a9163da2a7dff148f20">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105878" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/878/CWE563_Unused_Variable__unused_value_int64_t_14.c" language="C" size="4026" checksum="a40ff9fdbb776954c2cbf0a90b9f4736864f668a">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105879" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/879/CWE563_Unused_Variable__unused_value_int64_t_15.c" language="C" size="5418" checksum="684bc852077fbad98e8bdc8d4b5a845377b83709">
      <mixed line="42" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105880" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/880/CWE563_Unused_Variable__unused_value_int64_t_16.c" language="C" size="2831" checksum="dc79f98a9fc143f3eabfc80ffa631d2ca2fab629">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105881" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/881/CWE563_Unused_Variable__unused_value_int64_t_17.c" language="C" size="2801" checksum="c40acd975b8da5373ca89317d007f79f5c23c40c">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105882" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/882/CWE563_Unused_Variable__unused_value_int64_t_18.c" language="C" size="2664" checksum="ac004d8500961c44092e18eaf79abd39c86547d0">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105883" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/883/CWE563_Unused_Variable__unused_value_int64_t_21.c" language="C" size="3922" checksum="af10d725668bf268c49bd71cc10e158a8f1fb357">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105884" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/884/CWE563_Unused_Variable__unused_value_int64_t_22a.c" language="C" size="3848" checksum="003aa1561f6d405e56fb2266fcad3026ef1c061e"></file>
    <file path="000/105/884/CWE563_Unused_Variable__unused_value_int64_t_22b.c" language="C" size="2742" checksum="671467482d77472e2da02b77cdb66d3f1d779653">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105885" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/885/CWE563_Unused_Variable__unused_value_int64_t_33.cpp" language="C++" size="2739" checksum="1fb5ded0ff40b4952d8a0982bc64e06e04932e53">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105886" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/886/CWE563_Unused_Variable__unused_value_int64_t_43.cpp" language="C++" size="2728" checksum="465d37169e86ce810fef9a91837bff8bff7912ad">
      <mixed line="38" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105887" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/887/CWE563_Unused_Variable__unused_value_int64_t_72a.cpp" language="C++" size="3065" checksum="d399999a9c81d7faa4948a11fa1f94529c114d28"></file>
    <file path="000/105/887/CWE563_Unused_Variable__unused_value_int64_t_72b.cpp" language="C++" size="1580" checksum="716da125875b1f6adefaa5b88121bc5ea605f3ff">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105888" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/888/CWE563_Unused_Variable__unused_value_int64_t_73a.cpp" language="C++" size="2847" checksum="8e20047aa0a34e7a977c4fff3c7e3b3bdf92f5a7"></file>
    <file path="000/105/888/CWE563_Unused_Variable__unused_value_int64_t_73b.cpp" language="C++" size="1568" checksum="5174a4e42ac0b0e94d49242af29975de7a335858">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105889" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/889/CWE563_Unused_Variable__unused_value_int64_t_74a.cpp" language="C++" size="2795" checksum="c91b1ea71f4b4969d5b3ff8ade5f8ca7a06f3c1f"></file>
    <file path="000/105/889/CWE563_Unused_Variable__unused_value_int64_t_74b.cpp" language="C++" size="1559" checksum="a6e3843d9d5b8cb27ecdae2d69ea0d886f19b501">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105890" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/890/CWE563_Unused_Variable__unused_value_int64_t_81.h" language="C" size="1435" checksum="19d2f7611bfdb17ec43454bdb9fe6ce9b2efee81"></file>
    <file path="000/105/890/CWE563_Unused_Variable__unused_value_int64_t_81_bad.cpp" language="C++" size="969" checksum="3cf6c7626ab9c7644cd709d5867595e08854d106">
      <mixed line="28" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/890/CWE563_Unused_Variable__unused_value_int64_t_81_goodB2G.cpp" language="C++" size="932" checksum="e05386c3191d73ad167b3c69d16933f16dd1ad03"></file>
    <file path="000/105/890/CWE563_Unused_Variable__unused_value_int64_t_81_goodG2B.cpp" language="C++" size="983" checksum="576be1921d7d3ab0cd3f4bc909b1eb67ff21ac09"></file>
    <file path="000/105/890/CWE563_Unused_Variable__unused_value_int64_t_81a.cpp" language="C++" size="2668" checksum="8aeec054d0191abfe9b59e154b3b83a931051a93"></file>
  </testcase>
  <testcase id="105891" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/891/CWE563_Unused_Variable__unused_value_int64_t_82.h" language="C" size="1409" checksum="fb889025adcc17cd5ff47431cf2fd145ad198088"></file>
    <file path="000/105/891/CWE563_Unused_Variable__unused_value_int64_t_82_bad.cpp" language="C++" size="961" checksum="0bb5e9288c8f17bc961e8af39b29c931069033b0">
      <mixed line="28" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/891/CWE563_Unused_Variable__unused_value_int64_t_82_goodB2G.cpp" language="C++" size="924" checksum="51e9e1d49fe2b77db9bf51bce4146a564e2fff2a"></file>
    <file path="000/105/891/CWE563_Unused_Variable__unused_value_int64_t_82_goodG2B.cpp" language="C++" size="975" checksum="fb10bff049330104777f3add3b160dbadef9895a"></file>
    <file path="000/105/891/CWE563_Unused_Variable__unused_value_int64_t_82a.cpp" language="C++" size="2729" checksum="ad59d2adb08f8151c49d915aeb9d2aa41d6b7f4e"></file>
  </testcase>
  <testcase id="105892" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/892/CWE563_Unused_Variable__unused_value_int64_t_83.h" language="C" size="1514" checksum="be961fed5704a7c07c46038898e86af9b5fe22a7"></file>
    <file path="000/105/892/CWE563_Unused_Variable__unused_value_int64_t_83_bad.cpp" language="C++" size="1238" checksum="ef20c34bc2ee25321ea8a35d64862ab715981ac7">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/892/CWE563_Unused_Variable__unused_value_int64_t_83_goodB2G.cpp" language="C++" size="1213" checksum="5dc16bc8f7ca04090ebe4819403dcdaaff7d63cf"></file>
    <file path="000/105/892/CWE563_Unused_Variable__unused_value_int64_t_83_goodG2B.cpp" language="C++" size="1300" checksum="0f3f3a270d74276c94925d9473fa8117f86521cc"></file>
    <file path="000/105/892/CWE563_Unused_Variable__unused_value_int64_t_83a.cpp" language="C++" size="2165" checksum="dd92efc8e0a6ce15178725b8c8263d79f41b91aa"></file>
  </testcase>
  <testcase id="105893" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/893/CWE563_Unused_Variable__unused_value_int64_t_84.h" language="C" size="1539" checksum="9cdb48d9bb84814fae4641fe5293a97c746d396a"></file>
    <file path="000/105/893/CWE563_Unused_Variable__unused_value_int64_t_84_bad.cpp" language="C++" size="1263" checksum="d1e4d519b89beef78cb97ba4fb3d4382045999a3">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/893/CWE563_Unused_Variable__unused_value_int64_t_84_goodB2G.cpp" language="C++" size="1238" checksum="4317f20073c211aa3f6e60a5d8cb13e85641b0e5"></file>
    <file path="000/105/893/CWE563_Unused_Variable__unused_value_int64_t_84_goodG2B.cpp" language="C++" size="1325" checksum="845a21a6cd106398224fe3df40df28f144381722"></file>
    <file path="000/105/893/CWE563_Unused_Variable__unused_value_int64_t_84a.cpp" language="C++" size="2455" checksum="fdbf178e2f32c299f57d23a93a2a06fefd143c0d"></file>
  </testcase>
  <testcase id="105894" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/894/CWE563_Unused_Variable__unused_value_int_01.c" language="C" size="2338" checksum="e3a520ac5e241d3b04642788632a3fe0ee787097">
      <mixed line="30" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105895" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/895/CWE563_Unused_Variable__unused_value_int_02.c" language="C" size="3743" checksum="2bbde174959f7e7fe549e1d43bf2dce549aba2d4">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105896" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/896/CWE563_Unused_Variable__unused_value_int_03.c" language="C" size="3791" checksum="4b4a49e1073b047c40f0d96aa71d44e8b40a4d0b">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105897" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/897/CWE563_Unused_Variable__unused_value_int_04.c" language="C" size="4275" checksum="bed8150449bc28e80fe6662469bb4871c5605d5f">
      <mixed line="41" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105898" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/898/CWE563_Unused_Variable__unused_value_int_05.c" language="C" size="4183" checksum="b387d3c47dca7c452508e0c44bd086123dad35e8">
      <mixed line="41" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105899" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/899/CWE563_Unused_Variable__unused_value_int_06.c" language="C" size="4241" checksum="a29f119dfd4f04da31f80a3d9d646649d419409d">
      <mixed line="40" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105900" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/900/CWE563_Unused_Variable__unused_value_int_07.c" language="C" size="4158" checksum="8ec6de819af4c2dee0a215ba5a6014edc11e01ce">
      <mixed line="40" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105901" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/901/CWE563_Unused_Variable__unused_value_int_08.c" language="C" size="4314" checksum="86e1db92f6762d79d2965e58f0fb3bf127d69ee4">
      <mixed line="48" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105902" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/902/CWE563_Unused_Variable__unused_value_int_09.c" language="C" size="4004" checksum="868b12c09b1870a3d93882fd63a75649d64d1a87">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105903" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/903/CWE563_Unused_Variable__unused_value_int_10.c" language="C" size="3892" checksum="b0461b9faecac2cc43eeb8325cee7d0f2c91abfc">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105904" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/904/CWE563_Unused_Variable__unused_value_int_11.c" language="C" size="4036" checksum="5f570dbbaf14a798aac440325c8c978babad6258">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105905" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/905/CWE563_Unused_Variable__unused_value_int_13.c" language="C" size="4047" checksum="41ce97a845fef96a6212c0aecde3a1b0d2789e71">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105906" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/906/CWE563_Unused_Variable__unused_value_int_14.c" language="C" size="3935" checksum="c24bcc237c8500a65470c1cf61fa14c3892cbe22">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105907" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/907/CWE563_Unused_Variable__unused_value_int_15.c" language="C" size="5327" checksum="fcd3379b7512960697c94f3a53b08ae0e16c2d72">
      <mixed line="42" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105908" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/908/CWE563_Unused_Variable__unused_value_int_16.c" language="C" size="2769" checksum="fa3789f64a7a9f5203158ed318a36daa4559cb83">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105909" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/909/CWE563_Unused_Variable__unused_value_int_17.c" language="C" size="2739" checksum="a0319f0634c6fbe8d54d8ae56075be3802f5cf4e">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105910" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/910/CWE563_Unused_Variable__unused_value_int_18.c" language="C" size="2602" checksum="8cc31e9d1a04987ee700a850eba09f4d6e534b46">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105911" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/911/CWE563_Unused_Variable__unused_value_int_21.c" language="C" size="3833" checksum="24c2d57aafdbc55cf08af89981efac1757e2508b">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105912" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/912/CWE563_Unused_Variable__unused_value_int_22a.c" language="C" size="3719" checksum="96ca3ffa02b7d045c975058eb900414f74d6f2bb"></file>
    <file path="000/105/912/CWE563_Unused_Variable__unused_value_int_22b.c" language="C" size="2650" checksum="3580f3017c74143914b127901445bb71ac96773c">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105913" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/913/CWE563_Unused_Variable__unused_value_int_33.cpp" language="C++" size="2661" checksum="7b8ac9842e3a9fe43fd43e5e5db94f3ce6594773">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105914" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/914/CWE563_Unused_Variable__unused_value_int_43.cpp" language="C++" size="2662" checksum="f255964a76a4cd5fc63e8bafa4dc0d0a246c2e19">
      <mixed line="38" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105915" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/915/CWE563_Unused_Variable__unused_value_int_72a.cpp" language="C++" size="3006" checksum="b8196568619de1993b7e2ea3f0481974f0330b30"></file>
    <file path="000/105/915/CWE563_Unused_Variable__unused_value_int_72b.cpp" language="C++" size="1529" checksum="1714e555fc5cf99564f3e56629eca903341fa87c">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105916" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/916/CWE563_Unused_Variable__unused_value_int_73a.cpp" language="C++" size="2788" checksum="4104bc1868596e913eb55e7ce4624567aac8c3be"></file>
    <file path="000/105/916/CWE563_Unused_Variable__unused_value_int_73b.cpp" language="C++" size="1517" checksum="6e36f8a22fbf0ea7a1a0e6d1844dbcf098ed4283">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105917" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/917/CWE563_Unused_Variable__unused_value_int_74a.cpp" language="C++" size="2736" checksum="7ea5f1aaecee2989103142bc20df54db3beaa9e9"></file>
    <file path="000/105/917/CWE563_Unused_Variable__unused_value_int_74b.cpp" language="C++" size="1508" checksum="abc825355073b700e9a0d399e6be4f415cf78c17">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105918" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/918/CWE563_Unused_Variable__unused_value_int_81.h" language="C" size="1383" checksum="b08ca3cdc0134b233461d127ccf2db3531add654"></file>
    <file path="000/105/918/CWE563_Unused_Variable__unused_value_int_81_bad.cpp" language="C++" size="942" checksum="8d19528b8ad8ff3090e63c3c671d3af093abd798">
      <mixed line="28" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/918/CWE563_Unused_Variable__unused_value_int_81_goodB2G.cpp" language="C++" size="907" checksum="914d4594a68a02e34fd58d29a332420b52412eb2"></file>
    <file path="000/105/918/CWE563_Unused_Variable__unused_value_int_81_goodG2B.cpp" language="C++" size="956" checksum="e75740c69eb55b72c7d18fa828750ea093055d74"></file>
    <file path="000/105/918/CWE563_Unused_Variable__unused_value_int_81a.cpp" language="C++" size="2605" checksum="b65aca39f3376071cbde287b92c428cb99911fd2"></file>
  </testcase>
  <testcase id="105919" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/919/CWE563_Unused_Variable__unused_value_int_82.h" language="C" size="1357" checksum="51b55beef5dea04dc5f73835584afd9692502b3f"></file>
    <file path="000/105/919/CWE563_Unused_Variable__unused_value_int_82_bad.cpp" language="C++" size="934" checksum="13b2c730c0e584f87024b999de73723bed82ee4c">
      <mixed line="28" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/919/CWE563_Unused_Variable__unused_value_int_82_goodB2G.cpp" language="C++" size="899" checksum="7c4900a7c4f0885cdc9fc35724b9f47c49845bc5"></file>
    <file path="000/105/919/CWE563_Unused_Variable__unused_value_int_82_goodG2B.cpp" language="C++" size="948" checksum="86a768fd1066817bd93c468032dcc4c9b805a414"></file>
    <file path="000/105/919/CWE563_Unused_Variable__unused_value_int_82a.cpp" language="C++" size="2666" checksum="d2e4e174cddebc08c4c57885818627bc2e9da29c"></file>
  </testcase>
  <testcase id="105920" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/920/CWE563_Unused_Variable__unused_value_int_83.h" language="C" size="1446" checksum="b4a00d26ece3be7786a26676f2773d6aa2ea56aa"></file>
    <file path="000/105/920/CWE563_Unused_Variable__unused_value_int_83_bad.cpp" language="C++" size="1197" checksum="46ce61b2f3eabe13c881e7203deeb613b9fed646">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/920/CWE563_Unused_Variable__unused_value_int_83_goodB2G.cpp" language="C++" size="1174" checksum="42485d10ffef8e5b53cb2fc5c7e3073a2c8037e1"></file>
    <file path="000/105/920/CWE563_Unused_Variable__unused_value_int_83_goodG2B.cpp" language="C++" size="1254" checksum="9d5073025b6a94885c786abbfbd4d017cc2c2791"></file>
    <file path="000/105/920/CWE563_Unused_Variable__unused_value_int_83a.cpp" language="C++" size="2125" checksum="f08313a1d1becbb2baaa70795f311a00387d0a1a"></file>
  </testcase>
  <testcase id="105921" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/921/CWE563_Unused_Variable__unused_value_int_84.h" language="C" size="1471" checksum="f7039340fc8fcc5937dcb6bccfd014ed9fba1280"></file>
    <file path="000/105/921/CWE563_Unused_Variable__unused_value_int_84_bad.cpp" language="C++" size="1222" checksum="e99365555b17aea3ff97295d7d0b0ce3506ffcb3">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/921/CWE563_Unused_Variable__unused_value_int_84_goodB2G.cpp" language="C++" size="1199" checksum="7f071c2c82ae62fd153f690f2e07e27d73744a20"></file>
    <file path="000/105/921/CWE563_Unused_Variable__unused_value_int_84_goodG2B.cpp" language="C++" size="1279" checksum="8683bd7b33ddfaf885ca542ee89b8093a4ce1c25"></file>
    <file path="000/105/921/CWE563_Unused_Variable__unused_value_int_84a.cpp" language="C++" size="2403" checksum="77cc88457924cae9b04d200fed709668619973d6"></file>
  </testcase>
  <testcase id="105922" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/922/CWE563_Unused_Variable__unused_value_long_01.c" language="C" size="2355" checksum="daf51d609c23aeb55aaee7824e823ade69bde663">
      <mixed line="30" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105923" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/923/CWE563_Unused_Variable__unused_value_long_02.c" language="C" size="3768" checksum="3317288e264c2d8fc8a408532e8d7af97f4d1f05">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105924" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/924/CWE563_Unused_Variable__unused_value_long_03.c" language="C" size="3816" checksum="6d09bd0f98b0f77279dba97698f9ed9ff76a0f93">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105925" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/925/CWE563_Unused_Variable__unused_value_long_04.c" language="C" size="4300" checksum="dbc5253a363ff2eb0c172131f133fde30175b20b">
      <mixed line="41" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105926" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/926/CWE563_Unused_Variable__unused_value_long_05.c" language="C" size="4208" checksum="11045b919566f066581c34b4a4f556eb1273ca5f">
      <mixed line="41" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105927" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/927/CWE563_Unused_Variable__unused_value_long_06.c" language="C" size="4266" checksum="ad56a804d652941c3f94bb5cb484858e53f796ec">
      <mixed line="40" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105928" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/928/CWE563_Unused_Variable__unused_value_long_07.c" language="C" size="4183" checksum="73b64511921022ab8bde0a8ad95e6e11b5f0c4ff">
      <mixed line="40" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105929" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/929/CWE563_Unused_Variable__unused_value_long_08.c" language="C" size="4339" checksum="7d6d1b823366615d15e79c0bc53f993946a931e0">
      <mixed line="48" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105930" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/930/CWE563_Unused_Variable__unused_value_long_09.c" language="C" size="4029" checksum="d4653e1632fa4af9aebe873b445d3d1bd3382990">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105931" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/931/CWE563_Unused_Variable__unused_value_long_10.c" language="C" size="3917" checksum="1307a584ac8aba731757c52c489402300f98bde4">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105932" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/932/CWE563_Unused_Variable__unused_value_long_11.c" language="C" size="4061" checksum="0ea11947baf36960e4a6854322edef94da0ea031">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105933" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/933/CWE563_Unused_Variable__unused_value_long_13.c" language="C" size="4072" checksum="e0c0f6082517600ffc8a17e5f7d374d389f0a1cf">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105934" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/934/CWE563_Unused_Variable__unused_value_long_14.c" language="C" size="3960" checksum="fc8c4dc564130c60e562a33fd365ab434249a9ba">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105935" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/935/CWE563_Unused_Variable__unused_value_long_15.c" language="C" size="5352" checksum="1656e2e4ade969bb18cfb579b3950a4f3e7f5c45">
      <mixed line="42" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105936" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/936/CWE563_Unused_Variable__unused_value_long_16.c" language="C" size="2786" checksum="8a11831faf9491919db7647adbf58fd1a3dbe000">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105937" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/937/CWE563_Unused_Variable__unused_value_long_17.c" language="C" size="2756" checksum="2e604fef42ac9eab807b942dee30e0ce4d831c1a">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105938" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/938/CWE563_Unused_Variable__unused_value_long_18.c" language="C" size="2619" checksum="386afccb1ad62f9008ba3e8bfa3f64fce27b023f">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105939" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/939/CWE563_Unused_Variable__unused_value_long_21.c" language="C" size="3857" checksum="4493aa71eea96d0b49152064cae751ee522fd56b">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105940" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/940/CWE563_Unused_Variable__unused_value_long_22a.c" language="C" size="3753" checksum="43720c636d6d5bdc2ec309a859732b2994c27794"></file>
    <file path="000/105/940/CWE563_Unused_Variable__unused_value_long_22b.c" language="C" size="2673" checksum="834aea0e6dddafea3f00b618bc61bd7859f437bc">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105941" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/941/CWE563_Unused_Variable__unused_value_long_33.cpp" language="C++" size="2682" checksum="2aa248765022c2acba0d873b208cb53009232f0b">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105942" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/942/CWE563_Unused_Variable__unused_value_long_43.cpp" language="C++" size="2680" checksum="ba43bda870a95faf2b9fc16f823f728b06f41831">
      <mixed line="38" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105943" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/943/CWE563_Unused_Variable__unused_value_long_72a.cpp" language="C++" size="3022" checksum="ba7a6f67f1f46f8bf3213a518c4b4b0fba4fbec8"></file>
    <file path="000/105/943/CWE563_Unused_Variable__unused_value_long_72b.cpp" language="C++" size="1542" checksum="a7cc2a2ba63423d82d526ac6f2948ed3e0741a2c">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105944" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/944/CWE563_Unused_Variable__unused_value_long_73a.cpp" language="C++" size="2804" checksum="07b40049baf214e54c1042616d15f9b8ba823f15"></file>
    <file path="000/105/944/CWE563_Unused_Variable__unused_value_long_73b.cpp" language="C++" size="1530" checksum="6a55bfcb0c956cfd656b7a26af0ca54bd3b7cc92">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105945" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/945/CWE563_Unused_Variable__unused_value_long_74a.cpp" language="C++" size="2752" checksum="849b8d5bb8105a246d7cc3fd7d5beb391b91ec92"></file>
    <file path="000/105/945/CWE563_Unused_Variable__unused_value_long_74b.cpp" language="C++" size="1521" checksum="11b960e88563a1bab071b608bcf370dca2d109d8">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105946" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/946/CWE563_Unused_Variable__unused_value_long_81.h" language="C" size="1396" checksum="715ccef29c1af0ecc62bcc770d740dce08a1285d"></file>
    <file path="000/105/946/CWE563_Unused_Variable__unused_value_long_81_bad.cpp" language="C++" size="949" checksum="3d69f858420ee2ea7cf5b7481112717107aac88a">
      <mixed line="28" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/946/CWE563_Unused_Variable__unused_value_long_81_goodB2G.cpp" language="C++" size="913" checksum="f85e18054bfd2d9566be4c51d22a4431338a0d75"></file>
    <file path="000/105/946/CWE563_Unused_Variable__unused_value_long_81_goodG2B.cpp" language="C++" size="963" checksum="2289ee92cdc5d90f190bda701d9912da2c7dcdf9"></file>
    <file path="000/105/946/CWE563_Unused_Variable__unused_value_long_81a.cpp" language="C++" size="2622" checksum="fdf6c18b6fe697911704e37efaa05ae2fa7c24ca"></file>
  </testcase>
  <testcase id="105947" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/947/CWE563_Unused_Variable__unused_value_long_82.h" language="C" size="1370" checksum="2d4d2dba8b73b4d06ef8ccc3ad00b00ce01ac921"></file>
    <file path="000/105/947/CWE563_Unused_Variable__unused_value_long_82_bad.cpp" language="C++" size="941" checksum="a19ff98b58c57d1cd12e11ca584118fce8b2b09d">
      <mixed line="28" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/947/CWE563_Unused_Variable__unused_value_long_82_goodB2G.cpp" language="C++" size="905" checksum="3c276fcb877fd3fa2672179a196fb8d50bfbf3ca"></file>
    <file path="000/105/947/CWE563_Unused_Variable__unused_value_long_82_goodG2B.cpp" language="C++" size="955" checksum="6ca98248b4d32fbce22d519c1383b9cc538d48e9"></file>
    <file path="000/105/947/CWE563_Unused_Variable__unused_value_long_82a.cpp" language="C++" size="2683" checksum="a0a705662ac78c17275c838ca84aef43c2731e63"></file>
  </testcase>
  <testcase id="105948" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/948/CWE563_Unused_Variable__unused_value_long_83.h" language="C" size="1463" checksum="e544fea92dc994d1f125efebb545decb293f052e"></file>
    <file path="000/105/948/CWE563_Unused_Variable__unused_value_long_83_bad.cpp" language="C++" size="1208" checksum="3f8a1ee4421c3a634b009cd71207f75e2152f70e">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/948/CWE563_Unused_Variable__unused_value_long_83_goodB2G.cpp" language="C++" size="1184" checksum="799fce267995fd021afe3a86925c6224f3908b03"></file>
    <file path="000/105/948/CWE563_Unused_Variable__unused_value_long_83_goodG2B.cpp" language="C++" size="1266" checksum="b12ed6e105cc5431b0c6b465f60c3f9801c52195"></file>
    <file path="000/105/948/CWE563_Unused_Variable__unused_value_long_83a.cpp" language="C++" size="2135" checksum="e14f94d7e8198481574b528d8959ce8d2882c681"></file>
  </testcase>
  <testcase id="105949" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/949/CWE563_Unused_Variable__unused_value_long_84.h" language="C" size="1488" checksum="a2503e42232a6ffb66aa0845753043c4340d42f1"></file>
    <file path="000/105/949/CWE563_Unused_Variable__unused_value_long_84_bad.cpp" language="C++" size="1233" checksum="4991f900261d2a4abed401a68a0b3530f86725ec">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/949/CWE563_Unused_Variable__unused_value_long_84_goodB2G.cpp" language="C++" size="1209" checksum="baab3180346003b559b15b325aefc3ff74ebd43c"></file>
    <file path="000/105/949/CWE563_Unused_Variable__unused_value_long_84_goodG2B.cpp" language="C++" size="1291" checksum="6de316c7b8f9646512d203d27d24aca29ccb7ee7"></file>
    <file path="000/105/949/CWE563_Unused_Variable__unused_value_long_84a.cpp" language="C++" size="2416" checksum="f26e74702abef746f0ec20b400e54992f3a0db9a"></file>
  </testcase>
  <testcase id="105950" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/950/CWE563_Unused_Variable__unused_value_struct_01.c" language="C" size="2542" checksum="dc5118b42d3a132471721bf10f017cfa95b7d7cd">
      <mixed line="31" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105951" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/951/CWE563_Unused_Variable__unused_value_struct_02.c" language="C" size="4097" checksum="23d54ab985bcebb12792d9299c6f92bdcff1a4a5">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105952" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/952/CWE563_Unused_Variable__unused_value_struct_03.c" language="C" size="4145" checksum="db8660730dc999b81ec182abc81922cff2362f8f">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105953" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/953/CWE563_Unused_Variable__unused_value_struct_04.c" language="C" size="4629" checksum="60edf98860576dc358bc0d5144d3a93d95ece551">
      <mixed line="42" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105954" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/954/CWE563_Unused_Variable__unused_value_struct_05.c" language="C" size="4537" checksum="f81eb59a50c076d56f9f8464265e708f76b366c1">
      <mixed line="42" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105955" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/955/CWE563_Unused_Variable__unused_value_struct_06.c" language="C" size="4595" checksum="58efbda6919b6a9260b3a25ec10a937c9a412409">
      <mixed line="41" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105956" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/956/CWE563_Unused_Variable__unused_value_struct_07.c" language="C" size="4512" checksum="860510258e90d5b17b3989efcc14448df8991c57">
      <mixed line="41" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105957" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/957/CWE563_Unused_Variable__unused_value_struct_08.c" language="C" size="4668" checksum="14b069191a25bd87b09377749251c48a84520548">
      <mixed line="49" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105958" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/958/CWE563_Unused_Variable__unused_value_struct_09.c" language="C" size="4358" checksum="3f62cbbfaaf7f887564ae2b92ff1540ff341b457">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105959" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/959/CWE563_Unused_Variable__unused_value_struct_10.c" language="C" size="4246" checksum="e1b5a356b9379d41492f2510cf9531152ab6ce6c">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105960" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/960/CWE563_Unused_Variable__unused_value_struct_11.c" language="C" size="4390" checksum="3a51d8819aa6e6c122e800afa9c1409e73e8d172">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105961" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/961/CWE563_Unused_Variable__unused_value_struct_13.c" language="C" size="4401" checksum="4a056a059d2627e7f8ffba46071a6728d691b163">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105962" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/962/CWE563_Unused_Variable__unused_value_struct_14.c" language="C" size="4289" checksum="bbeabed36756f58b2b3d41235aead275f7b03729">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105963" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/963/CWE563_Unused_Variable__unused_value_struct_15.c" language="C" size="5681" checksum="22789c81dc7b805c2849a2470c25df845b786d85">
      <mixed line="43" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105964" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/964/CWE563_Unused_Variable__unused_value_struct_16.c" language="C" size="2993" checksum="add8fbd1fbd49b72076c8232d1d34b516129c538">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105965" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/965/CWE563_Unused_Variable__unused_value_struct_17.c" language="C" size="2963" checksum="b7831c9e15b64e2ebe2cec5c1930e0698b29a188">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105966" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/966/CWE563_Unused_Variable__unused_value_struct_18.c" language="C" size="2806" checksum="90d616b81332b343e00f9a7327dc6947306efca8">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105967" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/967/CWE563_Unused_Variable__unused_value_struct_21.c" language="C" size="4128" checksum="4e5980b372a5b1110c1e629b53ab55ddabcc780e">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105968" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/968/CWE563_Unused_Variable__unused_value_struct_22a.c" language="C" size="3982" checksum="7ae9c7678323fc2a738fa3e30a4f9ab20d96d04f"></file>
    <file path="000/105/968/CWE563_Unused_Variable__unused_value_struct_22b.c" language="C" size="2809" checksum="6656893186ab59f1a760eba0f01d4fe6804d705f">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105969" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/969/CWE563_Unused_Variable__unused_value_struct_33.cpp" language="C++" size="2927" checksum="d1f5eeef1d289b8437d403081ee001d4107f304c">
      <mixed line="37" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105970" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/970/CWE563_Unused_Variable__unused_value_struct_43.cpp" language="C++" size="2890" checksum="7a6a33f93f664147e7c91626776a8e49e0b933b3">
      <mixed line="39" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105971" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/971/CWE563_Unused_Variable__unused_value_struct_72a.cpp" language="C++" size="3196" checksum="351da6b95d5ac7b3195ce2cd538813b15188255c"></file>
    <file path="000/105/971/CWE563_Unused_Variable__unused_value_struct_72b.cpp" language="C++" size="1663" checksum="179501d1797b0160e5c0e50568efdaf07cb3c376">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105972" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/972/CWE563_Unused_Variable__unused_value_struct_73a.cpp" language="C++" size="2978" checksum="75cd6c950db2ede5618e01485e74eabf607ea857"></file>
    <file path="000/105/972/CWE563_Unused_Variable__unused_value_struct_73b.cpp" language="C++" size="1651" checksum="7f76454fc9dfd3690eeb6860f1f1273e56847fd9">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105973" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/973/CWE563_Unused_Variable__unused_value_struct_74a.cpp" language="C++" size="2926" checksum="886c2a3f7a7c396fe2bc70709633dbdc03fee4b0"></file>
    <file path="000/105/973/CWE563_Unused_Variable__unused_value_struct_74b.cpp" language="C++" size="1642" checksum="5460457c6cff6fec65157b5e45dffa0168172d86">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105974" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/974/CWE563_Unused_Variable__unused_value_struct_81.h" language="C" size="1450" checksum="414765f737afca11ff7868734e574cf2d80f1c44"></file>
    <file path="000/105/974/CWE563_Unused_Variable__unused_value_struct_81_bad.cpp" language="C++" size="996" checksum="03ce608b756c5902ee798d9d7a66be640a5d59ea">
      <mixed line="28" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/974/CWE563_Unused_Variable__unused_value_struct_81_goodB2G.cpp" language="C++" size="933" checksum="0012d6831b95ec5e794d1f93868ac5d4d4757f14"></file>
    <file path="000/105/974/CWE563_Unused_Variable__unused_value_struct_81_goodG2B.cpp" language="C++" size="1010" checksum="9f39c589aa2204d23938b19a5b1036b8d002470a"></file>
    <file path="000/105/974/CWE563_Unused_Variable__unused_value_struct_81a.cpp" language="C++" size="2756" checksum="15756eee86be4b075999ce17a67b27350277da35"></file>
  </testcase>
  <testcase id="105975" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/975/CWE563_Unused_Variable__unused_value_struct_82.h" language="C" size="1424" checksum="90b2230a040704655169d0eb7d2c53794d1175e7"></file>
    <file path="000/105/975/CWE563_Unused_Variable__unused_value_struct_82_bad.cpp" language="C++" size="988" checksum="c5003cc3659277c9b731f3820274ae92cb060d31">
      <mixed line="28" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/975/CWE563_Unused_Variable__unused_value_struct_82_goodB2G.cpp" language="C++" size="925" checksum="7092bca71a838f9e60fab914b75c27fc9bd569cf"></file>
    <file path="000/105/975/CWE563_Unused_Variable__unused_value_struct_82_goodG2B.cpp" language="C++" size="1002" checksum="21418a3140f4442028bc4438d431fedca96f0d5a"></file>
    <file path="000/105/975/CWE563_Unused_Variable__unused_value_struct_82a.cpp" language="C++" size="2817" checksum="7aefe14ed566a4f5b5a254b06d2f7976b70cde7a"></file>
  </testcase>
  <testcase id="105976" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/976/CWE563_Unused_Variable__unused_value_struct_83.h" language="C" size="1539" checksum="195c5e650b2d17f948973206ceb43c646f12a6f1"></file>
    <file path="000/105/976/CWE563_Unused_Variable__unused_value_struct_83_bad.cpp" language="C++" size="1289" checksum="9e776b976c09e694c49442d31613baa6043e365d">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/976/CWE563_Unused_Variable__unused_value_struct_83_goodB2G.cpp" language="C++" size="1238" checksum="d3ad9a01059f50ff47d7a4a59b8d13f6d9018e0f"></file>
    <file path="000/105/976/CWE563_Unused_Variable__unused_value_struct_83_goodG2B.cpp" language="C++" size="1350" checksum="baae0a737557a433d958c1448d820de74ca6d480"></file>
    <file path="000/105/976/CWE563_Unused_Variable__unused_value_struct_83a.cpp" language="C++" size="2176" checksum="137053111c5e30472c43143f170ea4bc7301d9d2"></file>
  </testcase>
  <testcase id="105977" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/977/CWE563_Unused_Variable__unused_value_struct_84.h" language="C" size="1564" checksum="01bd9aae36f9a3804aa097798a89c2487d7c7cd3"></file>
    <file path="000/105/977/CWE563_Unused_Variable__unused_value_struct_84_bad.cpp" language="C++" size="1314" checksum="69e8b34791db65ee9161ac363bbe28af46bed5df">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/105/977/CWE563_Unused_Variable__unused_value_struct_84_goodB2G.cpp" language="C++" size="1263" checksum="8cf32d06ccb3ddfc0438dd4717757360bb00547c"></file>
    <file path="000/105/977/CWE563_Unused_Variable__unused_value_struct_84_goodG2B.cpp" language="C++" size="1375" checksum="c9b457ffb900a71c099c1fe7352a73a0c5ce8ea6"></file>
    <file path="000/105/977/CWE563_Unused_Variable__unused_value_struct_84a.cpp" language="C++" size="2463" checksum="3d3110691e971d910b1b17de7865c830178172a6"></file>
  </testcase>
  <testcase id="105978" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/978/CWE563_Unused_Variable__unused_value_wchar_t_01.c" language="C" size="2403" checksum="c9de5056dd69906c976f18e80c46ed044623b359">
      <mixed line="30" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105979" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/979/CWE563_Unused_Variable__unused_value_wchar_t_02.c" language="C" size="3839" checksum="1b97d614ca1eccf1a56c70c0ffc1da595c04d650">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105980" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/980/CWE563_Unused_Variable__unused_value_wchar_t_03.c" language="C" size="3887" checksum="cf428f6ed67a4503cfb1cc09a940610b9c26eff3">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105981" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/981/CWE563_Unused_Variable__unused_value_wchar_t_04.c" language="C" size="4371" checksum="458caf1d0ac73ee09579d8d10ad7d514be2ef178">
      <mixed line="41" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105982" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/982/CWE563_Unused_Variable__unused_value_wchar_t_05.c" language="C" size="4279" checksum="f1c39d87e4307b202cadfc31f4b256051a42187f">
      <mixed line="41" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105983" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/983/CWE563_Unused_Variable__unused_value_wchar_t_06.c" language="C" size="4337" checksum="446ed0601fccd77519c7ff6809344d0dbe9dcf7a">
      <mixed line="40" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105984" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/984/CWE563_Unused_Variable__unused_value_wchar_t_07.c" language="C" size="4254" checksum="f72938b513a2b84a4d80a0298880c123e4e7214c">
      <mixed line="40" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105985" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/985/CWE563_Unused_Variable__unused_value_wchar_t_08.c" language="C" size="4410" checksum="1a663d273aa5075451f8dc767087980e52e102e8">
      <mixed line="48" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105986" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/986/CWE563_Unused_Variable__unused_value_wchar_t_09.c" language="C" size="4100" checksum="2fef2601ed9e34bd7025e2fc635e2784730bd0fe">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105987" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/987/CWE563_Unused_Variable__unused_value_wchar_t_10.c" language="C" size="3988" checksum="b85b1f4f3cfc879b66ffed8ab113c8cafd7574da">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105988" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/988/CWE563_Unused_Variable__unused_value_wchar_t_11.c" language="C" size="4132" checksum="8a337e0cfdb3a2faf4471e9b7ca374adbd8120a4">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105989" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/989/CWE563_Unused_Variable__unused_value_wchar_t_13.c" language="C" size="4143" checksum="ac900b087318736b7450d49853558e2a671942f4">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105990" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/990/CWE563_Unused_Variable__unused_value_wchar_t_14.c" language="C" size="4031" checksum="80d232af50006509e258399b5875b3595ad76b32">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105991" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/991/CWE563_Unused_Variable__unused_value_wchar_t_15.c" language="C" size="5423" checksum="38349e296dbcdbb5669698f7752ae4f7125260f7">
      <mixed line="42" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105992" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/992/CWE563_Unused_Variable__unused_value_wchar_t_16.c" language="C" size="2834" checksum="b67c0267c0df841a84d411497018162a5c2664ae">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105993" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/993/CWE563_Unused_Variable__unused_value_wchar_t_17.c" language="C" size="2804" checksum="b7a120a920975c02881326d4b907aeaac9ad5193">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105994" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/994/CWE563_Unused_Variable__unused_value_wchar_t_18.c" language="C" size="2667" checksum="dfa2c241a6eaa681783fa614d012d4aecdebc85a">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105995" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/995/CWE563_Unused_Variable__unused_value_wchar_t_21.c" language="C" size="3926" checksum="cf29351d9a2f546898a0d39b6d9a800dd5f24969">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105996" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/996/CWE563_Unused_Variable__unused_value_wchar_t_22a.c" language="C" size="3852" checksum="3827e075fec84eeeb5e6267036b308d510bc3553"></file>
    <file path="000/105/996/CWE563_Unused_Variable__unused_value_wchar_t_22b.c" language="C" size="2742" checksum="70bf58fb80a2c6cfe96fd99777a4a7db0be2d191">
      <mixed line="32" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105997" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/997/CWE563_Unused_Variable__unused_value_wchar_t_33.cpp" language="C++" size="2742" checksum="24bc8f7b5b223c0ca628539f10bcde967e7ecd3c">
      <mixed line="36" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105998" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/998/CWE563_Unused_Variable__unused_value_wchar_t_43.cpp" language="C++" size="2731" checksum="aff4bb2943c0ff39e549085dbaa710a837e40e10">
      <mixed line="38" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="105999" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/105/999/CWE563_Unused_Variable__unused_value_wchar_t_72a.cpp" language="C++" size="3068" checksum="c1fc4aaea049bfe741ba8235c43191380139d185"></file>
    <file path="000/105/999/CWE563_Unused_Variable__unused_value_wchar_t_72b.cpp" language="C++" size="1580" checksum="74ca8233346dd95d6a186be57b913b1cfa927c95">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="106000" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/000/CWE563_Unused_Variable__unused_value_wchar_t_73a.cpp" language="C++" size="2850" checksum="24248bd4d0d5f93267551a591adb8d172d3b9016"></file>
    <file path="000/106/000/CWE563_Unused_Variable__unused_value_wchar_t_73b.cpp" language="C++" size="1568" checksum="05500fa2bcc98fc7493f4ac918a458ae4bb88f5e">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="106001" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/001/CWE563_Unused_Variable__unused_value_wchar_t_74a.cpp" language="C++" size="2798" checksum="ee9eace40b6a8d8a4349b3abc808100a9c2fdbd7"></file>
    <file path="000/106/001/CWE563_Unused_Variable__unused_value_wchar_t_74b.cpp" language="C++" size="1559" checksum="84e905375c0311690922eb89eb7fb3a9fd4c3ef4">
      <mixed line="35" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
  </testcase>
  <testcase id="106002" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/002/CWE563_Unused_Variable__unused_value_wchar_t_81.h" language="C" size="1435" checksum="270e4d3298da66715ee413d93b7b9a7cf444035a"></file>
    <file path="000/106/002/CWE563_Unused_Variable__unused_value_wchar_t_81_bad.cpp" language="C++" size="969" checksum="49b0251d29f7b522112b7204b08f0cab4d1a4d7f">
      <mixed line="28" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/106/002/CWE563_Unused_Variable__unused_value_wchar_t_81_goodB2G.cpp" language="C++" size="932" checksum="a68ccd4e97588808036353f0874ac15abe885c0a"></file>
    <file path="000/106/002/CWE563_Unused_Variable__unused_value_wchar_t_81_goodG2B.cpp" language="C++" size="983" checksum="1f1de9984a03c48aa5fcc48202ffe06af774e737"></file>
    <file path="000/106/002/CWE563_Unused_Variable__unused_value_wchar_t_81a.cpp" language="C++" size="2671" checksum="2331d37db8ed4e0ee2eff19cc79131ead787c2c3"></file>
  </testcase>
  <testcase id="106003" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/003/CWE563_Unused_Variable__unused_value_wchar_t_82.h" language="C" size="1409" checksum="789604cb62b4dc95e38aac4c5776a8817d4a4bd9"></file>
    <file path="000/106/003/CWE563_Unused_Variable__unused_value_wchar_t_82_bad.cpp" language="C++" size="961" checksum="c4100b56b7c64219f544256d208457a7cef8d550">
      <mixed line="28" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/106/003/CWE563_Unused_Variable__unused_value_wchar_t_82_goodB2G.cpp" language="C++" size="924" checksum="1beea0697f98f0e7e983378e28a96476c680366e"></file>
    <file path="000/106/003/CWE563_Unused_Variable__unused_value_wchar_t_82_goodG2B.cpp" language="C++" size="975" checksum="6c9b58147f76341fbb18a349afa06e5474b538cb"></file>
    <file path="000/106/003/CWE563_Unused_Variable__unused_value_wchar_t_82a.cpp" language="C++" size="2732" checksum="eb0aa82ddc904d05fefbdebe9132b3fa3444a9bf"></file>
  </testcase>
  <testcase id="106004" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/004/CWE563_Unused_Variable__unused_value_wchar_t_83.h" language="C" size="1514" checksum="c3ac9595334b57d85341901ae71bd843d8c77304"></file>
    <file path="000/106/004/CWE563_Unused_Variable__unused_value_wchar_t_83_bad.cpp" language="C++" size="1239" checksum="8525914388677b36cc772e3c6cc63e3b6d506f72">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/106/004/CWE563_Unused_Variable__unused_value_wchar_t_83_goodB2G.cpp" language="C++" size="1214" checksum="466d0f64c7385e647cc48ba8dcc8ae49bd258d33"></file>
    <file path="000/106/004/CWE563_Unused_Variable__unused_value_wchar_t_83_goodG2B.cpp" language="C++" size="1301" checksum="2658ecb1e237ae03a2c42afe5ddce7e7bed9f325"></file>
    <file path="000/106/004/CWE563_Unused_Variable__unused_value_wchar_t_83a.cpp" language="C++" size="2165" checksum="e5db99a23e22455274da897f674c46c5e2b8deb0"></file>
  </testcase>
  <testcase id="106005" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 563 Unused Variable<br/> BadSource:  Initialize data<br/> GoodSource: Initialize and use data<br/> Sinks:<br/> GoodSink: Use data<br/> BadSink : Initialize and use data<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/005/CWE563_Unused_Variable__unused_value_wchar_t_84.h" language="C" size="1539" checksum="90e13bf7390e47c78faa13799e605d31ab184942"></file>
    <file path="000/106/005/CWE563_Unused_Variable__unused_value_wchar_t_84_bad.cpp" language="C++" size="1264" checksum="d344aeefe353644d65fcdb391fda96605eb48bec">
      <mixed line="34" name="CWE-563: Assignment to Variable without Use ('Unused Variable')"></mixed>
    </file>
    <file path="000/106/005/CWE563_Unused_Variable__unused_value_wchar_t_84_goodB2G.cpp" language="C++" size="1239" checksum="fe3c4398d72daad395264315c3b825a438d09ec2"></file>
    <file path="000/106/005/CWE563_Unused_Variable__unused_value_wchar_t_84_goodG2B.cpp" language="C++" size="1326" checksum="29816822b3859610b4168662c4590cb8cea399d4"></file>
    <file path="000/106/005/CWE563_Unused_Variable__unused_value_wchar_t_84a.cpp" language="C++" size="2455" checksum="ba7844ca27905440fc2ff1df1c2141bec29364c5"></file>
  </testcase>
  <testcase id="106006" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/006/CWE570_Expression_Always_False__global_01.c" language="C" size="1440" checksum="296a44a2748ef2c0d1c37a0aaddee941a36afbf3">
      <mixed line="13" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106007" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/007/CWE570_Expression_Always_False__global_const_01.c" language="C" size="1478" checksum="9e409eb6c764cc8468ee256f1dacc4d45ba7f5be">
      <mixed line="13" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106008" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/008/CWE570_Expression_Always_False__global_const_five_01.c" language="C" size="1538" checksum="ac2e778cbe024154bb727a100e27e6ce09d459ad">
      <mixed line="13" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106009" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/009/CWE570_Expression_Always_False__global_five_01.c" language="C" size="1500" checksum="8b6058351122069504dde1fc839ae576d3c8498c">
      <mixed line="13" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106010" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/010/CWE570_Expression_Always_False__global_return_01.c" language="C" size="1486" checksum="11e5a9b3f2014d25b643bb9410453c94eb5485d5">
      <mixed line="13" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106011" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/011/CWE570_Expression_Always_False__n_equal_n_minus_one_01.c" language="C" size="1638" checksum="7026e72764f1fbc2d0c2f4e5d40ae41c2b49579c">
      <mixed line="15" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106012" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/012/CWE570_Expression_Always_False__n_less_int_min_01.c" language="C" size="1644" checksum="90c487384c3be3d51e4b8a286244c969324b7788">
      <mixed line="16" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106013" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/013/CWE570_Expression_Always_False__static_01.c" language="C" size="1483" checksum="45513b2c775555626e3821200d73f93220d15f22">
      <mixed line="15" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106014" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/014/CWE570_Expression_Always_False__static_const_01.c" language="C" size="1534" checksum="7e2ae4b7c34fa82774ffd5f310bf2a6150b6da92">
      <mixed line="15" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106015" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/015/CWE570_Expression_Always_False__static_const_five_01.c" language="C" size="1565" checksum="35c8c10baf6fc00cde60a60993944c3af3055870">
      <mixed line="15" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106016" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/016/CWE570_Expression_Always_False__static_five_01.c" language="C" size="1521" checksum="bacb84f766be0e0b34274774213a12c5e4800e27">
      <mixed line="15" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106017" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/017/CWE570_Expression_Always_False__static_return_01.c" language="C" size="1543" checksum="7a9e0ee852f3a2752885381f0ade3c2a6017b970">
      <mixed line="18" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106018" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/018/CWE570_Expression_Always_False__string_equals_01.c" language="C" size="1929" checksum="aaeb8b607e93b50935bc7557616bb0061d59534c">
      <mixed line="15" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106019" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/019/CWE570_Expression_Always_False__two_equals_three_01.c" language="C" size="1464" checksum="532429433d211e4160bdfb3d1dd166a34ae04207">
      <mixed line="13" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106020" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (unsigned int < 0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/020/CWE570_Expression_Always_False__unsigned_int_01.c" language="C" size="1613" checksum="f17cc1934a066395f51d3d2b1ca948d51e175577">
      <mixed line="16" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106021" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/021/CWE570_Expression_Always_False__zero_01.c" language="C" size="1391" checksum="c980cf43a1412f47a9ec1e1d977eee64c43cc41d">
      <mixed line="13" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase id="106022" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/022/CWE571_Expression_Always_True__global_01.c" language="C" size="1436" checksum="400b2cca55f3dcc365f503056131608088df493e">
      <mixed line="13" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106023" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/023/CWE571_Expression_Always_True__global_const_01.c" language="C" size="1474" checksum="b23960b52981800fd2d1b79a0124a482e14f6440">
      <mixed line="13" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106024" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/024/CWE571_Expression_Always_True__global_const_five_01.c" language="C" size="1536" checksum="18391193a7ff793f366e301b21bb6918d6153de3">
      <mixed line="13" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106025" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/025/CWE571_Expression_Always_True__global_five_01.c" language="C" size="1498" checksum="fcae69db989d94bad567840d1b15d7ff76cad632">
      <mixed line="13" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106026" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/026/CWE571_Expression_Always_True__global_return_01.c" language="C" size="1482" checksum="fb52ba1efea99e7aab462c7701479933556ad545">
      <mixed line="13" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106027" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/027/CWE571_Expression_Always_True__n_equals_m_minus_one_01.c" language="C" size="1657" checksum="20e296627c9a4e1912433038b6de65941b857cd1">
      <mixed line="16" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106028" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/028/CWE571_Expression_Always_True__n_less_int_max_01.c" language="C" size="1640" checksum="0ad32c72d3335e738c5ecb5e858f7f71200377fb">
      <mixed line="16" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106029" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/029/CWE571_Expression_Always_True__one_01.c" language="C" size="1385" checksum="82d5955e0599f62b878f742b447a8b445336b1d9">
      <mixed line="13" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106030" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/030/CWE571_Expression_Always_True__static_01.c" language="C" size="1477" checksum="eeb9e7efd7fa4acc3ff23599aaf3e59107ff4fd6">
      <mixed line="15" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106031" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/031/CWE571_Expression_Always_True__static_const_01.c" language="C" size="1528" checksum="5c0ec4a0a66327d8e21ae9ccaec4b6f0ff847454">
      <mixed line="15" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106032" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/032/CWE571_Expression_Always_True__static_const_five_01.c" language="C" size="1563" checksum="b762a12e3202ea7d5876c278ad8004aa9f52a780">
      <mixed line="15" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106033" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/033/CWE571_Expression_Always_True__static_five_01.c" language="C" size="1519" checksum="27ecc09aacffa49f4c75eb749a1815a5ea6a60ce">
      <mixed line="15" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106034" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/034/CWE571_Expression_Always_True__static_return_01.c" language="C" size="1538" checksum="67fe13e90904248935b8f849b97bf942cf97d49a">
      <mixed line="18" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106035" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/035/CWE571_Expression_Always_True__string_equals_01.c" language="C" size="1923" checksum="76bc165c0612d54fc69315547741444454fbb1fe">
      <mixed line="15" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106036" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/036/CWE571_Expression_Always_True__two_equals_two_01.c" language="C" size="1454" checksum="88aa28a65c4009d1e2cc0c3eea2bd7d49dd8b494">
      <mixed line="13" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106037" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (unsigned int >= 0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/037/CWE571_Expression_Always_True__unsigned_int_01.c" language="C" size="1609" checksum="7e40f674018889a88c2ee1a7323367c7c5dd44e8">
      <mixed line="16" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase id="106038" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/038/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_01.c" language="C" size="1927" checksum="70f648af139df3522b93c73e81e3dbce39c3628a">
      <mixed line="24" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106039" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/039/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_02.c" language="C" size="2562" checksum="bc7bbc1e47d9aae17dd1bb86dad7d370e923ff88">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106040" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/040/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_03.c" language="C" size="2583" checksum="b325a6139bfeb36357695dd19d70bbbb642b1aee">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106041" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/041/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_04.c" language="C" size="2948" checksum="032bacffae275455ff4d91b97f3ee7c9f808fcba">
      <mixed line="32" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106042" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/042/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_05.c" language="C" size="2919" checksum="94b6f302062a3aacbe001af914ea24d7ecc47362">
      <mixed line="32" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106043" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/043/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_06.c" language="C" size="2889" checksum="912e0528d337b3a3fcda4a09d750e7cf4eb044ba">
      <mixed line="31" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106044" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/044/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_07.c" language="C" size="2869" checksum="2b6f734ed7c86800b8f22074189711884c7ff048">
      <mixed line="31" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106045" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/045/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c" language="C" size="2969" checksum="6aad2394336b792079767d5f1cc5cfb7f7b0122f">
      <mixed line="39" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106046" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/046/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_09.c" language="C" size="2677" checksum="02f4957c91c350f360b2c3f2990fb0617d137ba0">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106047" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/047/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_10.c" language="C" size="2628" checksum="47682d11af28f9b6a886dbecec917924b1fb04d8">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106048" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/048/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_11.c" language="C" size="2691" checksum="c914d75b4d8d080d464824c31c0c5d2e4992c7bc">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106049" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/049/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c" language="C" size="2644" checksum="c79043f750840cf104498921f09a2b1f5fb4e385">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106050" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/050/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_13.c" language="C" size="2695" checksum="bb2d9ad88e3a79f67caf6c2f0bfa438263b106c2">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106051" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/051/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_14.c" language="C" size="2646" checksum="bc6a6e975f7df094873371d5c388da67c1e53da5">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106052" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/052/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c" language="C" size="2879" checksum="32db0cfd8b25a189444eba01055c0ee1d0d886ee">
      <mixed line="27" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106053" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/053/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_16.c" language="C" size="2128" checksum="c29cc53748fc5e56f1f1eef1f7537408d66e4570">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106054" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/054/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_17.c" language="C" size="2153" checksum="d5e771e12655ed29cdde31039437a05dfec2e707">
      <mixed line="27" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="106055" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/106/055/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_18.c" language="C" size="2051" checksum="fe5bb56fba7bd66f84b8ff7687de0f981c7ea7c4">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase id="109752" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/752/CWE665_Improper_Initialization__char_cat_01.c" language="C" size="2541" checksum="ebb410210deb01a9fb812994bcff53c9a1c559f0">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109753" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/753/CWE665_Improper_Initialization__char_cat_02.c" language="C" size="3429" checksum="65f854bcf4e329de892aff7962676154ec556f22">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109754" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/754/CWE665_Improper_Initialization__char_cat_03.c" language="C" size="3450" checksum="8185a9ed1b7a255f613acc1c0c2639918e0532bd">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109755" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/755/CWE665_Improper_Initialization__char_cat_04.c" language="C" size="3817" checksum="805016acc5a8ef31b088cb0bd10ab02eeb1091d2">
      <mixed line="37" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109756" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/756/CWE665_Improper_Initialization__char_cat_05.c" language="C" size="3788" checksum="c11b339219d4cc45017174308513d8e4f927a871">
      <mixed line="37" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109757" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/757/CWE665_Improper_Initialization__char_cat_06.c" language="C" size="3752" checksum="c8a92f03e5bd8140ae32a96f8dda7e2107ee91fd">
      <mixed line="34" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109758" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/758/CWE665_Improper_Initialization__char_cat_07.c" language="C" size="3738" checksum="3dff42e85e1411367653ec1fbf1990c5eb204ebe">
      <mixed line="36" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109759" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/759/CWE665_Improper_Initialization__char_cat_08.c" language="C" size="3838" checksum="363246fe6eb949ea7999f9059a88df00504f1c6b">
      <mixed line="44" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109760" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/760/CWE665_Improper_Initialization__char_cat_09.c" language="C" size="3544" checksum="ca5e512a1023b179561b7c603bccf7ecdc181f4e">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109761" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/761/CWE665_Improper_Initialization__char_cat_10.c" language="C" size="3495" checksum="069aa1d61361a83c5c7ebc05b6e15e171def4f95">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109762" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/762/CWE665_Improper_Initialization__char_cat_11.c" language="C" size="3558" checksum="bb135017240f7de96f4b8e8d7556239c82833cd6">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109763" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/763/CWE665_Improper_Initialization__char_cat_12.c" language="C" size="2983" checksum="e6fa40fb0857626ce74262e3634753ef88818714">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109764" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/764/CWE665_Improper_Initialization__char_cat_13.c" language="C" size="3562" checksum="e29e349458e7785beb9d71d0b5210b93184bdda4">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109765" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/765/CWE665_Improper_Initialization__char_cat_14.c" language="C" size="3513" checksum="2a236f5832f857617d4ef8084ac616ef3a8279de">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109766" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/766/CWE665_Improper_Initialization__char_cat_15.c" language="C" size="3835" checksum="287f809217fc682396e523a3eb65aca0336741bb">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109767" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/767/CWE665_Improper_Initialization__char_cat_16.c" language="C" size="2704" checksum="38a069a3fea52efa334358f2af2bb2d8dac2cad8">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109768" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/768/CWE665_Improper_Initialization__char_cat_17.c" language="C" size="2723" checksum="c744a97f813347fa1ff909e4cca4f0d6fc4f29b6">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109769" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/769/CWE665_Improper_Initialization__char_cat_18.c" language="C" size="2656" checksum="7e4840e31367030b10342abe871fdd9ea5b0f2f9">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109770" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/770/CWE665_Improper_Initialization__char_cat_21.c" language="C" size="4258" checksum="54f01b1dc5e1c4e57cf31c86113a9d6a62e1cbee">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109771" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/771/CWE665_Improper_Initialization__char_cat_22a.c" language="C" size="4143" checksum="dbf15b27cf4fbc4f276f9aba8caa58381b066512"></file>
    <file path="000/109/771/CWE665_Improper_Initialization__char_cat_22b.c" language="C" size="2275" checksum="6175b7d96966e13e3adf8ee7069c0048542e216d">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109772" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/772/CWE665_Improper_Initialization__char_cat_31.c" language="C" size="2813" checksum="315cdd58747020dba5d969e5ca7fc72f5a8d597c">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109773" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 32 Data flow using two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/773/CWE665_Improper_Initialization__char_cat_32.c" language="C" size="3054" checksum="5a1638f57cc10c6b406a69ed34ab754f0f1f4222">
      <mixed line="32" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109774" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/774/CWE665_Improper_Initialization__char_cat_33.cpp" language="C++" size="2838" checksum="12e3e91a03575bf4fc455498f82b50ede64979f4">
      <mixed line="32" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109775" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/775/CWE665_Improper_Initialization__char_cat_34.c" language="C" size="3143" checksum="2f32f44fc5767ba7824dc71cdc5e13394e4a26a0">
      <mixed line="35" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109776" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/776/CWE665_Improper_Initialization__char_cat_41.c" language="C" size="2917" checksum="3e58e2541be0e03eba53cdef09d874a228da2a84">
      <mixed line="40" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109777" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/777/CWE665_Improper_Initialization__char_cat_42.c" language="C" size="2804" checksum="47aceff2c5b854d77fa19e7a3eed71438691d6f3">
      <mixed line="25" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109778" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/778/CWE665_Improper_Initialization__char_cat_43.cpp" language="C++" size="2798" checksum="306910e03a68ec1e6998519829fd130bda94db69">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109779" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/779/CWE665_Improper_Initialization__char_cat_44.c" language="C" size="2952" checksum="e870b6a746215bda8c6908c0679ee9f5ae2dcf04">
      <mixed line="42" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109780" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/780/CWE665_Improper_Initialization__char_cat_45.c" language="C" size="3163" checksum="69b13f34475d716b541c125d7ead42b1e0b65651">
      <mixed line="44" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109781" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/781/CWE665_Improper_Initialization__char_cat_51a.c" language="C" size="2357" checksum="f49264ed11434024c437c42e7cd2fee4653ac7e4">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/781/CWE665_Improper_Initialization__char_cat_51b.c" language="C" size="1613" checksum="2985dec82eae6cfe3d83139a286bfaa4f4f85da9"></file>
  </testcase>
  <testcase id="109782" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/782/CWE665_Improper_Initialization__char_cat_52a.c" language="C" size="2373" checksum="1503e45238d77cbb6fa81cfeb1b9db82a41a33e6">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/782/CWE665_Improper_Initialization__char_cat_52b.c" language="C" size="1359" checksum="5aafe8d33f1af8ccdf84f2c08ba7410671aa908e"></file>
    <file path="000/109/782/CWE665_Improper_Initialization__char_cat_52c.c" language="C" size="1630" checksum="d63ecf0a1c66f1aa02e0329b56b2c7b9db41eeb0"></file>
  </testcase>
  <testcase id="109783" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/783/CWE665_Improper_Initialization__char_cat_53a.c" language="C" size="2400" checksum="a76c6615c406c513a3d89dc0b3ba6aaa02bde8b7">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/783/CWE665_Improper_Initialization__char_cat_53b.c" language="C" size="1386" checksum="202e0094913cfab27b1a791596e0e39b78207dba"></file>
    <file path="000/109/783/CWE665_Improper_Initialization__char_cat_53c.c" language="C" size="1386" checksum="d37389426b614e9a4d8613431dff3eeef65846c6"></file>
    <file path="000/109/783/CWE665_Improper_Initialization__char_cat_53d.c" language="C" size="1657" checksum="9729a272a2a1c57cb6b0b2f5e740cec73c0c795c"></file>
  </testcase>
  <testcase id="109784" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/784/CWE665_Improper_Initialization__char_cat_54a.c" language="C" size="2401" checksum="7f9acc860ee712f64808a7f16a79bc0aa50aff41">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/784/CWE665_Improper_Initialization__char_cat_54b.c" language="C" size="1387" checksum="f002a31105eb083d82ea295d53bfa3699f67c6d8"></file>
    <file path="000/109/784/CWE665_Improper_Initialization__char_cat_54c.c" language="C" size="1387" checksum="81699b492728701b9359fe07da48fd340e9dd7ca"></file>
    <file path="000/109/784/CWE665_Improper_Initialization__char_cat_54d.c" language="C" size="1387" checksum="c306ea59b18a9b522e005b7f1882b42ea312261f"></file>
    <file path="000/109/784/CWE665_Improper_Initialization__char_cat_54e.c" language="C" size="1658" checksum="b380301ba4a13bdaf835371736c6019abc57db5e"></file>
  </testcase>
  <testcase id="109785" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/785/CWE665_Improper_Initialization__char_cat_61a.c" language="C" size="2779" checksum="074ac76250021cc267c2964fbb8426994f95aeee"></file>
    <file path="000/109/785/CWE665_Improper_Initialization__char_cat_61b.c" language="C" size="1102" checksum="8a9883ee8a439c5ceeecce2ed58f542656b13065">
      <mixed line="25" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109786" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/786/CWE665_Improper_Initialization__char_cat_62a.cpp" language="C++" size="2626" checksum="cc44d8b315f1ecd272f4ec1bd47674e3cfece345"></file>
    <file path="000/109/786/CWE665_Improper_Initialization__char_cat_62b.cpp" language="C++" size="1084" checksum="6e74420fa4b85ed86eda18f966d732381fcb9ee7">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109787" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/787/CWE665_Improper_Initialization__char_cat_63a.c" language="C" size="2329" checksum="5223d38661ba4d0a7d70cbb5b7bead2f2509018f">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/787/CWE665_Improper_Initialization__char_cat_63b.c" language="C" size="1575" checksum="1f36283106b5ce9cf23a2d44ea0860c82b21de97"></file>
  </testcase>
  <testcase id="109788" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/788/CWE665_Improper_Initialization__char_cat_64a.c" language="C" size="2341" checksum="0d5b71decdfc2f1267d9391e227d7daec349cb0a">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/788/CWE665_Improper_Initialization__char_cat_64b.c" language="C" size="1896" checksum="d3364023dc51b613f1051457822aa70526a3ecc6"></file>
  </testcase>
  <testcase id="109789" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/789/CWE665_Improper_Initialization__char_cat_65a.c" language="C" size="2521" checksum="e95d7835712a4ed76ab44f173cba7aa2a9a08e85">
      <mixed line="33" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/789/CWE665_Improper_Initialization__char_cat_65b.c" language="C" size="1553" checksum="5ef870f773e303654dd8483d2c151e48fe75e156"></file>
  </testcase>
  <testcase id="109790" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/790/CWE665_Improper_Initialization__char_cat_66a.c" language="C" size="2478" checksum="da29b1f7495564a331d5cfd3fd79e1f3057e4f6c">
      <mixed line="32" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/790/CWE665_Improper_Initialization__char_cat_66b.c" language="C" size="1626" checksum="a2640a104435594fea28ac0dba5eb2c5312dd47d"></file>
  </testcase>
  <testcase id="109791" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/791/CWE665_Improper_Initialization__char_cat_67a.c" language="C" size="2802" checksum="a1d105d60028f7e28b583dc40818d7d4863594b8">
      <mixed line="37" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/791/CWE665_Improper_Initialization__char_cat_67b.c" language="C" size="1855" checksum="c9749bfe713f7deb86a6c44a5f2616a902624c66"></file>
  </testcase>
  <testcase id="109792" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/792/CWE665_Improper_Initialization__char_cat_68a.c" language="C" size="2595" checksum="863bb5befcbca98d7eea1f4f9d3fdee0d7e66fef">
      <mixed line="34" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/792/CWE665_Improper_Initialization__char_cat_68b.c" language="C" size="1887" checksum="a2f75559f7923fbef4ea9f31355e3019f2cf0631"></file>
  </testcase>
  <testcase id="109793" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/793/CWE665_Improper_Initialization__char_cat_72a.cpp" language="C++" size="2718" checksum="1bf0ac8e30e8e50ac0213f5d6b067838182adb5b">
      <mixed line="38" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/793/CWE665_Improper_Initialization__char_cat_72b.cpp" language="C++" size="1687" checksum="38992bf974e92fef26bae6a870e01e217c07df10"></file>
  </testcase>
  <testcase id="109794" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/794/CWE665_Improper_Initialization__char_cat_73a.cpp" language="C++" size="2570" checksum="6b1ca24d6cccd224c744b116a608c33c2f97860a">
      <mixed line="38" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/794/CWE665_Improper_Initialization__char_cat_73b.cpp" language="C++" size="1677" checksum="021c098b815ff30a3290d85232b3b0ebc3a497d1"></file>
  </testcase>
  <testcase id="109795" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/795/CWE665_Improper_Initialization__char_cat_74a.cpp" language="C++" size="2534" checksum="b5d87bea9b08eed82c79de566a6428a8e2d5eba1">
      <mixed line="38" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/795/CWE665_Improper_Initialization__char_cat_74b.cpp" language="C++" size="1670" checksum="46272f408faaf05e9301cbe3f7af4ede8d77676c"></file>
  </testcase>
  <testcase id="109796" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/796/CWE665_Improper_Initialization__char_cat_81.h" language="C" size="1219" checksum="cfc2b17b90a2a8c08257d60b6eec8e4b0504167f"></file>
    <file path="000/109/796/CWE665_Improper_Initialization__char_cat_81_bad.cpp" language="C++" size="1123" checksum="3e790c8dc240ba77bf50b75645bbffd7ffc53460"></file>
    <file path="000/109/796/CWE665_Improper_Initialization__char_cat_81_goodG2B.cpp" language="C++" size="1137" checksum="480821cf42fa9cb555c48feffdc05f35300d8946"></file>
    <file path="000/109/796/CWE665_Improper_Initialization__char_cat_81a.cpp" language="C++" size="2367" checksum="7a36c6801ea7ef662eb09655d124dfd4baa85877">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109797" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/797/CWE665_Improper_Initialization__char_cat_82.h" language="C" size="1184" checksum="b9c42fcdb1e4d7f9d48135ed260ae454faf9492f"></file>
    <file path="000/109/797/CWE665_Improper_Initialization__char_cat_82_bad.cpp" language="C++" size="1115" checksum="bc7ea6a3aefc79688d89991c74927c6bb31ae42e"></file>
    <file path="000/109/797/CWE665_Improper_Initialization__char_cat_82_goodG2B.cpp" language="C++" size="1129" checksum="b9f3f0ed401a45b1047e2e4a886f505ffcfd3acf"></file>
    <file path="000/109/797/CWE665_Improper_Initialization__char_cat_82a.cpp" language="C++" size="2407" checksum="ec8d0807c47ed5ea862c5dfb2d9125c2be2d80d7">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109798" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/798/CWE665_Improper_Initialization__char_cat_83.h" language="C" size="1217" checksum="e9ec5774b7c105f508e1e54b5579718965cfb806"></file>
    <file path="000/109/798/CWE665_Improper_Initialization__char_cat_83_bad.cpp" language="C++" size="1403" checksum="06642cac66753ceeddaefa2992acb8b85313e35a">
      <mixed line="26" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/798/CWE665_Improper_Initialization__char_cat_83_goodG2B.cpp" language="C++" size="1413" checksum="8f6ebe803949c4abb01bc678949acaf79457aeee"></file>
    <file path="000/109/798/CWE665_Improper_Initialization__char_cat_83a.cpp" language="C++" size="2037" checksum="a3a4c55ecb97fd88c900b4a2fc5a96381fac1cb4"></file>
  </testcase>
  <testcase id="109799" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using strcat<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/799/CWE665_Improper_Initialization__char_cat_84.h" language="C" size="1242" checksum="24355ed10597a8f256dca9d10277a088f34a4043"></file>
    <file path="000/109/799/CWE665_Improper_Initialization__char_cat_84_bad.cpp" language="C++" size="1428" checksum="7b193ecc7e7bb359187e7f130edebb9bdeb50f56">
      <mixed line="26" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/799/CWE665_Improper_Initialization__char_cat_84_goodG2B.cpp" language="C++" size="1438" checksum="b2802ae462d7fef1f892398484f425bc3f763629"></file>
    <file path="000/109/799/CWE665_Improper_Initialization__char_cat_84a.cpp" language="C++" size="2229" checksum="c426a66585d0cefecf4ed4e6ca537f08c79a7f50"></file>
  </testcase>
  <testcase id="109800" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/800/CWE665_Improper_Initialization__char_ncat_01.c" language="C" size="2702" checksum="e594fd44344d207467ac88cc03a847b93f7231da">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109801" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/801/CWE665_Improper_Initialization__char_ncat_02.c" language="C" size="3667" checksum="1d509b586c59afbe342d23ae819e92a6cdff9dc7">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109802" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/802/CWE665_Improper_Initialization__char_ncat_03.c" language="C" size="3688" checksum="8419f2b9ad648d3509630ebc26ce06cf1ba0eb3b">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109803" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/803/CWE665_Improper_Initialization__char_ncat_04.c" language="C" size="4055" checksum="ed6b6e2b3bbf3233599320d2c2e2898819a00223">
      <mixed line="37" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109804" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/804/CWE665_Improper_Initialization__char_ncat_05.c" language="C" size="4026" checksum="eaf1cb0fe6980efe6f5696f47dfa7da12e5a20b6">
      <mixed line="37" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109805" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/805/CWE665_Improper_Initialization__char_ncat_06.c" language="C" size="3990" checksum="6e5171bc7e916c36050b6d040e261e89835f1f28">
      <mixed line="34" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109806" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/806/CWE665_Improper_Initialization__char_ncat_07.c" language="C" size="3976" checksum="a10c196ae5d9b290bb5bcb057733dd2d71dad07b">
      <mixed line="36" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109807" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/807/CWE665_Improper_Initialization__char_ncat_08.c" language="C" size="4076" checksum="ae9deba0c3698ea70ae95e1abcaab5e6fd660a4c">
      <mixed line="44" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109808" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/808/CWE665_Improper_Initialization__char_ncat_09.c" language="C" size="3782" checksum="e524cccb277c3a54c6b5b8580c2ca62b12049b8f">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109809" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/809/CWE665_Improper_Initialization__char_ncat_10.c" language="C" size="3733" checksum="37a6f60c216d90cb1e8ebf55190e6d98ffdebbcc">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109810" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/810/CWE665_Improper_Initialization__char_ncat_11.c" language="C" size="3796" checksum="f6cb013c7d9cf2990489200dc8b9b699cd010cc2">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109811" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/811/CWE665_Improper_Initialization__char_ncat_12.c" language="C" size="3144" checksum="457001a9ba020ec98eb6f0a71ebc60045032034d">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109812" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/812/CWE665_Improper_Initialization__char_ncat_13.c" language="C" size="3800" checksum="07ca04c5cc421df258c5cefc6e063e5f3f282cc4">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109813" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/813/CWE665_Improper_Initialization__char_ncat_14.c" language="C" size="3751" checksum="85274aaa9f8873fb22727d00957bbe33b87bd804">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109814" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/814/CWE665_Improper_Initialization__char_ncat_15.c" language="C" size="4073" checksum="d45bb600b8f28363c7980dacefb83dadcdbe5ae6">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109815" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/815/CWE665_Improper_Initialization__char_ncat_16.c" language="C" size="2865" checksum="78e60ffdb6a857eb9edc6e94cddd86921270a4dd">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109816" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/816/CWE665_Improper_Initialization__char_ncat_17.c" language="C" size="2884" checksum="e4183fbbdb52c64e588d3c75dab0d9912232e31c">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109817" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/817/CWE665_Improper_Initialization__char_ncat_18.c" language="C" size="2817" checksum="005f77a401424a8d37e77d17cb3f2cf0c595d5fb">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109818" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/818/CWE665_Improper_Initialization__char_ncat_21.c" language="C" size="4496" checksum="a4a5472700194028d6450fd30a25950bfca29f03">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109819" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/819/CWE665_Improper_Initialization__char_ncat_22a.c" language="C" size="4393" checksum="953965db5812f4e8e4e09a2d51862415ef4594fe"></file>
    <file path="000/109/819/CWE665_Improper_Initialization__char_ncat_22b.c" language="C" size="2287" checksum="019b9c5d7b4aa0dc73d20cd56f90063329068043">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109820" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/820/CWE665_Improper_Initialization__char_ncat_31.c" language="C" size="2990" checksum="ce7dac04dd9aeef507918bf0d096930beadd435b">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109821" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 32 Data flow using two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/821/CWE665_Improper_Initialization__char_ncat_32.c" language="C" size="3231" checksum="baa21f2e405a336f8637110a2fb8f98e1ec9c84a">
      <mixed line="32" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109822" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/822/CWE665_Improper_Initialization__char_ncat_33.cpp" language="C++" size="3013" checksum="28ea2462ac0d49bccc2a0881095ff04646e03437">
      <mixed line="32" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109823" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/823/CWE665_Improper_Initialization__char_ncat_34.c" language="C" size="3323" checksum="2d1cf3450259c5e62468d073d71eabc2e8edb8f1">
      <mixed line="35" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109824" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/824/CWE665_Improper_Initialization__char_ncat_41.c" language="C" size="3082" checksum="a4160b265252c16f82e9dbe122682087030d9165">
      <mixed line="42" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109825" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/825/CWE665_Improper_Initialization__char_ncat_42.c" language="C" size="2965" checksum="7cc3f988e1e00156df896e0d623226380b4ea885">
      <mixed line="25" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109826" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/826/CWE665_Improper_Initialization__char_ncat_43.cpp" language="C++" size="2957" checksum="2ef7c16c93cccb2dba94b454e8a928d8a73d466d">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109827" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/827/CWE665_Improper_Initialization__char_ncat_44.c" language="C" size="3113" checksum="593925d3b1592c996343aee896bcd09eebcbfdfe">
      <mixed line="44" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109828" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/828/CWE665_Improper_Initialization__char_ncat_45.c" language="C" size="3330" checksum="52e01889d814bcf386fe2f26a41f6d4b927ce39f">
      <mixed line="46" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109829" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/829/CWE665_Improper_Initialization__char_ncat_51a.c" language="C" size="2368" checksum="b90a44afee2e0c47ebe03a5e274e3ef6c12fa9fe">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/829/CWE665_Improper_Initialization__char_ncat_51b.c" language="C" size="1772" checksum="0077f09be74404b762f65881ef513de171622405"></file>
  </testcase>
  <testcase id="109830" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/830/CWE665_Improper_Initialization__char_ncat_52a.c" language="C" size="2384" checksum="068c800610e40650c81fbe82c78568f061f375d7">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/830/CWE665_Improper_Initialization__char_ncat_52b.c" language="C" size="1368" checksum="4c4aa15db5f853ea818082c0509979b59a73f171"></file>
    <file path="000/109/830/CWE665_Improper_Initialization__char_ncat_52c.c" language="C" size="1789" checksum="8dde2c57d9db2720f0bf97df3010c7960f444e44"></file>
  </testcase>
  <testcase id="109831" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/831/CWE665_Improper_Initialization__char_ncat_53a.c" language="C" size="2411" checksum="b26d0de19a2ab67742acea2e35d6708e597a39cd">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/831/CWE665_Improper_Initialization__char_ncat_53b.c" language="C" size="1395" checksum="5a170871e67c2f9ae0e6d0314825ac8512a26614"></file>
    <file path="000/109/831/CWE665_Improper_Initialization__char_ncat_53c.c" language="C" size="1395" checksum="32b1266be5f78a72da9cb8b06165669332f5d357"></file>
    <file path="000/109/831/CWE665_Improper_Initialization__char_ncat_53d.c" language="C" size="1816" checksum="40175abdfe4611fbc62657d447fa3e42d66024ae"></file>
  </testcase>
  <testcase id="109832" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/832/CWE665_Improper_Initialization__char_ncat_54a.c" language="C" size="2412" checksum="a898de2520af657d87b6a5eb5db8d63a62506244">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/832/CWE665_Improper_Initialization__char_ncat_54b.c" language="C" size="1396" checksum="18fec179a41c389621b127aa1fa479376f9a17a6"></file>
    <file path="000/109/832/CWE665_Improper_Initialization__char_ncat_54c.c" language="C" size="1396" checksum="6002bd06df0323cebc3e9df579145681cff15b59"></file>
    <file path="000/109/832/CWE665_Improper_Initialization__char_ncat_54d.c" language="C" size="1396" checksum="d373434ac19c3c37ac680c3386d8d15ec3b2a49f"></file>
    <file path="000/109/832/CWE665_Improper_Initialization__char_ncat_54e.c" language="C" size="1817" checksum="16d878c16f42e0f48b04506ce0533c91b4155433"></file>
  </testcase>
  <testcase id="109833" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/833/CWE665_Improper_Initialization__char_ncat_61a.c" language="C" size="2944" checksum="ae63af22818faab7971c654bb0ae40be253a4291"></file>
    <file path="000/109/833/CWE665_Improper_Initialization__char_ncat_61b.c" language="C" size="1107" checksum="a4cb825c9905583c8a7f4361bd792f60e4b374fe">
      <mixed line="25" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109834" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/834/CWE665_Improper_Initialization__char_ncat_62a.cpp" language="C++" size="2785" checksum="1287e950da1524c6f4eaf8f43489ddecddeef633"></file>
    <file path="000/109/834/CWE665_Improper_Initialization__char_ncat_62b.cpp" language="C++" size="1088" checksum="5fe5241a7b7b5224dbd354bec798bc7c7c36c387">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109835" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/835/CWE665_Improper_Initialization__char_ncat_63a.c" language="C" size="2340" checksum="0c8d1c7397397ea36ee0a89c1b79fd4331870413">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/835/CWE665_Improper_Initialization__char_ncat_63b.c" language="C" size="1734" checksum="4297276ad02ae838d615c14f4bafd4e2bc6347bd"></file>
  </testcase>
  <testcase id="109836" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/836/CWE665_Improper_Initialization__char_ncat_64a.c" language="C" size="2352" checksum="6a2261e851558eca9db24c8434c4e6849426f440">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/836/CWE665_Improper_Initialization__char_ncat_64b.c" language="C" size="2055" checksum="0abe92b9d94be8f70422a801f12c7bbbf305df6c"></file>
  </testcase>
  <testcase id="109837" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/837/CWE665_Improper_Initialization__char_ncat_65a.c" language="C" size="2532" checksum="2e1de4bbe4fb3ecb7e6c4eb660be33aa181c6e8e">
      <mixed line="33" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/837/CWE665_Improper_Initialization__char_ncat_65b.c" language="C" size="1712" checksum="4a3dc12500e8efa4b7fdcadb13e34812f5241792"></file>
  </testcase>
  <testcase id="109838" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/838/CWE665_Improper_Initialization__char_ncat_66a.c" language="C" size="2489" checksum="82912f4e94db91eac61ac27a839d4d6f749f8c2c">
      <mixed line="32" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/838/CWE665_Improper_Initialization__char_ncat_66b.c" language="C" size="1785" checksum="2a1f03bb1633bb36d94a4500376882aa02f567e7"></file>
  </testcase>
  <testcase id="109839" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/839/CWE665_Improper_Initialization__char_ncat_67a.c" language="C" size="2819" checksum="fae9ab3f4cbd3561b3b2f54e19f11ea16aacc4a4">
      <mixed line="37" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/839/CWE665_Improper_Initialization__char_ncat_67b.c" language="C" size="2018" checksum="7061b451af0787ee17f1f651895a69019cffb859"></file>
  </testcase>
  <testcase id="109840" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/840/CWE665_Improper_Initialization__char_ncat_68a.c" language="C" size="2610" checksum="6a57e1c5be7fd11201dde37e026685dc312989d0">
      <mixed line="34" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/840/CWE665_Improper_Initialization__char_ncat_68b.c" language="C" size="2050" checksum="e5aa00fe73264930a1b81c12e422b18a257029c5"></file>
  </testcase>
  <testcase id="109841" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/841/CWE665_Improper_Initialization__char_ncat_72a.cpp" language="C++" size="2723" checksum="1cdedbf25d9bf1ca0ac2bb2a247cf6f6f1c3b357">
      <mixed line="38" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/841/CWE665_Improper_Initialization__char_ncat_72b.cpp" language="C++" size="1845" checksum="a6ec75e87119fc12f56341201eecdf6bd4d52916"></file>
  </testcase>
  <testcase id="109842" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/842/CWE665_Improper_Initialization__char_ncat_73a.cpp" language="C++" size="2575" checksum="2c020bcab3be9e2ba4172738839e8fa0c1fc9caa">
      <mixed line="38" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/842/CWE665_Improper_Initialization__char_ncat_73b.cpp" language="C++" size="1835" checksum="0e39dd8b923ecd60eb48b0591a10486796051f3e"></file>
  </testcase>
  <testcase id="109843" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/843/CWE665_Improper_Initialization__char_ncat_74a.cpp" language="C++" size="2539" checksum="411af58794023966b62ad8dd6b04c1bef93d95ba">
      <mixed line="38" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/843/CWE665_Improper_Initialization__char_ncat_74b.cpp" language="C++" size="1828" checksum="5edccfdb96eb3e12e03c0b433f59f15b1fe59d5c"></file>
  </testcase>
  <testcase id="109844" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/844/CWE665_Improper_Initialization__char_ncat_81.h" language="C" size="1228" checksum="42edf7f3c762610367aaed074e726992949c5aa1"></file>
    <file path="000/109/844/CWE665_Improper_Initialization__char_ncat_81_bad.cpp" language="C++" size="1206" checksum="7ced5ce4194dfb24a00efbfa2b6377c5fdad3f1b"></file>
    <file path="000/109/844/CWE665_Improper_Initialization__char_ncat_81_goodG2B.cpp" language="C++" size="1220" checksum="8de5f7768c0427bc409218c953e164ce2d533d48"></file>
    <file path="000/109/844/CWE665_Improper_Initialization__char_ncat_81a.cpp" language="C++" size="2377" checksum="a420d90398e8e7731c53b592391f800eb02394da">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109845" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/845/CWE665_Improper_Initialization__char_ncat_82.h" language="C" size="1192" checksum="b23d7a915e07c44112311daef3a4b2ce41e92fdd"></file>
    <file path="000/109/845/CWE665_Improper_Initialization__char_ncat_82_bad.cpp" language="C++" size="1198" checksum="17a0c0ae70ad9e1214ef0cdb1bdb18d749a5b16a"></file>
    <file path="000/109/845/CWE665_Improper_Initialization__char_ncat_82_goodG2B.cpp" language="C++" size="1212" checksum="40b0c452568370673566753a921152bd059c1ee6"></file>
    <file path="000/109/845/CWE665_Improper_Initialization__char_ncat_82a.cpp" language="C++" size="2417" checksum="e27e55c7fbc4a674762c15c0e969a68ab4f84fb3">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109846" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/846/CWE665_Improper_Initialization__char_ncat_83.h" language="C" size="1227" checksum="94aacde884899c8cac5d5a5e1b7a05192a6dd797"></file>
    <file path="000/109/846/CWE665_Improper_Initialization__char_ncat_83_bad.cpp" language="C++" size="1489" checksum="7941e14c77a0f76e077b5340588db2ccdd6d82f5">
      <mixed line="26" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/846/CWE665_Improper_Initialization__char_ncat_83_goodG2B.cpp" language="C++" size="1499" checksum="84bca91feda5a59b59e093dd7db7e01869b1dc84"></file>
    <file path="000/109/846/CWE665_Improper_Initialization__char_ncat_83a.cpp" language="C++" size="2045" checksum="a90ed362a552161f0e67b377bec485e104e2f470"></file>
  </testcase>
  <testcase id="109847" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using strncat<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/847/CWE665_Improper_Initialization__char_ncat_84.h" language="C" size="1252" checksum="298b0a9e4b64cf3c310feec7f8520c448a973953"></file>
    <file path="000/109/847/CWE665_Improper_Initialization__char_ncat_84_bad.cpp" language="C++" size="1514" checksum="b93a03d56b1cfb2cbbe82da45ff7e03d78a49e53">
      <mixed line="26" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/847/CWE665_Improper_Initialization__char_ncat_84_goodG2B.cpp" language="C++" size="1524" checksum="4bcbe0ed584eb6f1ed4e63a15cebcc3723045186"></file>
    <file path="000/109/847/CWE665_Improper_Initialization__char_ncat_84a.cpp" language="C++" size="2239" checksum="10de9e9436e80298d501876a1e4d4424a57030ca"></file>
  </testcase>
  <testcase id="109848" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[Incomplete initialization]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/848/CWE665_Improper_Initialization__class_01_bad.cpp" language="C++" size="1728" checksum="405f52fa54b9bb8126aeefbc764d41c8da256c12">
      <mixed line="25" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/848/CWE665_Improper_Initialization__class_01_good1.cpp" language="C++" size="1755" checksum="f7beda5825e5c936800c3d973a75f09a3335576d"></file>
  </testcase>
  <testcase id="109849" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/849/CWE665_Improper_Initialization__wchar_t_cat_01.c" language="C" size="2585" checksum="988cc405cde016fd3a94c6405e9a33dadeee38c5">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109850" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/850/CWE665_Improper_Initialization__wchar_t_cat_02.c" language="C" size="3488" checksum="63adf53ac57e1fc164163c901a477388b99f1f78">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109851" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/851/CWE665_Improper_Initialization__wchar_t_cat_03.c" language="C" size="3509" checksum="aba010e20d72df351d84abca3a17bd90042ce903">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109852" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/852/CWE665_Improper_Initialization__wchar_t_cat_04.c" language="C" size="3876" checksum="f4de9a77efbb88196baf9c858e45b678c4f37147">
      <mixed line="37" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109853" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/853/CWE665_Improper_Initialization__wchar_t_cat_05.c" language="C" size="3847" checksum="dafccd9aac083623197d8b61a2d4d3bceefa52e1">
      <mixed line="37" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109854" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/854/CWE665_Improper_Initialization__wchar_t_cat_06.c" language="C" size="3811" checksum="95451420385ebccc1c7ee214e26b1eb15d9322c6">
      <mixed line="34" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109855" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/855/CWE665_Improper_Initialization__wchar_t_cat_07.c" language="C" size="3797" checksum="0f11a0ea1e822d1e578969c58d232fdeb8f5c5eb">
      <mixed line="36" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109856" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/856/CWE665_Improper_Initialization__wchar_t_cat_08.c" language="C" size="3897" checksum="4aafa6919196409196847f8ea285a8c3c8a0039f">
      <mixed line="44" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109857" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/857/CWE665_Improper_Initialization__wchar_t_cat_09.c" language="C" size="3603" checksum="a0de4c98378b8ceca21d73b43c519c547c21ab03">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109858" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/858/CWE665_Improper_Initialization__wchar_t_cat_10.c" language="C" size="3554" checksum="c514fa1d48155cca8979b5f8b2fe0757e9dc7347">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109859" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/859/CWE665_Improper_Initialization__wchar_t_cat_11.c" language="C" size="3617" checksum="b4479275733147a559e8b3ca4193b08cf8a691d5">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109860" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/860/CWE665_Improper_Initialization__wchar_t_cat_12.c" language="C" size="3029" checksum="a7d336ec805b43548c44164c380fca0e3c262258">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109861" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/861/CWE665_Improper_Initialization__wchar_t_cat_13.c" language="C" size="3621" checksum="18292bb378c265d2738cbdfb10b797ec885485d5">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109862" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/862/CWE665_Improper_Initialization__wchar_t_cat_14.c" language="C" size="3572" checksum="2a2573dde72b9f42545eea06c2c097194e686d71">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109863" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/863/CWE665_Improper_Initialization__wchar_t_cat_15.c" language="C" size="3894" checksum="13dbe7c1f4a961f2d2c493010b1105115fbb62d8">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109864" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/864/CWE665_Improper_Initialization__wchar_t_cat_16.c" language="C" size="2748" checksum="f9d335f864db1747476ad09f866e8845d2b5ab14">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109865" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/865/CWE665_Improper_Initialization__wchar_t_cat_17.c" language="C" size="2767" checksum="906c5c1043c552e5d7c881b372cbfa0d5da0eacb">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109866" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/866/CWE665_Improper_Initialization__wchar_t_cat_18.c" language="C" size="2700" checksum="89de8863fe9f0b63f8a7a1e1dedeb7677ff5b4a4">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109867" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/867/CWE665_Improper_Initialization__wchar_t_cat_21.c" language="C" size="4335" checksum="e62f0c9cb23dc5db079a8bd5d9ba928a76840ca7">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109868" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/868/CWE665_Improper_Initialization__wchar_t_cat_22a.c" language="C" size="4254" checksum="9012f9ef5424eb05eda1c9204327da3bb04f00bf"></file>
    <file path="000/109/868/CWE665_Improper_Initialization__wchar_t_cat_22b.c" language="C" size="2325" checksum="092497c5529a8eef2f05f9b91b5c261e1f2d8472">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109869" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/869/CWE665_Improper_Initialization__wchar_t_cat_31.c" language="C" size="2869" checksum="6eacc170ac3d158f89e7cf409d19afb6c0b96b99">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109870" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 32 Data flow using two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/870/CWE665_Improper_Initialization__wchar_t_cat_32.c" language="C" size="3122" checksum="b8ce4a0981f8d74d66bea046107d039b90a68f47">
      <mixed line="32" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109871" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/871/CWE665_Improper_Initialization__wchar_t_cat_33.cpp" language="C++" size="2888" checksum="02eadcbde35e4cb2df68c6dc531de75114714519">
      <mixed line="32" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109872" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/872/CWE665_Improper_Initialization__wchar_t_cat_34.c" language="C" size="3208" checksum="674fba8f2f215dbd02a2d6468935803667cd51fc">
      <mixed line="35" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109873" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/873/CWE665_Improper_Initialization__wchar_t_cat_41.c" language="C" size="2979" checksum="4abc59ee947d5509679609f5a4db24ca249b972f">
      <mixed line="40" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109874" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/874/CWE665_Improper_Initialization__wchar_t_cat_42.c" language="C" size="2860" checksum="ffdee2008d53dae6c5e0e68c954a040af6631b98">
      <mixed line="25" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109875" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/875/CWE665_Improper_Initialization__wchar_t_cat_43.cpp" language="C++" size="2842" checksum="cd3f28440551cc3bede34391e555795ee441d674">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109876" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/876/CWE665_Improper_Initialization__wchar_t_cat_44.c" language="C" size="3008" checksum="41b555f17e865f954c10cf3d43e41ee3ba4e440d">
      <mixed line="42" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109877" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/877/CWE665_Improper_Initialization__wchar_t_cat_45.c" language="C" size="3237" checksum="d1956ac9e7e45f45ac7679da2bbb0351bd4954d6">
      <mixed line="44" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109878" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/878/CWE665_Improper_Initialization__wchar_t_cat_51a.c" language="C" size="2403" checksum="53144918c6a364acb5c07d9a2e5a9a95b23eca13">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/878/CWE665_Improper_Initialization__wchar_t_cat_51b.c" language="C" size="1644" checksum="10d8d90456512e54a9c6a021e8b77cd191c0fb22"></file>
  </testcase>
  <testcase id="109879" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/879/CWE665_Improper_Initialization__wchar_t_cat_52a.c" language="C" size="2419" checksum="33349e670025e8f4e9c4b86c0f60401e8e564214">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/879/CWE665_Improper_Initialization__wchar_t_cat_52b.c" language="C" size="1392" checksum="d6109688d3896982d920ea35bf35babda4316c9d"></file>
    <file path="000/109/879/CWE665_Improper_Initialization__wchar_t_cat_52c.c" language="C" size="1661" checksum="a896424c56203157abf569915ee3bd263dd503bb"></file>
  </testcase>
  <testcase id="109880" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/880/CWE665_Improper_Initialization__wchar_t_cat_53a.c" language="C" size="2446" checksum="769e1ea87d703b0ed40e9be898864222952ad0ed">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/880/CWE665_Improper_Initialization__wchar_t_cat_53b.c" language="C" size="1419" checksum="eabaf7f8ff401d9ee593fae832c3d4e17c89b80d"></file>
    <file path="000/109/880/CWE665_Improper_Initialization__wchar_t_cat_53c.c" language="C" size="1419" checksum="63a889871b53dba2be9c44be2901a81bed6450e3"></file>
    <file path="000/109/880/CWE665_Improper_Initialization__wchar_t_cat_53d.c" language="C" size="1688" checksum="fb28cce3b0861819165e6f81ecbcab914d1f5525"></file>
  </testcase>
  <testcase id="109881" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/881/CWE665_Improper_Initialization__wchar_t_cat_54a.c" language="C" size="2447" checksum="28eb6315c2c5a9abf3066d1943001f4ae7f12725">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/881/CWE665_Improper_Initialization__wchar_t_cat_54b.c" language="C" size="1420" checksum="3e6831443322607dd826af2b2fe1df526ed88262"></file>
    <file path="000/109/881/CWE665_Improper_Initialization__wchar_t_cat_54c.c" language="C" size="1420" checksum="0fe4390e90b5960403d8b82ab402d105d82e27bc"></file>
    <file path="000/109/881/CWE665_Improper_Initialization__wchar_t_cat_54d.c" language="C" size="1420" checksum="34da22ba2f33d3b6da0b05f4ce55690b217b93d2"></file>
    <file path="000/109/881/CWE665_Improper_Initialization__wchar_t_cat_54e.c" language="C" size="1689" checksum="b3095636f2d7dc08870d62c1df7f2ca99fa67bde"></file>
  </testcase>
  <testcase id="109882" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/882/CWE665_Improper_Initialization__wchar_t_cat_61a.c" language="C" size="2846" checksum="11767154865ba997a1d4253286c7199899fefc4f"></file>
    <file path="000/109/882/CWE665_Improper_Initialization__wchar_t_cat_61b.c" language="C" size="1124" checksum="2bc7f373823b207da9a99dc716d4b3487a6a53e2">
      <mixed line="25" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109883" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/883/CWE665_Improper_Initialization__wchar_t_cat_62a.cpp" language="C++" size="2669" checksum="63adc841dc41df6df9bb0fb6e625d1a3d7e7583d"></file>
    <file path="000/109/883/CWE665_Improper_Initialization__wchar_t_cat_62b.cpp" language="C++" size="1097" checksum="6a386ea43b096b7f689e3f66015563f8d7d34d5e">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109884" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/884/CWE665_Improper_Initialization__wchar_t_cat_63a.c" language="C" size="2375" checksum="8aad5a2fa94519894c6a015b572896668fa5c9e1">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/884/CWE665_Improper_Initialization__wchar_t_cat_63b.c" language="C" size="1612" checksum="dc12da67d4f53f63af724e0763b41714894c2632"></file>
  </testcase>
  <testcase id="109885" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/885/CWE665_Improper_Initialization__wchar_t_cat_64a.c" language="C" size="2381" checksum="8288a32e58b60ed47820b3d55201f9963485d2cf">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/885/CWE665_Improper_Initialization__wchar_t_cat_64b.c" language="C" size="1939" checksum="f15fb6349f5188a335e0c604a6f96ffa866521ab"></file>
  </testcase>
  <testcase id="109886" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/886/CWE665_Improper_Initialization__wchar_t_cat_65a.c" language="C" size="2573" checksum="16db2e250b8b0a1b9a8902c106c019164f139454">
      <mixed line="33" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/886/CWE665_Improper_Initialization__wchar_t_cat_65b.c" language="C" size="1584" checksum="d6b340745eddc7a20509208601123386b38002a3"></file>
  </testcase>
  <testcase id="109887" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/887/CWE665_Improper_Initialization__wchar_t_cat_66a.c" language="C" size="2530" checksum="1b22de092c51b855aedc607b9f6d57004a2bd84f">
      <mixed line="32" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/887/CWE665_Improper_Initialization__wchar_t_cat_66b.c" language="C" size="1663" checksum="1fb8691d893e128c8a56ec5dbc57ffe4b9f48b58"></file>
  </testcase>
  <testcase id="109888" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/888/CWE665_Improper_Initialization__wchar_t_cat_67a.c" language="C" size="2863" checksum="2598f8b82601ada39f894128b93c5d69e56bca59">
      <mixed line="37" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/888/CWE665_Improper_Initialization__wchar_t_cat_67b.c" language="C" size="1901" checksum="efe75230fc57651e432b10575fae21a5ed433e50"></file>
  </testcase>
  <testcase id="109889" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/889/CWE665_Improper_Initialization__wchar_t_cat_68a.c" language="C" size="2653" checksum="83d306679fc65be9827fb8d024e0400eadef627a">
      <mixed line="34" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/889/CWE665_Improper_Initialization__wchar_t_cat_68b.c" language="C" size="1936" checksum="d96e766b46554b4157f558cb52ad69d136915a5d"></file>
  </testcase>
  <testcase id="109890" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/890/CWE665_Improper_Initialization__wchar_t_cat_72a.cpp" language="C++" size="2752" checksum="349f5068d97991aefc7022378bf138c7ceb7d09d">
      <mixed line="38" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/890/CWE665_Improper_Initialization__wchar_t_cat_72b.cpp" language="C++" size="1721" checksum="2d97a27959fd7f59ec1ea6c81f5a54f771c70519"></file>
  </testcase>
  <testcase id="109891" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/891/CWE665_Improper_Initialization__wchar_t_cat_73a.cpp" language="C++" size="2604" checksum="023933edd23059d68737c6cec6b78c94364a0b2d">
      <mixed line="38" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/891/CWE665_Improper_Initialization__wchar_t_cat_73b.cpp" language="C++" size="1711" checksum="cc4068179d616c37fbd0ed6a522a3298ff442b4d"></file>
  </testcase>
  <testcase id="109892" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/892/CWE665_Improper_Initialization__wchar_t_cat_74a.cpp" language="C++" size="2568" checksum="fb81c5be46051b1e24759453684fc56a3b45baac">
      <mixed line="38" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/892/CWE665_Improper_Initialization__wchar_t_cat_74b.cpp" language="C++" size="1704" checksum="e2076776a6be21e648037bfed7934cc563348b41"></file>
  </testcase>
  <testcase id="109893" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/893/CWE665_Improper_Initialization__wchar_t_cat_81.h" language="C" size="1249" checksum="1fbecfe8fb1484409ca9108367c3e8397eaecbdb"></file>
    <file path="000/109/893/CWE665_Improper_Initialization__wchar_t_cat_81_bad.cpp" language="C++" size="1146" checksum="462f7c1fec7bab55c386d750c69b43c3e88a4a79"></file>
    <file path="000/109/893/CWE665_Improper_Initialization__wchar_t_cat_81_goodG2B.cpp" language="C++" size="1160" checksum="5482226e67c0938338c6486a57d4bd7470480117"></file>
    <file path="000/109/893/CWE665_Improper_Initialization__wchar_t_cat_81a.cpp" language="C++" size="2404" checksum="92c170c114dc8c649c77b21215f542462d6ed99f">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109894" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/894/CWE665_Improper_Initialization__wchar_t_cat_82.h" language="C" size="1214" checksum="fa0c3aebcb90899c3500e2f87eaec36177e9cf30"></file>
    <file path="000/109/894/CWE665_Improper_Initialization__wchar_t_cat_82_bad.cpp" language="C++" size="1138" checksum="2c542e344e9b316d23a6680db3d8081240925528"></file>
    <file path="000/109/894/CWE665_Improper_Initialization__wchar_t_cat_82_goodG2B.cpp" language="C++" size="1152" checksum="3f630421fef3fe94006386974cf20d9882713e99"></file>
    <file path="000/109/894/CWE665_Improper_Initialization__wchar_t_cat_82a.cpp" language="C++" size="2444" checksum="fa3c21c4e590600d89c8388ee30d34bbaa04ddb3">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109895" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/895/CWE665_Improper_Initialization__wchar_t_cat_83.h" language="C" size="1253" checksum="bebe62805d22557c52fe6e6a7a4187aac0c41a03"></file>
    <file path="000/109/895/CWE665_Improper_Initialization__wchar_t_cat_83_bad.cpp" language="C++" size="1435" checksum="53817d9f077e2088128f223d4b71bfe7b7eda7c7">
      <mixed line="26" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/895/CWE665_Improper_Initialization__wchar_t_cat_83_goodG2B.cpp" language="C++" size="1446" checksum="fb77d7b0fcdf11eb334f651fad407d7afbd12507"></file>
    <file path="000/109/895/CWE665_Improper_Initialization__wchar_t_cat_83a.cpp" language="C++" size="2067" checksum="ea881fd80de050dba50cc1feb852463d68317b79"></file>
  </testcase>
  <testcase id="109896" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: cat<br/> BadSink : Copy string to data using wcscat<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/896/CWE665_Improper_Initialization__wchar_t_cat_84.h" language="C" size="1278" checksum="b6a9281cb5cab89aa3d26f747e7538d5ee2363cc"></file>
    <file path="000/109/896/CWE665_Improper_Initialization__wchar_t_cat_84_bad.cpp" language="C++" size="1460" checksum="7b4907ed247388e11bf79851644d21359bc41b0a">
      <mixed line="26" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/896/CWE665_Improper_Initialization__wchar_t_cat_84_goodG2B.cpp" language="C++" size="1471" checksum="c4bf18effe395f6436fc060f000a4d90c4b5960b"></file>
    <file path="000/109/896/CWE665_Improper_Initialization__wchar_t_cat_84a.cpp" language="C++" size="2265" checksum="eef767ec7fd4fb04bf041884e0914e34ec9064d2"></file>
  </testcase>
  <testcase id="109897" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/897/CWE665_Improper_Initialization__wchar_t_ncat_01.c" language="C" size="2746" checksum="76026cf3ebf9cfa92a05cee1c9cf4ac2fd574e50">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109898" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/898/CWE665_Improper_Initialization__wchar_t_ncat_02.c" language="C" size="3726" checksum="0b3857ee1c9d040822510306794995e048709149">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109899" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/899/CWE665_Improper_Initialization__wchar_t_ncat_03.c" language="C" size="3747" checksum="c50db1c381d8b7f0256c9ba4430248132c7a84dc">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109900" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/900/CWE665_Improper_Initialization__wchar_t_ncat_04.c" language="C" size="4114" checksum="457b0a95e4a11bfd543d8b43abb6f8143b62bf6a">
      <mixed line="37" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109901" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/901/CWE665_Improper_Initialization__wchar_t_ncat_05.c" language="C" size="4085" checksum="163d8fd37bf99dca21c34340b1e75d6f3b61d9ed">
      <mixed line="37" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109902" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/902/CWE665_Improper_Initialization__wchar_t_ncat_06.c" language="C" size="4049" checksum="cc5c6245d5f204529c7009084238f03dc1767e76">
      <mixed line="34" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109903" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/903/CWE665_Improper_Initialization__wchar_t_ncat_07.c" language="C" size="4035" checksum="5bc826399d5d54dd68e9b73aa6e2259eef2df278">
      <mixed line="36" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109904" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/904/CWE665_Improper_Initialization__wchar_t_ncat_08.c" language="C" size="4135" checksum="869f758b31f468f094a222763eebafec2e528314">
      <mixed line="44" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109905" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/905/CWE665_Improper_Initialization__wchar_t_ncat_09.c" language="C" size="3841" checksum="ff5b590fd5d49e36c3a30fa7e6817e8501a697e2">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109906" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/906/CWE665_Improper_Initialization__wchar_t_ncat_10.c" language="C" size="3792" checksum="e87517f0d66f59f7924068d585379eac0ff6deab">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109907" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/907/CWE665_Improper_Initialization__wchar_t_ncat_11.c" language="C" size="3855" checksum="953403ef338df6bab70d00a98c1147f0bf2a6337">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109908" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/908/CWE665_Improper_Initialization__wchar_t_ncat_12.c" language="C" size="3190" checksum="d1936d45127a98ef937d4a15c9050e2087f75464">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109909" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/909/CWE665_Improper_Initialization__wchar_t_ncat_13.c" language="C" size="3859" checksum="12cea6b69eb2a267bf576c7cc5ffaa7e50b00f54">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109910" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/910/CWE665_Improper_Initialization__wchar_t_ncat_14.c" language="C" size="3810" checksum="0439beb46a96c7b40498e1186b1e24fb9295004a">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109911" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/911/CWE665_Improper_Initialization__wchar_t_ncat_15.c" language="C" size="4132" checksum="fed35b6866f3821d8d55aaa7aabfc61bbc46531d">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109912" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/912/CWE665_Improper_Initialization__wchar_t_ncat_16.c" language="C" size="2909" checksum="813bef0e409a073b56dc025f4cc1e733ed864318">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109913" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/913/CWE665_Improper_Initialization__wchar_t_ncat_17.c" language="C" size="2928" checksum="67865e020f236269390bce732bd0979e737c2daa">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109914" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/914/CWE665_Improper_Initialization__wchar_t_ncat_18.c" language="C" size="2861" checksum="05e37a12d853a759197e424fe01dc9eee87a3d40">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109915" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/915/CWE665_Improper_Initialization__wchar_t_ncat_21.c" language="C" size="4573" checksum="343e278867a3234316111d7399684b1be576e732">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109916" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/916/CWE665_Improper_Initialization__wchar_t_ncat_22a.c" language="C" size="4504" checksum="c1284c0898bd68ce8b667610a0678194ca12b74a"></file>
    <file path="000/109/916/CWE665_Improper_Initialization__wchar_t_ncat_22b.c" language="C" size="2337" checksum="56e06305d8e7a05e7d239ae5852f97fb621f44a8">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109917" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/917/CWE665_Improper_Initialization__wchar_t_ncat_31.c" language="C" size="3046" checksum="8f7be1622fd3a834ba100f6d911d5fb9186279ad">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109918" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 32 Data flow using two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/918/CWE665_Improper_Initialization__wchar_t_ncat_32.c" language="C" size="3299" checksum="d02a5ce9a3d729bf730972efa4545a7079639f64">
      <mixed line="32" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109919" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/919/CWE665_Improper_Initialization__wchar_t_ncat_33.cpp" language="C++" size="3063" checksum="0801227bd8210d3ca844d6e645fd3e48fe793b7a">
      <mixed line="32" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109920" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/920/CWE665_Improper_Initialization__wchar_t_ncat_34.c" language="C" size="3388" checksum="a220a9bf9c6845b50b4ca6e4d99fc530c01076e3">
      <mixed line="35" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109921" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/921/CWE665_Improper_Initialization__wchar_t_ncat_41.c" language="C" size="3144" checksum="c83c7863b9b02b6430f86966fe81f6194b62f870">
      <mixed line="42" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109922" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/922/CWE665_Improper_Initialization__wchar_t_ncat_42.c" language="C" size="3021" checksum="ce38b4d18354b6f9a7901e1f24bf85b7a4e565d3">
      <mixed line="25" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109923" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/923/CWE665_Improper_Initialization__wchar_t_ncat_43.cpp" language="C++" size="3001" checksum="67af9db7ee54bb53210739627bf5d638dbba1005">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109924" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/924/CWE665_Improper_Initialization__wchar_t_ncat_44.c" language="C" size="3169" checksum="7b4e6a841af94badc496c8a6cf92422addd0b71b">
      <mixed line="44" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109925" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/925/CWE665_Improper_Initialization__wchar_t_ncat_45.c" language="C" size="3404" checksum="325a41d2531310124881003fc36ca9e888a9906e">
      <mixed line="46" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109926" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/926/CWE665_Improper_Initialization__wchar_t_ncat_51a.c" language="C" size="2414" checksum="2326bb68b2c63001f6c723644dc3373621c032c6">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/926/CWE665_Improper_Initialization__wchar_t_ncat_51b.c" language="C" size="1803" checksum="53f5b4c1da2a06cbca4e8e16e7ef66fee4feaefb"></file>
  </testcase>
  <testcase id="109927" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/927/CWE665_Improper_Initialization__wchar_t_ncat_52a.c" language="C" size="2430" checksum="65afdde9788bcc759cdfdc2acf944ddecfccc305">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/927/CWE665_Improper_Initialization__wchar_t_ncat_52b.c" language="C" size="1401" checksum="96f0ed475f52bc5554d197a483f8efdd470c7b06"></file>
    <file path="000/109/927/CWE665_Improper_Initialization__wchar_t_ncat_52c.c" language="C" size="1820" checksum="bc18cf154f69b44d7adfa6d9c71f044a78388c46"></file>
  </testcase>
  <testcase id="109928" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/928/CWE665_Improper_Initialization__wchar_t_ncat_53a.c" language="C" size="2457" checksum="5c2bd5ba062a030ce03e907521c8f90274a8e40e">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/928/CWE665_Improper_Initialization__wchar_t_ncat_53b.c" language="C" size="1428" checksum="e5ee524a15a0c9e0bc93e7ecf4a0c90a798728bd"></file>
    <file path="000/109/928/CWE665_Improper_Initialization__wchar_t_ncat_53c.c" language="C" size="1428" checksum="227dad99ffa6dccbb0b88ca663900ccf8d29218b"></file>
    <file path="000/109/928/CWE665_Improper_Initialization__wchar_t_ncat_53d.c" language="C" size="1847" checksum="9396ef5a506de6c886b654d4036408a2518aa689"></file>
  </testcase>
  <testcase id="109929" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/929/CWE665_Improper_Initialization__wchar_t_ncat_54a.c" language="C" size="2458" checksum="7d56b304290c429fcc6fc0bb4cb84d97c3043cda">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/929/CWE665_Improper_Initialization__wchar_t_ncat_54b.c" language="C" size="1429" checksum="c5bf0d5a0833661ecafe034d3fbf13a2c49547e4"></file>
    <file path="000/109/929/CWE665_Improper_Initialization__wchar_t_ncat_54c.c" language="C" size="1429" checksum="e790234a8ef45eb36eea0322505a3b75a09a02d6"></file>
    <file path="000/109/929/CWE665_Improper_Initialization__wchar_t_ncat_54d.c" language="C" size="1429" checksum="4ac80986ed789c3fa60c815b9953a0cbda772915"></file>
    <file path="000/109/929/CWE665_Improper_Initialization__wchar_t_ncat_54e.c" language="C" size="1848" checksum="943ef29a280c400aec3a70eac9eef5334efe5263"></file>
  </testcase>
  <testcase id="109930" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/930/CWE665_Improper_Initialization__wchar_t_ncat_61a.c" language="C" size="3011" checksum="51aa797c7a635cff77b70a7a6e11ff919a44bb31"></file>
    <file path="000/109/930/CWE665_Improper_Initialization__wchar_t_ncat_61b.c" language="C" size="1129" checksum="d3eed20f4854fc800db4f2affa7915acc1e31851">
      <mixed line="25" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109931" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/931/CWE665_Improper_Initialization__wchar_t_ncat_62a.cpp" language="C++" size="2828" checksum="48dbc72e0e3933e8aee35b4445f606c650ad61ab"></file>
    <file path="000/109/931/CWE665_Improper_Initialization__wchar_t_ncat_62b.cpp" language="C++" size="1101" checksum="9b370e1d654f76778c66887b4eacff20a16ab763">
      <mixed line="28" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109932" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/932/CWE665_Improper_Initialization__wchar_t_ncat_63a.c" language="C" size="2386" checksum="cf92f31a2a2bb94645cd76aa296d66c2c48fec70">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/932/CWE665_Improper_Initialization__wchar_t_ncat_63b.c" language="C" size="1771" checksum="5744015f3e8d632a1e59c9dc65673ba6c4820ec7"></file>
  </testcase>
  <testcase id="109933" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/933/CWE665_Improper_Initialization__wchar_t_ncat_64a.c" language="C" size="2392" checksum="c69ebf807baa03014e78adf91803f5440fffa2a1">
      <mixed line="31" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/933/CWE665_Improper_Initialization__wchar_t_ncat_64b.c" language="C" size="2098" checksum="29591a624e0c253623ce2c7fcd1f4a6caf188dc2"></file>
  </testcase>
  <testcase id="109934" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/934/CWE665_Improper_Initialization__wchar_t_ncat_65a.c" language="C" size="2584" checksum="74aede6ce9bdfbd906ecb08d5345892d434b3899">
      <mixed line="33" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/934/CWE665_Improper_Initialization__wchar_t_ncat_65b.c" language="C" size="1743" checksum="be4682d264396536ce047879c59e63e717654ed3"></file>
  </testcase>
  <testcase id="109935" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/935/CWE665_Improper_Initialization__wchar_t_ncat_66a.c" language="C" size="2541" checksum="70acef871bf8894e69491005f00d17e4f6cf220f">
      <mixed line="32" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/935/CWE665_Improper_Initialization__wchar_t_ncat_66b.c" language="C" size="1822" checksum="961d0e678f974ad74760b5c9c9d19d28e614604d"></file>
  </testcase>
  <testcase id="109936" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/936/CWE665_Improper_Initialization__wchar_t_ncat_67a.c" language="C" size="2880" checksum="0b0315b42b737d24e73cae3cef1d709deb4a2f80">
      <mixed line="37" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/936/CWE665_Improper_Initialization__wchar_t_ncat_67b.c" language="C" size="2064" checksum="2632974e90d0d2d09cf8eafa68d41c4d904d9b7e"></file>
  </testcase>
  <testcase id="109937" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sink: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/937/CWE665_Improper_Initialization__wchar_t_ncat_68a.c" language="C" size="2668" checksum="cf9478827c9b558e2c2df384e47193d2be007cd5">
      <mixed line="34" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/937/CWE665_Improper_Initialization__wchar_t_ncat_68b.c" language="C" size="2099" checksum="74af7a42751dc27d45ab2ea129680ea2d59e5b8a"></file>
  </testcase>
  <testcase id="109938" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/938/CWE665_Improper_Initialization__wchar_t_ncat_72a.cpp" language="C++" size="2757" checksum="7d8b2d307ef415b17af631116862a05ae0f56569">
      <mixed line="38" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/938/CWE665_Improper_Initialization__wchar_t_ncat_72b.cpp" language="C++" size="1879" checksum="3c2b9d792508b0b33783ef124182943a864cc90a"></file>
  </testcase>
  <testcase id="109939" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/939/CWE665_Improper_Initialization__wchar_t_ncat_73a.cpp" language="C++" size="2609" checksum="0119d1e5c61d58fdb55d96fe6305532d33c88064">
      <mixed line="38" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/939/CWE665_Improper_Initialization__wchar_t_ncat_73b.cpp" language="C++" size="1869" checksum="9790fb03d3265e0a1054982f43504fda9329dae2"></file>
  </testcase>
  <testcase id="109940" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/940/CWE665_Improper_Initialization__wchar_t_ncat_74a.cpp" language="C++" size="2573" checksum="536da5c4c527871c563e9492070ed7dcdd5cb176">
      <mixed line="38" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/940/CWE665_Improper_Initialization__wchar_t_ncat_74b.cpp" language="C++" size="1862" checksum="a72d7e9378377abfd0ac23d8cb89aa902db7e42f"></file>
  </testcase>
  <testcase id="109941" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/941/CWE665_Improper_Initialization__wchar_t_ncat_81.h" language="C" size="1258" checksum="a2ccf088f6487813daccee21041bc024e9172657"></file>
    <file path="000/109/941/CWE665_Improper_Initialization__wchar_t_ncat_81_bad.cpp" language="C++" size="1229" checksum="b6e4005f8584bbc7f0334aa58af80e93290040e0"></file>
    <file path="000/109/941/CWE665_Improper_Initialization__wchar_t_ncat_81_goodG2B.cpp" language="C++" size="1243" checksum="57d23896e960f6ac4e30259e012310268350d291"></file>
    <file path="000/109/941/CWE665_Improper_Initialization__wchar_t_ncat_81a.cpp" language="C++" size="2414" checksum="2a426f683d3b65ca79119097a9905a57feed18ef">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109942" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/942/CWE665_Improper_Initialization__wchar_t_ncat_82.h" language="C" size="1222" checksum="0fe58570a1f648543369604d60ca5cbf6029164f"></file>
    <file path="000/109/942/CWE665_Improper_Initialization__wchar_t_ncat_82_bad.cpp" language="C++" size="1221" checksum="2d44a8335af4683a2a07881fd579b55a3c292524"></file>
    <file path="000/109/942/CWE665_Improper_Initialization__wchar_t_ncat_82_goodG2B.cpp" language="C++" size="1235" checksum="38cbca4b5b741f6e0d14d51b971eb7b9cc0d0543"></file>
    <file path="000/109/942/CWE665_Improper_Initialization__wchar_t_ncat_82a.cpp" language="C++" size="2454" checksum="ae66a53be58e4d30e2f239730770d80788ff2c0f">
      <mixed line="30" name="CWE-665: Improper Initialization"></mixed>
    </file>
  </testcase>
  <testcase id="109943" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/943/CWE665_Improper_Initialization__wchar_t_ncat_83.h" language="C" size="1263" checksum="3f6ed7c1ecbe80c0e2d89ec46b36f2593eb8471d"></file>
    <file path="000/109/943/CWE665_Improper_Initialization__wchar_t_ncat_83_bad.cpp" language="C++" size="1521" checksum="341df4e0e6831020469dd2ddac109f45e1099075">
      <mixed line="26" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/943/CWE665_Improper_Initialization__wchar_t_ncat_83_goodG2B.cpp" language="C++" size="1532" checksum="8959ba7c578b5e0d07e8b5025bccf1be64bb6db9"></file>
    <file path="000/109/943/CWE665_Improper_Initialization__wchar_t_ncat_83a.cpp" language="C++" size="2075" checksum="67be32a6c1ce139ffd99938a8f0f4b5d68f34124"></file>
  </testcase>
  <testcase id="109944" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 665 Improper Initialization<br/> BadSource:  Do not initialize data properly<br/> GoodSource: Initialize data<br/> Sinks: ncat<br/> BadSink : Copy string to data using wcsncat<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/109/944/CWE665_Improper_Initialization__wchar_t_ncat_84.h" language="C" size="1288" checksum="32f38c52358dc281b4e10a16864d2f2f6894cc1b"></file>
    <file path="000/109/944/CWE665_Improper_Initialization__wchar_t_ncat_84_bad.cpp" language="C++" size="1546" checksum="e61bdcd8c884f038e6979338b16435f2c14e4e43">
      <mixed line="26" name="CWE-665: Improper Initialization"></mixed>
    </file>
    <file path="000/109/944/CWE665_Improper_Initialization__wchar_t_ncat_84_goodG2B.cpp" language="C++" size="1557" checksum="90d70452079bc50a955ae6861a2fde0121d4fe85"></file>
    <file path="000/109/944/CWE665_Improper_Initialization__wchar_t_ncat_84a.cpp" language="C++" size="2275" checksum="3955ed08bdaf7641a2a6bb9091458e1ace9deaf0"></file>
  </testcase>
  <testcase id="110053" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/053/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_01.cpp" language="C++" size="3546" checksum="9b533253d6398bbb4ec5597f78b0a318c633b7c6">
      <mixed line="47" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110054" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/054/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_02.cpp" language="C++" size="5679" checksum="e0ccd591d4b41befc3eba91f13058764832010f4">
      <mixed line="52" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110055" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/055/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_03.cpp" language="C++" size="5727" checksum="060d4cfc33d99c696ee5d30546a71b398c040c6c">
      <mixed line="52" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110056" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/056/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_04.cpp" language="C++" size="6211" checksum="aada7350d0223c0297b3af254f8b339622e2c53a">
      <mixed line="58" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110057" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/057/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_05.cpp" language="C++" size="6119" checksum="f50edf380a0c44f988795b89bef2f62994cc561d">
      <mixed line="58" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110058" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/058/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_06.cpp" language="C++" size="6177" checksum="2e46cf3b925bbc1699316bd7c874c865ef935337">
      <mixed line="57" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110059" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/059/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_07.cpp" language="C++" size="6094" checksum="ad7ab1e01c9939502181276106d7479d5f23f762">
      <mixed line="57" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110060" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/060/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_08.cpp" language="C++" size="6250" checksum="b964297468d66268c5d56b9a2ebfff2cfee39573">
      <mixed line="65" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110061" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/061/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_09.cpp" language="C++" size="5940" checksum="34f29bf5d2f87d854a90a460891083b65d587c0f">
      <mixed line="52" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110062" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/062/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_10.cpp" language="C++" size="5828" checksum="203f07c4e432c07ebaa09ad017d39f4b7b742c05">
      <mixed line="52" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110063" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/063/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_11.cpp" language="C++" size="5968" checksum="30c8293b6746ec923ba694748d0a720441b1e72d">
      <mixed line="51" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110064" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/064/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_12.cpp" language="C++" size="5923" checksum="f7dedcb53900d9e60e63522b47274ddbe5730df6">
      <mixed line="57" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110065" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/065/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_13.cpp" language="C++" size="5979" checksum="46a338510e62f51cabc64fa0f35067bbf702685e">
      <mixed line="51" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110066" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/066/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_14.cpp" language="C++" size="5867" checksum="9e8fd83bb2c834a9a6708324ff0186d6cce1264c">
      <mixed line="51" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110067" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/067/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_15.cpp" language="C++" size="6991" checksum="8766684fe12c1157a8856ca8556ed04347a0c1d6">
      <mixed line="58" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110068" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/068/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_16.cpp" language="C++" size="4101" checksum="4d0e9ff9da3e9f17078334d042ce6ac3717c431b">
      <mixed line="52" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110069" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/069/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_17.cpp" language="C++" size="4071" checksum="a8bff74ab29bb6cca401738dce68819f4ffedf8e">
      <mixed line="52" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110070" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/070/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_18.cpp" language="C++" size="3806" checksum="62a451bb2dd65ea04c94276376855307d12bac79">
      <mixed line="50" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110071" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/071/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_21.cpp" language="C++" size="5462" checksum="7167f1b07a46fa1f8277ae582b0da4eb7de8db03">
      <mixed line="48" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110072" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/072/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_22a.cpp" language="C++" size="3698" checksum="b882f8d1eac18c2edfcbdd78dc83ca0ec0460ddd"></file>
    <file path="000/110/072/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_22b.cpp" language="C++" size="3824" checksum="486241a4ff5700a9cb703d1576263ca876a0e879">
      <mixed line="49" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110073" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/073/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_31.cpp" language="C++" size="4011" checksum="239749b9e4b4990724cb21a92ec15441743acee1">
      <mixed line="50" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110074" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 32 Data flow using two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/074/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_32.cpp" language="C++" size="4402" checksum="6ea288dd1ac18b93ba3b1054ee4590fe1bea9274">
      <mixed line="55" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110075" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/075/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_33.cpp" language="C++" size="4007" checksum="a8b9e7b1f5c84ed47b869a0eaba6e26d176d75fd">
      <mixed line="50" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110076" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/076/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_41.cpp" language="C++" size="3846" checksum="503ff24f70eaf1e026eedabe300182a82cffa0ce">
      <mixed line="43" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110077" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/077/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_42.cpp" language="C++" size="3938" checksum="f4393c8fcb2c2815f528dd85e073f6a7ede8a741">
      <mixed line="53" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110078" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/078/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_43.cpp" language="C++" size="3860" checksum="22bbd5dc01bdd8a3bee5d6bd866244a94d7dc7c9">
      <mixed line="52" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110079" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/079/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_44.cpp" language="C++" size="4095" checksum="24e9f0ac6f6c74b353bca54d9d0d5df9af07a76a">
      <mixed line="43" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110080" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/080/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_45.cpp" language="C++" size="4071" checksum="62e2bbab550d253c8b6d2131a7023cae8ac4cd28">
      <mixed line="48" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110081" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/081/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_51a.cpp" language="C++" size="2786" checksum="5e5a366f759a5ecd3e2e55b7286405b8cfead398"></file>
    <file path="000/110/081/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_51b.cpp" language="C++" size="2411" checksum="50b1c179851f00149e2763054d25bcf9294dc3a8">
      <mixed line="43" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110082" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/082/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_52a.cpp" language="C++" size="2783" checksum="4c0ff9732dbf446914413e0bb4cc0ecc87c82184"></file>
    <file path="000/110/082/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_52b.cpp" language="C++" size="1568" checksum="49c96e59ccbfc56a20a8fd0f8846e0e900c07b13"></file>
    <file path="000/110/082/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_52c.cpp" language="C++" size="2434" checksum="bda0aaf2f1a65c1e53be62ff9665cea6f2d61e8d">
      <mixed line="43" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110083" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/083/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_53a.cpp" language="C++" size="2810" checksum="178413f7ad53dc10c9314980bb8e00a799d99df1"></file>
    <file path="000/110/083/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_53b.cpp" language="C++" size="1595" checksum="d4270a4fe31c12e5dbdea6633f1cbb3f600527e5"></file>
    <file path="000/110/083/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_53c.cpp" language="C++" size="1595" checksum="8b6795718bce02693705ea4c99a28080d5409d84"></file>
    <file path="000/110/083/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_53d.cpp" language="C++" size="2461" checksum="54a868e42272f322aea891d17d431b2e4fb0e7c4">
      <mixed line="43" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110084" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/084/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_54a.cpp" language="C++" size="2811" checksum="f0a90290505cf1a9951213b8df8bfcfab0782609"></file>
    <file path="000/110/084/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_54b.cpp" language="C++" size="1596" checksum="40d52e2c446394a8f3dac2b5050f44bbb25d802d"></file>
    <file path="000/110/084/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_54c.cpp" language="C++" size="1596" checksum="6473ab7aa649ea4a5ba3ae043b6a57390e964b6b"></file>
    <file path="000/110/084/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_54d.cpp" language="C++" size="1596" checksum="f27be94a30412fbba58f358bf3489f3f32eec5ff"></file>
    <file path="000/110/084/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_54e.cpp" language="C++" size="2462" checksum="86a6843a38e0a10a6343cab87572e0af535da64f">
      <mixed line="43" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110085" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/085/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_61a.cpp" language="C++" size="3565" checksum="98d3ebb3262f0a370c3f7ead94e51f68d4766c7e">
      <mixed line="48" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
    <file path="000/110/085/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_61b.cpp" language="C++" size="1707" checksum="3cd16bf65c8fc587cc4609b1a1e1fd251bf45805"></file>
  </testcase>
  <testcase id="110086" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/086/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_62a.cpp" language="C++" size="3548" checksum="c007b5937f3ebba0ef64ad1a2732caf17c1ce139">
      <mixed line="48" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
    <file path="000/110/086/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_62b.cpp" language="C++" size="1657" checksum="0022a5b3c147f77d43eba873f238b512d0018845"></file>
  </testcase>
  <testcase id="110087" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/087/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_63a.cpp" language="C++" size="2762" checksum="37da3abb2c07dcb230dd16a55e74e21f8d38ba0f"></file>
    <file path="000/110/087/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_63b.cpp" language="C++" size="2521" checksum="aacb5077a967145948e0bd0e9c467f935e6ba932">
      <mixed line="44" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110088" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/088/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_64a.cpp" language="C++" size="2767" checksum="b03e0265e1412fa7ef5eefae243bf07cae111534"></file>
    <file path="000/110/088/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_64b.cpp" language="C++" size="3012" checksum="daa944a7d9e23a985fbe39c2153460f82ab1d06a">
      <mixed line="47" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110089" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/089/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_65a.cpp" language="C++" size="3004" checksum="0078da9d5f114d7efbf0dee64d8bc19fbc925626"></file>
    <file path="000/110/089/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_65b.cpp" language="C++" size="2453" checksum="8dd9bf9118308d0f6ff0430af920ecaaac29029c">
      <mixed line="43" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110090" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/090/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_66a.cpp" language="C++" size="2984" checksum="81e54c113c48f37ddc4ca4b8c2e56a6884ed8284"></file>
    <file path="000/110/090/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_66b.cpp" language="C++" size="2578" checksum="d3fee76d0aee23c7178210295252b9a04cadb468">
      <mixed line="45" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110091" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/091/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_67a.cpp" language="C++" size="3032" checksum="bf7257f194624ca3897b5bf6d5510066857d34b4"></file>
    <file path="000/110/091/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_67b.cpp" language="C++" size="2632" checksum="808151a3c0f20c28fcbb134cd34472698cf2e95f">
      <mixed line="49" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110092" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/092/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_68a.cpp" language="C++" size="2879" checksum="2a3171ef18e93e21681189d5e1c0b54c36de89e4"></file>
    <file path="000/110/092/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_68b.cpp" language="C++" size="2570" checksum="36bc34d1b65cd84e370ee6f4906c687e96583bed">
      <mixed line="48" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110093" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/093/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_72a.cpp" language="C++" size="3485" checksum="0b3a05585278a70856164e8c0246849270d6f781"></file>
    <file path="000/110/093/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_72b.cpp" language="C++" size="2646" checksum="ed180cd7b3578592354651cdd815350545439498">
      <mixed line="48" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110094" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/094/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_73a.cpp" language="C++" size="3250" checksum="1860be927c44614532ea8085af258d19ad1bd425"></file>
    <file path="000/110/094/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_73b.cpp" language="C++" size="2617" checksum="02b8cb21e325b443f257d8cb23ce806a762c3c05">
      <mixed line="47" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110095" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/095/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_74a.cpp" language="C++" size="3215" checksum="e86b0e0e3500dbf190a0a353f6f6484739949ca0"></file>
    <file path="000/110/095/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_74b.cpp" language="C++" size="2625" checksum="925c32c8c41ceac7f542aec9e174b3d621cd8b0a">
      <mixed line="48" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase id="110096" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/096/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_81.h" language="C" size="1921" checksum="830db60ef7d913cf0932f682ed9381c2f229930e"></file>
    <file path="000/110/096/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_81_bad.cpp" language="C++" size="1539" checksum="cd0752f7e7af56bf45f079d765d6e542fc1e8a01">
      <mixed line="37" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
    <file path="000/110/096/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_81_goodB2G.cpp" language="C++" size="1435" checksum="956b6ad88b98c8b42e5f9f32e0d139593a92edd5"></file>
    <file path="000/110/096/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_81_goodG2B.cpp" language="C++" size="1553" checksum="bd998b7a392c45d01a6ca1bfd6c5400eea65fe4c"></file>
    <file path="000/110/096/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_81a.cpp" language="C++" size="3144" checksum="1031c9c2b7e595bf0969fd176e6632c6e7541897"></file>
  </testcase>
  <testcase id="110097" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/097/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_82.h" language="C" size="1895" checksum="4f9d8b6e01451d8d120e187293fc8a45787cfd79"></file>
    <file path="000/110/097/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_82_bad.cpp" language="C++" size="1531" checksum="e248aceeaff8db4bf7d89a8e760fb03bf4722123">
      <mixed line="37" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
    <file path="000/110/097/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_82_goodB2G.cpp" language="C++" size="1427" checksum="cfab35f6d9c0ca02ad1005a0f204c0954c1c4c71"></file>
    <file path="000/110/097/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_82_goodG2B.cpp" language="C++" size="1545" checksum="fdb787336d4a2ec01510abe227c901cc150de117"></file>
    <file path="000/110/097/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_82a.cpp" language="C++" size="3223" checksum="57549a9a6315493a47e7510298d9279ca1721800"></file>
  </testcase>
  <testcase id="110098" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/098/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_83.h" language="C" size="2050" checksum="2e10bb438fb040d8979e7143f3a5d4b53104c498"></file>
    <file path="000/110/098/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_83_bad.cpp" language="C++" size="1903" checksum="0b7b0f46e2f244555e634418b5e9e83dcdc85c65">
      <mixed line="44" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
    <file path="000/110/098/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_83_goodB2G.cpp" language="C++" size="1811" checksum="c1ea5b0149c6009a5b6fddfe3770b82165f0dae5"></file>
    <file path="000/110/098/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_83_goodG2B.cpp" language="C++" size="1929" checksum="9fff30c97361a3db82f52488c1d711d7be316bdf"></file>
    <file path="000/110/098/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_83a.cpp" language="C++" size="2542" checksum="d4317f988c07f1060627c1b8bfbb57dddf591193"></file>
  </testcase>
  <testcase id="110099" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/099/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_84.h" language="C" size="2075" checksum="9fededa00337e74ea188842f938e3b5d9e355ec5"></file>
    <file path="000/110/099/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_84_bad.cpp" language="C++" size="1928" checksum="abc66424e6367bf7fd972590bfb50f5df7ae2bdc">
      <mixed line="44" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
    <file path="000/110/099/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_84_goodB2G.cpp" language="C++" size="1836" checksum="144296caf73060530586ea37d3e2dd54b4bbb35d"></file>
    <file path="000/110/099/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_84_goodG2B.cpp" language="C++" size="1954" checksum="3d81dbf0e74cf7ca7eb5d900af0d2265614fed35"></file>
    <file path="000/110/099/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_84a.cpp" language="C++" size="2898" checksum="10b6fd4405c7c241d54be247bf8a097b7e44d8c8"></file>
  </testcase>
  <testcase id="110294" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/294/CWE676_Use_of_Potentially_Dangerous_Function__basic_01.cpp" language="C++" size="2275" checksum="8b35c9034f12ea9e3036eb6dfa4729440b2f2de7">
      <mixed line="35" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110295" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/295/CWE676_Use_of_Potentially_Dangerous_Function__basic_02.cpp" language="C++" size="3025" checksum="5921ba6841d0adeabbc8046be53effda6bb0efc6">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110296" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/296/CWE676_Use_of_Potentially_Dangerous_Function__basic_03.cpp" language="C++" size="3046" checksum="9459825260361fff3b65f4b284751adee644b4a6">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110297" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/297/CWE676_Use_of_Potentially_Dangerous_Function__basic_04.cpp" language="C++" size="3411" checksum="a36efe98acf89b6d5dca3f59c923aa9d3c2ffd91">
      <mixed line="43" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110298" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/298/CWE676_Use_of_Potentially_Dangerous_Function__basic_05.cpp" language="C++" size="3382" checksum="dfbff59faa5ba43382227b81c1615ff006b9210c">
      <mixed line="43" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110299" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/299/CWE676_Use_of_Potentially_Dangerous_Function__basic_06.cpp" language="C++" size="3352" checksum="3f4328297844ffa80be52473dc8ba662e3da764e">
      <mixed line="42" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110300" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/300/CWE676_Use_of_Potentially_Dangerous_Function__basic_07.cpp" language="C++" size="3332" checksum="c44a6a40adbcb15479944e0fa3d4b059a3ae02a1">
      <mixed line="42" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110301" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/301/CWE676_Use_of_Potentially_Dangerous_Function__basic_08.cpp" language="C++" size="3432" checksum="e013c033085bb642d274c05c6b2f3bd3a08dbddc">
      <mixed line="50" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110302" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/302/CWE676_Use_of_Potentially_Dangerous_Function__basic_09.cpp" language="C++" size="3140" checksum="738acd949e48371673aaaa8fa8c61899fb4b9f88">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110303" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/303/CWE676_Use_of_Potentially_Dangerous_Function__basic_10.cpp" language="C++" size="3091" checksum="ec76a2f6f680a654440dba68e957e4d6527d3c7e">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110304" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/304/CWE676_Use_of_Potentially_Dangerous_Function__basic_11.cpp" language="C++" size="3154" checksum="5f2a3fb61b9d47ef775fc8054f37ccf82153d171">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110305" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/305/CWE676_Use_of_Potentially_Dangerous_Function__basic_12.cpp" language="C++" size="3202" checksum="f9ea9f23e922d61bf5b78462f134c6142b5691cc">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110306" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/306/CWE676_Use_of_Potentially_Dangerous_Function__basic_13.cpp" language="C++" size="3158" checksum="bd9a48562cfa9ef149bc3a472e7d3afe38720712">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110307" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/307/CWE676_Use_of_Potentially_Dangerous_Function__basic_14.cpp" language="C++" size="3109" checksum="cdd5cbe37516560ba2ec78ea733dc8dad9b4ed25">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110308" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/308/CWE676_Use_of_Potentially_Dangerous_Function__basic_15.cpp" language="C++" size="3314" checksum="19bf5346330be9a9b536276f45e236ef16452243">
      <mixed line="38" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110309" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/309/CWE676_Use_of_Potentially_Dangerous_Function__basic_16.cpp" language="C++" size="2503" checksum="8ced5b6bcc445e7f4611acb94fb5a8c7223592c1">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110310" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/310/CWE676_Use_of_Potentially_Dangerous_Function__basic_17.cpp" language="C++" size="2522" checksum="b0bff43e0e5a8e699ef199b440576443416c92d8">
      <mixed line="38" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110311" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/311/CWE676_Use_of_Potentially_Dangerous_Function__basic_18.cpp" language="C++" size="2399" checksum="ba0823db4a6098c44641fd601f0e855c420cc58f">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase id="110942" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/942/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_01.c" language="C" size="2152" checksum="964edc0ba09596031ddc7bd5547869fec3900a60">
      <mixed line="28" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110943" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/943/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_02.c" language="C" size="2795" checksum="5b2d902ff1339a954760286da5d75a42f40cfd0c">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110944" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/944/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_03.c" language="C" size="2816" checksum="67d033b74765da61ebb4b33755213e3ee9a910e8">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110945" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/945/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_04.c" language="C" size="3181" checksum="a348158b645d64fd8a7005748a18f8562f61c62d">
      <mixed line="36" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110946" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/946/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_05.c" language="C" size="3152" checksum="8a71136c7d543574df80a9e14a2ed665d47b5f76">
      <mixed line="36" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110947" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/947/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_06.c" language="C" size="3122" checksum="095e66c97d9253e4afc6a77b9b3b5b37657800cf">
      <mixed line="35" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110948" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/948/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_07.c" language="C" size="3102" checksum="f18e9c61959872de1274420c9af101b4beb3cd64">
      <mixed line="35" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110949" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/949/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_08.c" language="C" size="3202" checksum="072e7662a6c6efd615294125d6889ae6bfa87949">
      <mixed line="43" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110950" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/950/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_09.c" language="C" size="2910" checksum="dd477423b4700be6a9606030bc292ccbf6dd0716">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110951" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/951/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_10.c" language="C" size="2861" checksum="7ce64e9171f5a2d6d23dc0d92e55414d12b04fab">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110952" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/952/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_11.c" language="C" size="2924" checksum="6933ff39cedd9376f3c1b7737b36f2147ff02534">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110953" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/953/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_12.c" language="C" size="2881" checksum="7882ecc26b6f22ed09ca0d4d902b115a4cd6725a">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110954" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/954/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_13.c" language="C" size="2928" checksum="88590b74612350a365b58abcbeecea64c6d2ef0a">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110955" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/955/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_14.c" language="C" size="2879" checksum="e6b3976341323bb678afa5b744a958d48d56e511">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110956" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/956/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_15.c" language="C" size="3108" checksum="2b1eedfadb75cfce4b6f4084568394f44c1be315">
      <mixed line="31" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110957" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/957/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_16.c" language="C" size="2357" checksum="fba872a8c5c35aeacf6084e0a8910878d802ccf0">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110958" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/958/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_17.c" language="C" size="2382" checksum="540b850a4f4b508d147d315aad4d837ef4dc0ec8">
      <mixed line="31" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110959" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/959/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_18.c" language="C" size="2276" checksum="9b57acd67551ce2ba7e6a950970ba917b8be745d">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase id="110960" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/960/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_01.c" language="C" size="2173" checksum="052736e43b9655888f2e158dcd20cc9ab23eaa75">
      <mixed line="28" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110961" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/961/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_02.c" language="C" size="2824" checksum="578c324210f1e3ecfae785bab06cd19ed74d62fa">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110962" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/962/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_03.c" language="C" size="2845" checksum="979bb618f9773dca9df3568be0b6a7dedb7827e5">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110963" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/963/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_04.c" language="C" size="3210" checksum="8fbcbbc1c5a0541d2c02b06e343d09854a9e5f0e">
      <mixed line="36" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110964" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/964/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_05.c" language="C" size="3181" checksum="c12f92b6bdd04f61eb7745631c730b8fa70648b0">
      <mixed line="36" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110965" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/965/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_06.c" language="C" size="3151" checksum="96516ff195fc7baaba26329fe11f0c0c8f881be8">
      <mixed line="35" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110966" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/966/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_07.c" language="C" size="3131" checksum="f5ab9e3cfbbb77e5cb9e296703d860d8c03bae96">
      <mixed line="35" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110967" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/967/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_08.c" language="C" size="3231" checksum="f46ce821f97cfddecb2a415562f3d84241a869f6">
      <mixed line="43" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110968" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/968/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_09.c" language="C" size="2939" checksum="c64c7ef95a52cc32335978b71275024769e4ad9b">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110969" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/969/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_10.c" language="C" size="2890" checksum="b82569a11d610b0720c75d480c190be3973f27d3">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110970" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/970/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c" language="C" size="2953" checksum="efd06d91bd3062562dca7f4053bcfae9dc7ac789">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110971" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/971/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_12.c" language="C" size="2910" checksum="781c3ef73b276e990daef9f08e0f7915c5bfbdb0">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110972" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/972/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_13.c" language="C" size="2957" checksum="f6fbd5091611fe045fdfe361f67a4df71965cda1">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110973" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/973/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_14.c" language="C" size="2908" checksum="bd54ab6401aa0b9668e55d318d1960706a7c852b">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110974" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/974/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_15.c" language="C" size="3125" checksum="44116e8f6a5c21ee631df1c638c974f4766d578d">
      <mixed line="31" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110975" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/975/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c" language="C" size="2386" checksum="b1e874bafd3ee1b25aadce8f7932eafc2f7348f0">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110976" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/976/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_17.c" language="C" size="2411" checksum="0c39a210bd7f9e0aa985fd19e410a6e62a3ca1b5">
      <mixed line="31" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="110977" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/110/977/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_18.c" language="C" size="2297" checksum="5f4c4364e8ebea787d0f05309bc0c61a767a2bde">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase id="111938" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/938/CWE758_Undefined_Behavior__char_alloca_use_01.c" language="C" size="1983" checksum="58b1acb2c24644f79586a69a8f4a3eb47b09d907">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111939" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/939/CWE758_Undefined_Behavior__char_alloca_use_02.c" language="C" size="2754" checksum="7ffd0ef9fa40481ec0587cf2978e11932fc070d0">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111940" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/940/CWE758_Undefined_Behavior__char_alloca_use_03.c" language="C" size="2775" checksum="9a48a2a77a94da36116b71926edadcf0486237dc">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111941" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/941/CWE758_Undefined_Behavior__char_alloca_use_04.c" language="C" size="3140" checksum="5e18c977502d1778d67c98f1faf6623992a8b792">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111942" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/942/CWE758_Undefined_Behavior__char_alloca_use_05.c" language="C" size="3111" checksum="44a514f6a0296fe78d3dec73339e7eef2da18ed4">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111943" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/943/CWE758_Undefined_Behavior__char_alloca_use_06.c" language="C" size="3081" checksum="d075b4829a806a5bd6269508762774a1cee87d75">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111944" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/944/CWE758_Undefined_Behavior__char_alloca_use_07.c" language="C" size="3061" checksum="c1ff98b64a43e0f21a9b4a7a465370ca563f7695">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111945" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/945/CWE758_Undefined_Behavior__char_alloca_use_08.c" language="C" size="3161" checksum="2be6f3975a532446d9fa710f50cd744046955cfc">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111946" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/946/CWE758_Undefined_Behavior__char_alloca_use_09.c" language="C" size="2869" checksum="b002ff6daa4c55a98f9a4768003391fd909be82e">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111947" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/947/CWE758_Undefined_Behavior__char_alloca_use_10.c" language="C" size="2820" checksum="b06eabb7d5e28dc86af4342bf44e01afa5aaeb45">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111948" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/948/CWE758_Undefined_Behavior__char_alloca_use_11.c" language="C" size="2883" checksum="b0c0dc42c13e1ed891f534fa853b121ad544ce21">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111949" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/949/CWE758_Undefined_Behavior__char_alloca_use_12.c" language="C" size="2956" checksum="13f7ff0a30ae13d0a7e5bbf265631af8a5cd9327">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111950" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/950/CWE758_Undefined_Behavior__char_alloca_use_13.c" language="C" size="2887" checksum="4d9a4efc159d6f1544890d08f8f652afed55ad8b">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111951" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/951/CWE758_Undefined_Behavior__char_alloca_use_14.c" language="C" size="2838" checksum="2f60a251dfe905843d3a20564fdf1bffa403a2d1">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111952" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/952/CWE758_Undefined_Behavior__char_alloca_use_15.c" language="C" size="3039" checksum="7bd8c821e9792bc0a3ec88ef4f3256cfc69e85c1">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111953" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/953/CWE758_Undefined_Behavior__char_alloca_use_16.c" language="C" size="2200" checksum="cec335a39cd3a52e1a71c671e7a552ab75f192b4">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111954" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/954/CWE758_Undefined_Behavior__char_alloca_use_17.c" language="C" size="2225" checksum="d2b0c0c5f6dfc231e696b1bbec56b91365c83f3c">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111955" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/955/CWE758_Undefined_Behavior__char_alloca_use_18.c" language="C" size="2107" checksum="05416b360fadd3907bbf2ecf970452685b52f4ff">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111956" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/956/CWE758_Undefined_Behavior__char_malloc_use_01.c" language="C" size="2031" checksum="05a56b56c4b26cb8af074ca61fabaed3db131fb0">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111957" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/957/CWE758_Undefined_Behavior__char_malloc_use_02.c" language="C" size="2838" checksum="17661622c03c3b858a48fc93fc39fb20c940a930">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111958" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/958/CWE758_Undefined_Behavior__char_malloc_use_03.c" language="C" size="2859" checksum="862c4566a34bebfd50ce7365b9077ad9aadbd412">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111959" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/959/CWE758_Undefined_Behavior__char_malloc_use_04.c" language="C" size="3224" checksum="a1c2118fab04880094e0be7cf1fdefcacd3ecf65">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111960" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/960/CWE758_Undefined_Behavior__char_malloc_use_05.c" language="C" size="3195" checksum="d5f457ca1a23cbce028b3ba2f1279cd062d4e114">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111961" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/961/CWE758_Undefined_Behavior__char_malloc_use_06.c" language="C" size="3165" checksum="647d128c4b360478113879049f99d08f1e27059a">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111962" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/962/CWE758_Undefined_Behavior__char_malloc_use_07.c" language="C" size="3145" checksum="363a8bfccd8420019a6c0901fcdc3402f56f9401">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111963" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/963/CWE758_Undefined_Behavior__char_malloc_use_08.c" language="C" size="3245" checksum="849a1fdeeee719a0664b21503ee6c97b8333c793">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111964" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/964/CWE758_Undefined_Behavior__char_malloc_use_09.c" language="C" size="2953" checksum="a7767e2ec771b4de42061b87bf1ef0c78923a2f3">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111965" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/965/CWE758_Undefined_Behavior__char_malloc_use_10.c" language="C" size="2904" checksum="8b70cb579a6fbdf927c22a51a4120dce308a1211">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111966" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/966/CWE758_Undefined_Behavior__char_malloc_use_11.c" language="C" size="2967" checksum="57da0fe6970eb5142061f1df88354169575baa9f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111967" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/967/CWE758_Undefined_Behavior__char_malloc_use_12.c" language="C" size="3068" checksum="0771c8afbf4b92299ee90fec21a850ddd726ef40">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111968" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/968/CWE758_Undefined_Behavior__char_malloc_use_13.c" language="C" size="2971" checksum="4dc96e0f600090a8a84ccb6151d4357b6a0811f8">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111969" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/969/CWE758_Undefined_Behavior__char_malloc_use_14.c" language="C" size="2922" checksum="0ccea7909d684f19f711ff25c090717fa1c2401b">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111970" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/970/CWE758_Undefined_Behavior__char_malloc_use_15.c" language="C" size="3111" checksum="54cfc0e253bcc9ee2c58be7c971eb12f58f70f81">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111971" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/971/CWE758_Undefined_Behavior__char_malloc_use_16.c" language="C" size="2256" checksum="f65f1463671707230cd58fdb0bb5810bad59ec42">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111972" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/972/CWE758_Undefined_Behavior__char_malloc_use_17.c" language="C" size="2281" checksum="c2d1438ef57735110daccc25f00a849d08c71379">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111973" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/973/CWE758_Undefined_Behavior__char_malloc_use_18.c" language="C" size="2155" checksum="cffaaf4c7c6c5e401fa81b1a7fd093d345156a58">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111974" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/974/CWE758_Undefined_Behavior__char_new_use_01.cpp" language="C++" size="1964" checksum="979f5b064639de3c554879de91cc7ce8d048f743">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111975" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/975/CWE758_Undefined_Behavior__char_new_use_02.cpp" language="C++" size="2752" checksum="dbad88722a504e3a7b780070992dde0f1a95c596">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111976" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/976/CWE758_Undefined_Behavior__char_new_use_03.cpp" language="C++" size="2773" checksum="2acf5baeade771d3944cfdad4c1aac77dbd4841f">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111977" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/977/CWE758_Undefined_Behavior__char_new_use_04.cpp" language="C++" size="3138" checksum="4603eb410ca43d7d1c316c57d118d94162a390a6">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111978" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/978/CWE758_Undefined_Behavior__char_new_use_05.cpp" language="C++" size="3109" checksum="ab89bcd790a09808a8be021a5c3d64b6e57f2ced">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111979" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/979/CWE758_Undefined_Behavior__char_new_use_06.cpp" language="C++" size="3079" checksum="d348fe962427ec6b2422149c1fbe37c363553584">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111980" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/980/CWE758_Undefined_Behavior__char_new_use_07.cpp" language="C++" size="3059" checksum="426dab92f0daee1616138ebad97ceb9ddf85b4c5">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111981" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/981/CWE758_Undefined_Behavior__char_new_use_08.cpp" language="C++" size="3159" checksum="bb4040ddc1023a013ee64f2273c6a80b4e11c0db">
      <mixed line="42" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111982" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/982/CWE758_Undefined_Behavior__char_new_use_09.cpp" language="C++" size="2867" checksum="d0497264d8b79e2a0a57504f3ab4dd7b8293838a">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111983" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/983/CWE758_Undefined_Behavior__char_new_use_10.cpp" language="C++" size="2818" checksum="e9a385c9e2727e861c68e00db8876a4f5a17a3f7">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111984" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/984/CWE758_Undefined_Behavior__char_new_use_11.cpp" language="C++" size="2881" checksum="49b5c89f3185e51e82cda9b6175b5def392bae32">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111985" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/985/CWE758_Undefined_Behavior__char_new_use_12.cpp" language="C++" size="2963" checksum="994b29768c2ae651a49345d9d2642828c91524a0">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111986" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/986/CWE758_Undefined_Behavior__char_new_use_13.cpp" language="C++" size="2885" checksum="a75ede82059b7491e499091b73a4482303ed480c">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111987" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/987/CWE758_Undefined_Behavior__char_new_use_14.cpp" language="C++" size="2836" checksum="9216d9b7b806968f644176fed419408fc8ed1a68">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111988" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/988/CWE758_Undefined_Behavior__char_new_use_15.cpp" language="C++" size="3025" checksum="16d052dbf5256482ef46bef17443dfd1b0e1cf64">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111989" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/989/CWE758_Undefined_Behavior__char_new_use_16.cpp" language="C++" size="2196" checksum="58e426dd06b6cb8f5935b254727e39302648921c">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111990" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/990/CWE758_Undefined_Behavior__char_new_use_17.cpp" language="C++" size="2215" checksum="8a69d40f7ab43bd510fa87882de1ed61a02e2ca3">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111991" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/991/CWE758_Undefined_Behavior__char_new_use_18.cpp" language="C++" size="2088" checksum="07efe2d6083584efa9aad911ae3ba6789ee94aad">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111992" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/992/CWE758_Undefined_Behavior__char_pointer_alloca_use_01.c" language="C" size="2034" checksum="9f61a76cf9ca8954818b3cc090778afa6dd6697f">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111993" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/993/CWE758_Undefined_Behavior__char_pointer_alloca_use_02.c" language="C" size="2815" checksum="447c98a97803284814cf355f33042cc11696f5f4">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111994" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/994/CWE758_Undefined_Behavior__char_pointer_alloca_use_03.c" language="C" size="2836" checksum="00b4198ffc0a4891061f6ea7b3ccf0dc427b302d">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111995" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/995/CWE758_Undefined_Behavior__char_pointer_alloca_use_04.c" language="C" size="3201" checksum="78bac9b3753dc734a9cb1e1a2b0aa3a2ab364f9a">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111996" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/996/CWE758_Undefined_Behavior__char_pointer_alloca_use_05.c" language="C" size="3172" checksum="88edeeda9ff0b11dd68bd1715059000254a7c9de">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111997" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/997/CWE758_Undefined_Behavior__char_pointer_alloca_use_06.c" language="C" size="3142" checksum="efeb52f7cd9d57c9a320b6b27ce789d136e73271">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111998" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/998/CWE758_Undefined_Behavior__char_pointer_alloca_use_07.c" language="C" size="3122" checksum="7f87077601c718576fcd91e7060b0bb981d1e254">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="111999" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/111/999/CWE758_Undefined_Behavior__char_pointer_alloca_use_08.c" language="C" size="3222" checksum="60f253861f254ef1e1241e2987cb46fff0ba8dd9">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112000" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/000/CWE758_Undefined_Behavior__char_pointer_alloca_use_09.c" language="C" size="2930" checksum="fdd92f3b293c270dbe22a3a4072f8de0826c16a0">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112001" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/001/CWE758_Undefined_Behavior__char_pointer_alloca_use_10.c" language="C" size="2881" checksum="50f304b5995ba15b050c703fd8b7420f80d6689e">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112002" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/002/CWE758_Undefined_Behavior__char_pointer_alloca_use_11.c" language="C" size="2944" checksum="4de6e84fee8c58f0cdec4f8d31f7e287c73496cd">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112003" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/003/CWE758_Undefined_Behavior__char_pointer_alloca_use_12.c" language="C" size="3027" checksum="5357d01624609d7db74fb542aaac12d16437c1c0">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112004" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/004/CWE758_Undefined_Behavior__char_pointer_alloca_use_13.c" language="C" size="2948" checksum="80b415d014f255335dfe86a19ec15b30b9717674">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112005" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/005/CWE758_Undefined_Behavior__char_pointer_alloca_use_14.c" language="C" size="2899" checksum="5f137a462f3619bc35f0ade9e5c12884eac1f815">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112006" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/006/CWE758_Undefined_Behavior__char_pointer_alloca_use_15.c" language="C" size="3100" checksum="61ef4f16ea2f799abb346ed771949276b5bed47e">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112007" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/007/CWE758_Undefined_Behavior__char_pointer_alloca_use_16.c" language="C" size="2251" checksum="6eb875b800746693a8ac652acccff14ad9374688">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112008" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/008/CWE758_Undefined_Behavior__char_pointer_alloca_use_17.c" language="C" size="2276" checksum="fb2e14f5ed170f2c2d51678091f80018a664e7d0">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112009" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/009/CWE758_Undefined_Behavior__char_pointer_alloca_use_18.c" language="C" size="2158" checksum="0eb5d211816235199e1f70c128ca4d73d9bb6678">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112010" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/010/CWE758_Undefined_Behavior__char_pointer_malloc_use_01.c" language="C" size="2082" checksum="c4adb2966eedc97c2f4e4083a1c33b9832fd0815">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112011" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/011/CWE758_Undefined_Behavior__char_pointer_malloc_use_02.c" language="C" size="2899" checksum="3cc38f990fbef1a0335ffdf8ab1fc4731f0a9d03">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112012" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/012/CWE758_Undefined_Behavior__char_pointer_malloc_use_03.c" language="C" size="2920" checksum="71bdfcacf476c989e2fbf073adbfc564e5e66f6a">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112013" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/013/CWE758_Undefined_Behavior__char_pointer_malloc_use_04.c" language="C" size="3285" checksum="e7a8e1b6441a208d9c0656147fc33a7906809e0e">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112014" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/014/CWE758_Undefined_Behavior__char_pointer_malloc_use_05.c" language="C" size="3256" checksum="5c7d7a640bafb9c38cff23f309eee0af11496327">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112015" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/015/CWE758_Undefined_Behavior__char_pointer_malloc_use_06.c" language="C" size="3226" checksum="213b8ab3dddd4a246029f89d5b06ed73be5259d4">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112016" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/016/CWE758_Undefined_Behavior__char_pointer_malloc_use_07.c" language="C" size="3206" checksum="afcf6409373498fe000ee46a265616a2bfb67792">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112017" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/017/CWE758_Undefined_Behavior__char_pointer_malloc_use_08.c" language="C" size="3306" checksum="f037e51be078223ba95a2ca0938b19bd884fb07c">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112018" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/018/CWE758_Undefined_Behavior__char_pointer_malloc_use_09.c" language="C" size="3014" checksum="b32fa3e49199ee8e71dd911b411d55f0e90103fa">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112019" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/019/CWE758_Undefined_Behavior__char_pointer_malloc_use_10.c" language="C" size="2965" checksum="c6d320192c629a096b9fc69e6e7a35dba7676e48">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112020" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/020/CWE758_Undefined_Behavior__char_pointer_malloc_use_11.c" language="C" size="3028" checksum="2667080feb2d89df2c04f64f83a08e0e63055f20">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112021" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/021/CWE758_Undefined_Behavior__char_pointer_malloc_use_12.c" language="C" size="3139" checksum="88f6935d447883351b56376d4f8741543da5e2e7">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112022" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/022/CWE758_Undefined_Behavior__char_pointer_malloc_use_13.c" language="C" size="3032" checksum="7e19fa20ea22954e01b04612e3a6192d9b859df4">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112023" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/023/CWE758_Undefined_Behavior__char_pointer_malloc_use_14.c" language="C" size="2983" checksum="f2c1c1e22416f8e347de16fa9cd4ffb14920150b">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112024" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/024/CWE758_Undefined_Behavior__char_pointer_malloc_use_15.c" language="C" size="3172" checksum="4093eab98f0bef704f4b9a444eda09aec07fe3a0">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112025" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/025/CWE758_Undefined_Behavior__char_pointer_malloc_use_16.c" language="C" size="2307" checksum="7d0699050262d12de675e92d270b4de03df644c6">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112026" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/026/CWE758_Undefined_Behavior__char_pointer_malloc_use_17.c" language="C" size="2332" checksum="839830d7e10a11ddb351913555c95c6c48802e90">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112027" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/027/CWE758_Undefined_Behavior__char_pointer_malloc_use_18.c" language="C" size="2206" checksum="56e64aa44828a6198c2d8674b130a2ecd7335abe">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112028" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/028/CWE758_Undefined_Behavior__char_pointer_new_use_01.cpp" language="C++" size="1995" checksum="0ea0c14f42cd32e82dd83ac496bda211eef15389">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112029" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/029/CWE758_Undefined_Behavior__char_pointer_new_use_02.cpp" language="C++" size="2791" checksum="6f71534ff1e2af41c520bf242f0dcd546c887e72">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112030" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/030/CWE758_Undefined_Behavior__char_pointer_new_use_03.cpp" language="C++" size="2812" checksum="d3ffe34684a47291dcf0644b3e8d3cdb85c9652c">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112031" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/031/CWE758_Undefined_Behavior__char_pointer_new_use_04.cpp" language="C++" size="3177" checksum="5ec7b96b17d57ee94f98249573ab6a5b133f1c75">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112032" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/032/CWE758_Undefined_Behavior__char_pointer_new_use_05.cpp" language="C++" size="3148" checksum="34ed21c19393b9df6ee9f2ec5341d3777d717324">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112033" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/033/CWE758_Undefined_Behavior__char_pointer_new_use_06.cpp" language="C++" size="3118" checksum="187bdd40b7af2a0933dee0591097187d53e1fd4d">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112034" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/034/CWE758_Undefined_Behavior__char_pointer_new_use_07.cpp" language="C++" size="3098" checksum="71af9450670ceab0fb6c84103b042e42a4429fa8">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112035" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/035/CWE758_Undefined_Behavior__char_pointer_new_use_08.cpp" language="C++" size="3198" checksum="d48cd9c94570c35d05180292da6611ad5f8f999d">
      <mixed line="42" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112036" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/036/CWE758_Undefined_Behavior__char_pointer_new_use_09.cpp" language="C++" size="2906" checksum="ca0d27a051e68ff7e8b5ac4667ae02c2d92b6c02">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112037" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/037/CWE758_Undefined_Behavior__char_pointer_new_use_10.cpp" language="C++" size="2857" checksum="ea13353ae97c75a54fbb11d812d0c5687145a8d5">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112038" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/038/CWE758_Undefined_Behavior__char_pointer_new_use_11.cpp" language="C++" size="2920" checksum="4ecd72cb29267c5d3560f6fa992f541be78b471f">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112039" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/039/CWE758_Undefined_Behavior__char_pointer_new_use_12.cpp" language="C++" size="3010" checksum="cf48738f9de4d1df4a73e3c69d9c77d4178778c5">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112040" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/040/CWE758_Undefined_Behavior__char_pointer_new_use_13.cpp" language="C++" size="2924" checksum="86513592165406640d45284aac83e24dd0618d93">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112041" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/041/CWE758_Undefined_Behavior__char_pointer_new_use_14.cpp" language="C++" size="2875" checksum="ee8e28b06d4bcd048f2b8a950a9b77beadd65b21">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112042" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/042/CWE758_Undefined_Behavior__char_pointer_new_use_15.cpp" language="C++" size="3064" checksum="69febec546e9d57c47ee6aec5271056b9668b6ef">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112043" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/043/CWE758_Undefined_Behavior__char_pointer_new_use_16.cpp" language="C++" size="2227" checksum="3f7d66c33e5fa1fa0b7dcde472f851a603ea22d2">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112044" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/044/CWE758_Undefined_Behavior__char_pointer_new_use_17.cpp" language="C++" size="2246" checksum="d384fa7100a0de84d214d86525d6de0de555c07b">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112045" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/045/CWE758_Undefined_Behavior__char_pointer_new_use_18.cpp" language="C++" size="2119" checksum="cf8db76685833be650043ddc94c3f2062237584b">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112046" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/046/CWE758_Undefined_Behavior__class_new_use_01.cpp" language="C++" size="2138" checksum="771bcc10b01d60495d0e547a4b17557217d33f80">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112047" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/047/CWE758_Undefined_Behavior__class_new_use_02.cpp" language="C++" size="3054" checksum="00e847f8b86d08b029f6e30c8841539e02e53442">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112048" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/048/CWE758_Undefined_Behavior__class_new_use_03.cpp" language="C++" size="3075" checksum="18b64c948ddab4a0dff22f3efbaf74c8de1f9047">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112049" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/049/CWE758_Undefined_Behavior__class_new_use_04.cpp" language="C++" size="3440" checksum="03b17e110db65ebf6313dd71b6baa3bc1a67d524">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112050" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/050/CWE758_Undefined_Behavior__class_new_use_05.cpp" language="C++" size="3411" checksum="51cd5369fa03296809ee5c80a0698c9d6b0966a6">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112051" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/051/CWE758_Undefined_Behavior__class_new_use_06.cpp" language="C++" size="3381" checksum="e8adfde0d5ecead51c2643fc7a13f45aa92628d7">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112052" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/052/CWE758_Undefined_Behavior__class_new_use_07.cpp" language="C++" size="3361" checksum="5b9aafe44a9c349f07f1133d5e9a9eb8b45b1636">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112053" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/053/CWE758_Undefined_Behavior__class_new_use_08.cpp" language="C++" size="3461" checksum="24f64e2b1ba563e9fc5e50b76122d4b36b27eae1">
      <mixed line="42" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112054" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/054/CWE758_Undefined_Behavior__class_new_use_09.cpp" language="C++" size="3169" checksum="d12443787d67fed9e8157e338acc793bee8990af">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112055" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/055/CWE758_Undefined_Behavior__class_new_use_10.cpp" language="C++" size="3120" checksum="db5d19d4f2bf23651958b645bdac1f56ef0922e5">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112056" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/056/CWE758_Undefined_Behavior__class_new_use_11.cpp" language="C++" size="3183" checksum="dbfd740b69a08bed1455e7c31056e5ba16675ea9">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112057" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/057/CWE758_Undefined_Behavior__class_new_use_12.cpp" language="C++" size="3381" checksum="df7f6be4136aa00b8fccf851672cc5013517117b">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112058" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/058/CWE758_Undefined_Behavior__class_new_use_13.cpp" language="C++" size="3187" checksum="35b5db8c7a0c8b199db68b7d475ab7283cde65eb">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112059" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/059/CWE758_Undefined_Behavior__class_new_use_14.cpp" language="C++" size="3138" checksum="79e56dcefc73216232b76a9874d8e2b82d2f25a5">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112060" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/060/CWE758_Undefined_Behavior__class_new_use_15.cpp" language="C++" size="3307" checksum="394bf5aebe42a8b963d3f037f903c636e32c2807">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112061" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/061/CWE758_Undefined_Behavior__class_new_use_16.cpp" language="C++" size="2382" checksum="ed78f59bf19e2f8a249685264fb5e7a7672082ce">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112062" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/062/CWE758_Undefined_Behavior__class_new_use_17.cpp" language="C++" size="2401" checksum="ff7d77d7223785bbd9a90594fb854d5abd50a819">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112063" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/063/CWE758_Undefined_Behavior__class_new_use_18.cpp" language="C++" size="2262" checksum="a36748d70bdaf3eb7df4f063259d88133dbf4e6f">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112064" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/064/CWE758_Undefined_Behavior__class_pointer_new_use_01.cpp" language="C++" size="2283" checksum="a4a4f2806e527d67789c81ebf2c79e5e21b18758">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112065" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/065/CWE758_Undefined_Behavior__class_pointer_new_use_02.cpp" language="C++" size="3328" checksum="106aaf651df6e0f1e4c9a674af7c01138ee61b1b">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112066" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/066/CWE758_Undefined_Behavior__class_pointer_new_use_03.cpp" language="C++" size="3349" checksum="47279bc5445a93a35f67b475f6b561201d01fd02">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112067" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/067/CWE758_Undefined_Behavior__class_pointer_new_use_04.cpp" language="C++" size="3714" checksum="a003fe49e3c14f7289fa6377e7f1989cdf07c64f">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112068" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/068/CWE758_Undefined_Behavior__class_pointer_new_use_05.cpp" language="C++" size="3685" checksum="192d84b933f48eefefb4166ddb9371d575cd6faa">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112069" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/069/CWE758_Undefined_Behavior__class_pointer_new_use_06.cpp" language="C++" size="3655" checksum="c30ac0c9e357915919f951a8669cf7f01502ef54">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112070" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/070/CWE758_Undefined_Behavior__class_pointer_new_use_07.cpp" language="C++" size="3635" checksum="e97c3ad3e0688ec54fe2ee544432368498768a98">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112071" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/071/CWE758_Undefined_Behavior__class_pointer_new_use_08.cpp" language="C++" size="3735" checksum="46e8ddfb8beee38e2c598f511aaf7e599cb375b3">
      <mixed line="42" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112072" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/072/CWE758_Undefined_Behavior__class_pointer_new_use_09.cpp" language="C++" size="3443" checksum="82ab062c1c23e77f6d44c46a707b1a4f90382b43">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112073" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/073/CWE758_Undefined_Behavior__class_pointer_new_use_10.cpp" language="C++" size="3394" checksum="ac62bc2788743c926699f62a7166ee3622182cf0">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112074" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/074/CWE758_Undefined_Behavior__class_pointer_new_use_11.cpp" language="C++" size="3457" checksum="1ef5f9cfefb0ad7d4a0317cec1e39e813a469138">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112075" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/075/CWE758_Undefined_Behavior__class_pointer_new_use_12.cpp" language="C++" size="3776" checksum="a81743163ae77b8abb6cf852629a4c16913af4bc">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112076" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/076/CWE758_Undefined_Behavior__class_pointer_new_use_13.cpp" language="C++" size="3461" checksum="4d473f7d031167d05277743a1e069cc7974cf86d">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112077" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/077/CWE758_Undefined_Behavior__class_pointer_new_use_14.cpp" language="C++" size="3412" checksum="9640de8e56c43fc617b03fa01ab15ff6cc4641a0">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112078" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/078/CWE758_Undefined_Behavior__class_pointer_new_use_15.cpp" language="C++" size="3565" checksum="c4a1f687c60e3ba2c772ae2330235c5fa2ae2d9a">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112079" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/079/CWE758_Undefined_Behavior__class_pointer_new_use_16.cpp" language="C++" size="2535" checksum="9bfa9fcaca4a9bb33dce4f139181a9f333a76ab8">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112080" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/080/CWE758_Undefined_Behavior__class_pointer_new_use_17.cpp" language="C++" size="2554" checksum="bbe192811dd500018e7d7a59632748f8973f89df">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112081" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/081/CWE758_Undefined_Behavior__class_pointer_new_use_18.cpp" language="C++" size="2407" checksum="8e8bf32daed394cd13d4ea74bae653f819212446">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112082" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/082/CWE758_Undefined_Behavior__double_pointer_alloca_use_01.c" language="C" size="2189" checksum="1274b5e54099f581ca0455b43d82ee4a3e9cb522">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112083" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/083/CWE758_Undefined_Behavior__double_pointer_alloca_use_02.c" language="C" size="3116" checksum="ef383a24e06d6906d4a99ff6f30722c79a969082">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112084" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/084/CWE758_Undefined_Behavior__double_pointer_alloca_use_03.c" language="C" size="3137" checksum="8e23314ccc340a31834121140e69f4bc1832930d">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112085" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/085/CWE758_Undefined_Behavior__double_pointer_alloca_use_04.c" language="C" size="3502" checksum="c2c113c7857133bf75992aed898aeab6d8894043">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112086" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/086/CWE758_Undefined_Behavior__double_pointer_alloca_use_05.c" language="C" size="3473" checksum="c9e3f2cb329aa00c6cfb45d77fc54ee3d8d295b4">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112087" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/087/CWE758_Undefined_Behavior__double_pointer_alloca_use_06.c" language="C" size="3443" checksum="4b0ca33545348dc477d6960422c42ceb39be6d6f">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112088" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/088/CWE758_Undefined_Behavior__double_pointer_alloca_use_07.c" language="C" size="3423" checksum="cbf55464239bc4390defae8ccbd45705d457ce6f">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112089" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/089/CWE758_Undefined_Behavior__double_pointer_alloca_use_08.c" language="C" size="3523" checksum="3c9ffe292fa8f80191f1c239f819ddd79c86045d">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112090" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/090/CWE758_Undefined_Behavior__double_pointer_alloca_use_09.c" language="C" size="3231" checksum="fbb8e3fb2b4a237f2f78b7972af47127f9998c8c">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112091" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/091/CWE758_Undefined_Behavior__double_pointer_alloca_use_10.c" language="C" size="3182" checksum="b34fecabf504b984bcf4093a35f0cd21e2a785bd">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112092" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/092/CWE758_Undefined_Behavior__double_pointer_alloca_use_11.c" language="C" size="3245" checksum="d2395e14b6746ed8e0ca4ed5441b63260c5a4229">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112093" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/093/CWE758_Undefined_Behavior__double_pointer_alloca_use_12.c" language="C" size="3466" checksum="b9a40ed8b764932dc8c3aabb70f9dc9f08dd7fa8">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112094" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/094/CWE758_Undefined_Behavior__double_pointer_alloca_use_13.c" language="C" size="3249" checksum="d27bf011d491b9f02c5f9f7ab6d7d4c999c7ef9e">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112095" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/095/CWE758_Undefined_Behavior__double_pointer_alloca_use_14.c" language="C" size="3200" checksum="c7518df3e271791f014acd48c341a1ea9b99e71f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112096" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/096/CWE758_Undefined_Behavior__double_pointer_alloca_use_15.c" language="C" size="3385" checksum="ebd8004b0bf0e8b3b24369072641a28c1d60b6e8">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112097" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/097/CWE758_Undefined_Behavior__double_pointer_alloca_use_16.c" language="C" size="2414" checksum="02e1410e2e25c7036052b14d1095ec5af7396df2">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112098" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/098/CWE758_Undefined_Behavior__double_pointer_alloca_use_17.c" language="C" size="2439" checksum="3a57e35805f1392c81c4f0c3f90763a2fb48cdff">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112099" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/099/CWE758_Undefined_Behavior__double_pointer_alloca_use_18.c" language="C" size="2313" checksum="6770f69cca1f5f7ddfa0a8efc42c5c7975f5bd48">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112100" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/100/CWE758_Undefined_Behavior__double_pointer_malloc_use_01.c" language="C" size="2237" checksum="5f1aa03172a1accfb9c0f55d6625c96acbdd2902">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112101" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/101/CWE758_Undefined_Behavior__double_pointer_malloc_use_02.c" language="C" size="3200" checksum="e3c1136142ee37c5b02577b7f2f5128d12f697b7">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112102" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/102/CWE758_Undefined_Behavior__double_pointer_malloc_use_03.c" language="C" size="3221" checksum="b0b60238597d9acdec02f6e10fba02b2bde94067">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112103" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/103/CWE758_Undefined_Behavior__double_pointer_malloc_use_04.c" language="C" size="3586" checksum="baad59f06532d51850d1e465f58dd685824f1d83">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112104" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/104/CWE758_Undefined_Behavior__double_pointer_malloc_use_05.c" language="C" size="3557" checksum="0b1febf263b372dc01123d8462e4f94c053916df">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112105" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/105/CWE758_Undefined_Behavior__double_pointer_malloc_use_06.c" language="C" size="3527" checksum="d6ffe369de5e5f4c13d7a75e5e1d0d544ad72fc2">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112106" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/106/CWE758_Undefined_Behavior__double_pointer_malloc_use_07.c" language="C" size="3507" checksum="3c026355a336f7c2f98f4ebbf9233cc05278d60b">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112107" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/107/CWE758_Undefined_Behavior__double_pointer_malloc_use_08.c" language="C" size="3607" checksum="780788e580803a11b2805332812ba8022c89c6af">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112108" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/108/CWE758_Undefined_Behavior__double_pointer_malloc_use_09.c" language="C" size="3315" checksum="0c27ee7e07ef041d89220eac5b78d0f7ab2be062">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112109" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/109/CWE758_Undefined_Behavior__double_pointer_malloc_use_10.c" language="C" size="3266" checksum="37e379f137ffebd0d7654041f0b82432c6f3889f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112110" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/110/CWE758_Undefined_Behavior__double_pointer_malloc_use_11.c" language="C" size="3329" checksum="7ab018247fa4c72044b8ad3e3cae318d89c19e95">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112111" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/111/CWE758_Undefined_Behavior__double_pointer_malloc_use_12.c" language="C" size="3578" checksum="1bb62e1abc6e0319cbab8c255c99e58b084ea32a">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112112" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/112/CWE758_Undefined_Behavior__double_pointer_malloc_use_13.c" language="C" size="3333" checksum="ef45f423b848acc4987d55d8893e77a15881200f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112113" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/113/CWE758_Undefined_Behavior__double_pointer_malloc_use_14.c" language="C" size="3284" checksum="a3f16e25209fae1466a70b997e184b0cb8646e4e">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112114" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/114/CWE758_Undefined_Behavior__double_pointer_malloc_use_15.c" language="C" size="3457" checksum="15bd62f7f304b8cf6931d6e52ab200a963be0db2">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112115" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/115/CWE758_Undefined_Behavior__double_pointer_malloc_use_16.c" language="C" size="2470" checksum="e5cfe90bd9a25c0be00655140b16b8bb673ed500">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112116" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/116/CWE758_Undefined_Behavior__double_pointer_malloc_use_17.c" language="C" size="2495" checksum="3b895e14e87a795b847ecfef64cfb2d2d0c29e9b">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112117" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/117/CWE758_Undefined_Behavior__double_pointer_malloc_use_18.c" language="C" size="2361" checksum="59f5f8ac7c51e0a22e22405c26c116ba308c2aeb">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112118" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/118/CWE758_Undefined_Behavior__double_pointer_new_use_01.cpp" language="C++" size="2120" checksum="167a4da68aa6a7f02a79e95a3761e98bf092f5bc">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112119" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/119/CWE758_Undefined_Behavior__double_pointer_new_use_02.cpp" language="C++" size="3038" checksum="6035bd7203482b79abbd7effdb95070a8cff901a">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112120" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/120/CWE758_Undefined_Behavior__double_pointer_new_use_03.cpp" language="C++" size="3059" checksum="049a6d314f9727e16d1d35bf706a18a3e41d15b6">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112121" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/121/CWE758_Undefined_Behavior__double_pointer_new_use_04.cpp" language="C++" size="3424" checksum="01ceb142b465cfb1b30ed3f783ab23239563a11a">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112122" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/122/CWE758_Undefined_Behavior__double_pointer_new_use_05.cpp" language="C++" size="3395" checksum="c2951e3c81fa6421a769a5b2a89c05233ef4f504">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112123" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/123/CWE758_Undefined_Behavior__double_pointer_new_use_06.cpp" language="C++" size="3365" checksum="1597f7d3708dea6b3e10ed48ac815d87965b2d33">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112124" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/124/CWE758_Undefined_Behavior__double_pointer_new_use_07.cpp" language="C++" size="3345" checksum="cabb098b1c2383f4183bca3e8dfc41c6c6a1be8c">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112125" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/125/CWE758_Undefined_Behavior__double_pointer_new_use_08.cpp" language="C++" size="3445" checksum="49590f4982e18ff8d2517107d2d4f4c801308258">
      <mixed line="42" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112126" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/126/CWE758_Undefined_Behavior__double_pointer_new_use_09.cpp" language="C++" size="3153" checksum="71c43c83c220751f0105a56e9512ed954aa88ee3">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112127" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/127/CWE758_Undefined_Behavior__double_pointer_new_use_10.cpp" language="C++" size="3104" checksum="b00e30cf57fae2f5d835c05048740c9e58820d93">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112128" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/128/CWE758_Undefined_Behavior__double_pointer_new_use_11.cpp" language="C++" size="3167" checksum="220a8906e5ed57eeea72ee257ee52937a6780658">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112129" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/129/CWE758_Undefined_Behavior__double_pointer_new_use_12.cpp" language="C++" size="3371" checksum="a6ef0790d95e7aaf386dbccfee789887dd6a2db4">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112130" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/130/CWE758_Undefined_Behavior__double_pointer_new_use_13.cpp" language="C++" size="3171" checksum="78959ef8573134f4eec46ff0093286886daf28e0">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112131" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/131/CWE758_Undefined_Behavior__double_pointer_new_use_14.cpp" language="C++" size="3122" checksum="32de6f30fd9cfe7a7b77f3bee94bd65968e1bd94">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112132" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/132/CWE758_Undefined_Behavior__double_pointer_new_use_15.cpp" language="C++" size="3295" checksum="9c37e9af883d9aad6f113dce8931e8cbdea8779d">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112133" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/133/CWE758_Undefined_Behavior__double_pointer_new_use_16.cpp" language="C++" size="2360" checksum="fd442ff4b36d1d075bd9b724912d072e0a725b40">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112134" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/134/CWE758_Undefined_Behavior__double_pointer_new_use_17.cpp" language="C++" size="2379" checksum="d6977123f8ba5621a93e707afcd433b9c7bc1ad0">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112135" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/135/CWE758_Undefined_Behavior__double_pointer_new_use_18.cpp" language="C++" size="2244" checksum="d0f13afdb89bc469221fd1fe4f08c42ffb30cbe1">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112136" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/136/CWE758_Undefined_Behavior__int64_t_alloca_use_01.c" language="C" size="2029" checksum="43a44850a4a24d484846191d81a799013b8d0606">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112137" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/137/CWE758_Undefined_Behavior__int64_t_alloca_use_02.c" language="C" size="2818" checksum="3a7e1e6722bfad12ef0c75e8956d78430f086384">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112138" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/138/CWE758_Undefined_Behavior__int64_t_alloca_use_03.c" language="C" size="2839" checksum="a33270453934ea140b82c2271dee90f7321cb2bb">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112139" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/139/CWE758_Undefined_Behavior__int64_t_alloca_use_04.c" language="C" size="3204" checksum="517808e3abc3c9e10dac2688bcf6fa75f10b140f">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112140" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/140/CWE758_Undefined_Behavior__int64_t_alloca_use_05.c" language="C" size="3175" checksum="fbc43b87147394d387e0a548e3b340c5d0b482af">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112141" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/141/CWE758_Undefined_Behavior__int64_t_alloca_use_06.c" language="C" size="3145" checksum="07c15c4bc56989a864fa071a70524b63a8fd89a0">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112142" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/142/CWE758_Undefined_Behavior__int64_t_alloca_use_07.c" language="C" size="3125" checksum="3d165ea6d1d9c3da32e4f427967c269c73faa1e3">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112143" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/143/CWE758_Undefined_Behavior__int64_t_alloca_use_08.c" language="C" size="3225" checksum="32e40e27304c545dab95cbd10d244cad93f32b59">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112144" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/144/CWE758_Undefined_Behavior__int64_t_alloca_use_09.c" language="C" size="2933" checksum="82f59c9bc00258e8a5e10deb3c57fa6e071a3327">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112145" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/145/CWE758_Undefined_Behavior__int64_t_alloca_use_10.c" language="C" size="2884" checksum="b63aa33348ce8674d26424d400587ee491985981">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112146" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/146/CWE758_Undefined_Behavior__int64_t_alloca_use_11.c" language="C" size="2947" checksum="403458cf1c1380289c2355c76e806d94c528aa73">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112147" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/147/CWE758_Undefined_Behavior__int64_t_alloca_use_12.c" language="C" size="3038" checksum="56de79eff9c1c7f5cab142d56174c7ae802f9d58">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112148" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/148/CWE758_Undefined_Behavior__int64_t_alloca_use_13.c" language="C" size="2951" checksum="6d90f56d1bbe9308a4d85c5abb19dfd7be030bbd">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112149" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/149/CWE758_Undefined_Behavior__int64_t_alloca_use_14.c" language="C" size="2902" checksum="a9f15114cd9e368ea437a5bf1bdd06b0cd0d9bbf">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112150" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/150/CWE758_Undefined_Behavior__int64_t_alloca_use_15.c" language="C" size="3103" checksum="291910e16117be89bf3253c2490631c7a3e4c3ba">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112151" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/151/CWE758_Undefined_Behavior__int64_t_alloca_use_16.c" language="C" size="2246" checksum="dbd2c994401d74904f6a6590862e6b78006df041">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112152" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/152/CWE758_Undefined_Behavior__int64_t_alloca_use_17.c" language="C" size="2271" checksum="03f7e3ce8cfb471366faf7424fc15fb81552603f">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112153" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/153/CWE758_Undefined_Behavior__int64_t_alloca_use_18.c" language="C" size="2153" checksum="fc26df71d4af83e604ece327f31bc74b4be7a06a">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112154" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/154/CWE758_Undefined_Behavior__int64_t_malloc_use_01.c" language="C" size="2077" checksum="deb22103d1d23ba52d0c1cbb972ed465af1e6d8a">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112155" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/155/CWE758_Undefined_Behavior__int64_t_malloc_use_02.c" language="C" size="2902" checksum="1be0336c201c49179f23823f67fa051820bfab8f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112156" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/156/CWE758_Undefined_Behavior__int64_t_malloc_use_03.c" language="C" size="2923" checksum="2527101f0b5f651efefa0843bd3c15d32b6a7059">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112157" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/157/CWE758_Undefined_Behavior__int64_t_malloc_use_04.c" language="C" size="3288" checksum="e3c09c62516db043af121f8e0f720f8f334c7f83">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112158" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/158/CWE758_Undefined_Behavior__int64_t_malloc_use_05.c" language="C" size="3259" checksum="0492ca61ab1232c4212ae34cf2f0775248233337">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112159" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/159/CWE758_Undefined_Behavior__int64_t_malloc_use_06.c" language="C" size="3229" checksum="b193833798fd4efbbb692952073ac0a4f4759059">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112160" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/160/CWE758_Undefined_Behavior__int64_t_malloc_use_07.c" language="C" size="3209" checksum="4d42505f8d2074a69dc188e58175037b6cd90398">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112161" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/161/CWE758_Undefined_Behavior__int64_t_malloc_use_08.c" language="C" size="3309" checksum="270b4ab748dd99a746a9988511838a2d1fca9fb6">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112162" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/162/CWE758_Undefined_Behavior__int64_t_malloc_use_09.c" language="C" size="3017" checksum="c71f638348ed960d13d28caeaf6c14e3d7266096">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112163" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/163/CWE758_Undefined_Behavior__int64_t_malloc_use_10.c" language="C" size="2968" checksum="01de99236e91f8142fe92e6aa9c0fc89c9daa37b">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112164" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/164/CWE758_Undefined_Behavior__int64_t_malloc_use_11.c" language="C" size="3031" checksum="ddaefc7c004bb1681bcd134426d5184790b900db">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112165" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/165/CWE758_Undefined_Behavior__int64_t_malloc_use_12.c" language="C" size="3150" checksum="a079d9d253983e036dc49c65565191c5af9445ea">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112166" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/166/CWE758_Undefined_Behavior__int64_t_malloc_use_13.c" language="C" size="3035" checksum="32ed40b7dde2c7928a28f99c9b7399f8b329e924">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112167" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/167/CWE758_Undefined_Behavior__int64_t_malloc_use_14.c" language="C" size="2986" checksum="400663da417dc164140add484d7f04abcbc7ade2">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112168" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/168/CWE758_Undefined_Behavior__int64_t_malloc_use_15.c" language="C" size="3175" checksum="5b502d85d4b491790c5ccb39ab3d90f6c630ce1d">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112169" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/169/CWE758_Undefined_Behavior__int64_t_malloc_use_16.c" language="C" size="2302" checksum="804f5f45ec75c194bdd3e786837ca7878548c42f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112170" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/170/CWE758_Undefined_Behavior__int64_t_malloc_use_17.c" language="C" size="2327" checksum="c8cfd85db0adfe84b5e9d1becb50f4a492254ae6">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112171" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/171/CWE758_Undefined_Behavior__int64_t_malloc_use_18.c" language="C" size="2201" checksum="47c6e00113b88c644a200ff5860bf9dc0c0b227f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112172" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/172/CWE758_Undefined_Behavior__int64_t_new_use_01.cpp" language="C++" size="1998" checksum="1bb763e99028f204d24252fbb8fbeb2756a750ec">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112173" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/173/CWE758_Undefined_Behavior__int64_t_new_use_02.cpp" language="C++" size="2801" checksum="f9b8832aed4341a07753b06bc61a9e9b85e8d9f2">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112174" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/174/CWE758_Undefined_Behavior__int64_t_new_use_03.cpp" language="C++" size="2822" checksum="64d2dcf6d508486249fe0840a27c7ea59f0d5c45">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112175" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/175/CWE758_Undefined_Behavior__int64_t_new_use_04.cpp" language="C++" size="3187" checksum="e08e0cb6120e9cc5245f7fce241369be03606014">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112176" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/176/CWE758_Undefined_Behavior__int64_t_new_use_05.cpp" language="C++" size="3158" checksum="5b8ee57e51fbf030de6cb2fb0c0c006175587c6d">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112177" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/177/CWE758_Undefined_Behavior__int64_t_new_use_06.cpp" language="C++" size="3128" checksum="98db835b67f355887ffc8762e0d3a4198ea4f586">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112178" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/178/CWE758_Undefined_Behavior__int64_t_new_use_07.cpp" language="C++" size="3108" checksum="83e8142125131e8d41a5f93d50700397d7902811">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112179" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/179/CWE758_Undefined_Behavior__int64_t_new_use_08.cpp" language="C++" size="3208" checksum="83544bed4623b6cd30a1d822063d3535d0a9a016">
      <mixed line="42" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112180" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/180/CWE758_Undefined_Behavior__int64_t_new_use_09.cpp" language="C++" size="2916" checksum="cadfd500b5ec343115c4ba847e6f567d9e5d3e3d">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112181" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/181/CWE758_Undefined_Behavior__int64_t_new_use_10.cpp" language="C++" size="2867" checksum="6f3ea7485eeceb7fde6dfd399d6647e91339fff0">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112182" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/182/CWE758_Undefined_Behavior__int64_t_new_use_11.cpp" language="C++" size="2930" checksum="a76d8c229879e7308207a13ed355c6cbc6ea9bc3">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112183" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/183/CWE758_Undefined_Behavior__int64_t_new_use_12.cpp" language="C++" size="3027" checksum="8b2c0f37a6c49757da21b92cf6edd932d0179fd2">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112184" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/184/CWE758_Undefined_Behavior__int64_t_new_use_13.cpp" language="C++" size="2934" checksum="7c13eff8bd93293771fcf653e47b7f85f3bf9440">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112185" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/185/CWE758_Undefined_Behavior__int64_t_new_use_14.cpp" language="C++" size="2885" checksum="861da337511bbf3778dfd7f8bb74782304570626">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112186" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/186/CWE758_Undefined_Behavior__int64_t_new_use_15.cpp" language="C++" size="3074" checksum="c8432db95b7a0a9fde182ddf6bc552bb2ceb4665">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112187" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/187/CWE758_Undefined_Behavior__int64_t_new_use_16.cpp" language="C++" size="2230" checksum="8dc6ad82746cba1c77667176d69e0106b242e407">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112188" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/188/CWE758_Undefined_Behavior__int64_t_new_use_17.cpp" language="C++" size="2249" checksum="e9033503dfe1017104909f407f0933883435b365">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112189" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/189/CWE758_Undefined_Behavior__int64_t_new_use_18.cpp" language="C++" size="2122" checksum="87d32674af5e9978aa670c8b55631576f6f57370">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112190" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/190/CWE758_Undefined_Behavior__int_alloca_use_01.c" language="C" size="1961" checksum="e83907dbb5381fa3ff17513c886a017f346e3723">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112191" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/191/CWE758_Undefined_Behavior__int_alloca_use_02.c" language="C" size="2723" checksum="e9fcef7c9d675b0bdd70e0d78d5b640b9ecd16ae">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112192" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/192/CWE758_Undefined_Behavior__int_alloca_use_03.c" language="C" size="2744" checksum="4c214a314990ed01ce1d4f668bd0a7ad10e86908">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112193" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/193/CWE758_Undefined_Behavior__int_alloca_use_04.c" language="C" size="3109" checksum="8941bdd87040a8e38eecb8f07a6bb502f6d2443e">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112194" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/194/CWE758_Undefined_Behavior__int_alloca_use_05.c" language="C" size="3080" checksum="dc4f10e940dfa2a1e38c59d48dff58076d491eec">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112195" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/195/CWE758_Undefined_Behavior__int_alloca_use_06.c" language="C" size="3050" checksum="78c7863d912074711395599fd3191f90c87e45c0">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112196" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/196/CWE758_Undefined_Behavior__int_alloca_use_07.c" language="C" size="3030" checksum="d42df8e1c2522701d65a6947844c4176baee916c">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112197" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/197/CWE758_Undefined_Behavior__int_alloca_use_08.c" language="C" size="3130" checksum="67cb60d558b5dd927e9b26560d25d6c7b1bfe064">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112198" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/198/CWE758_Undefined_Behavior__int_alloca_use_09.c" language="C" size="2838" checksum="c22e644e90118b714339a2568705675a1c7214cb">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112199" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/199/CWE758_Undefined_Behavior__int_alloca_use_10.c" language="C" size="2789" checksum="4bf7a555b9647c34bef9ef68150ddb5d3c177930">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112200" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/200/CWE758_Undefined_Behavior__int_alloca_use_11.c" language="C" size="2852" checksum="bc346365058e8a2836656ead9f2d18d4e84b70f7">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112201" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/201/CWE758_Undefined_Behavior__int_alloca_use_12.c" language="C" size="2916" checksum="f6204116fde008bcc37fd8d5ce3e636c8687189d">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112202" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/202/CWE758_Undefined_Behavior__int_alloca_use_13.c" language="C" size="2856" checksum="c9c1c2868ebe83b3f7438983077cd8da4c592865">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112203" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/203/CWE758_Undefined_Behavior__int_alloca_use_14.c" language="C" size="2807" checksum="3e788f6e60c5c2e5a5c6836b510b065b89ccf1ff">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112204" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/204/CWE758_Undefined_Behavior__int_alloca_use_15.c" language="C" size="3008" checksum="037b02d5879087e384c4c5f4f546cb443603dfd8">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112205" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/205/CWE758_Undefined_Behavior__int_alloca_use_16.c" language="C" size="2178" checksum="ba5ecc2731cee37bc1bccd6bf2d5effd7e8a1e4e">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112206" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/206/CWE758_Undefined_Behavior__int_alloca_use_17.c" language="C" size="2203" checksum="8ee054ce0d1a8ce7f3ee6fa9b167011a6351a750">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112207" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/207/CWE758_Undefined_Behavior__int_alloca_use_18.c" language="C" size="2085" checksum="8e6eb793bd45e7e1488b4745d41bbdf8a1545949">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112208" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/208/CWE758_Undefined_Behavior__int_malloc_use_01.c" language="C" size="2009" checksum="0b8e651b51f4557c4827dc5fc35392bfdda69983">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112209" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/209/CWE758_Undefined_Behavior__int_malloc_use_02.c" language="C" size="2807" checksum="a00a438b6e025976cb80a2cb64e3173a529a69f3">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112210" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/210/CWE758_Undefined_Behavior__int_malloc_use_03.c" language="C" size="2828" checksum="d9e38d61032867376d771a42e54f6a3122cb5b59">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112211" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/211/CWE758_Undefined_Behavior__int_malloc_use_04.c" language="C" size="3193" checksum="67def427e0a824092dcdeca50a71610976955a8b">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112212" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/212/CWE758_Undefined_Behavior__int_malloc_use_05.c" language="C" size="3164" checksum="804fdd1f7ecf29495329000bc15dbd96d495cf1e">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112213" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/213/CWE758_Undefined_Behavior__int_malloc_use_06.c" language="C" size="3134" checksum="4373c992f29595b8fe5f3826f8e6a888d356eb4c">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112214" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/214/CWE758_Undefined_Behavior__int_malloc_use_07.c" language="C" size="3114" checksum="debb9ee09e78d51f79095d840a743234b85b7cac">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112215" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/215/CWE758_Undefined_Behavior__int_malloc_use_08.c" language="C" size="3214" checksum="35e2702f1c1aefc0b6f9465ca5a08df48a35e5a3">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112216" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/216/CWE758_Undefined_Behavior__int_malloc_use_09.c" language="C" size="2922" checksum="0a6ed443d396488b1569f2e2ad21881b85768cdd">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112217" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/217/CWE758_Undefined_Behavior__int_malloc_use_10.c" language="C" size="2873" checksum="de7f5f430acfc1aa22debd0e2834d5efbe42f0e6">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112218" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/218/CWE758_Undefined_Behavior__int_malloc_use_11.c" language="C" size="2936" checksum="a225525aa1b57813601ca666cede50d7d4f99bac">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112219" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/219/CWE758_Undefined_Behavior__int_malloc_use_12.c" language="C" size="3028" checksum="16353ec6b42f317c704339e30dbd4e465148bf2f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112220" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/220/CWE758_Undefined_Behavior__int_malloc_use_13.c" language="C" size="2940" checksum="65f623ed8d88fb8f2a87fab04ad36dcc73385bf8">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112221" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/221/CWE758_Undefined_Behavior__int_malloc_use_14.c" language="C" size="2891" checksum="0f84361b4dc256d2b6dece58ea389c4f9bbe0292">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112222" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/222/CWE758_Undefined_Behavior__int_malloc_use_15.c" language="C" size="3080" checksum="8af36526bd0bf18220a968817626792783afe77a">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112223" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/223/CWE758_Undefined_Behavior__int_malloc_use_16.c" language="C" size="2234" checksum="272ba1a3f5ad95d81125367067ac0949fd983341">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112224" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/224/CWE758_Undefined_Behavior__int_malloc_use_17.c" language="C" size="2259" checksum="134eb9886054e4e1654c2579da46eb74e232e3b1">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112225" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/225/CWE758_Undefined_Behavior__int_malloc_use_18.c" language="C" size="2133" checksum="1bb5e7982ecd366b193bfefb8a267711b76fe3f5">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112226" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/226/CWE758_Undefined_Behavior__int_new_use_01.cpp" language="C++" size="1946" checksum="3e5cfa9a23c135ef807da5dfc9fc9ac6c2779508">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112227" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/227/CWE758_Undefined_Behavior__int_new_use_02.cpp" language="C++" size="2726" checksum="f226154d391c34176ca7c619033467f83ef54182">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112228" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/228/CWE758_Undefined_Behavior__int_new_use_03.cpp" language="C++" size="2747" checksum="0ac610f3fa269bf50591405ca48707a606f5ae3b">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112229" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/229/CWE758_Undefined_Behavior__int_new_use_04.cpp" language="C++" size="3112" checksum="d267f4ece8fb8c0ae9c4a8b5c6c16c708339dff7">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112230" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/230/CWE758_Undefined_Behavior__int_new_use_05.cpp" language="C++" size="3083" checksum="3aa1967fbb25e8ed28f8519845faa74265c61b6a">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112231" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/231/CWE758_Undefined_Behavior__int_new_use_06.cpp" language="C++" size="3053" checksum="a156699abf99d46fc0a1233173b4775a0fa2dd41">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112232" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/232/CWE758_Undefined_Behavior__int_new_use_07.cpp" language="C++" size="3033" checksum="100d16468d2c88ad355834283d74ff63b14fab39">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112233" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/233/CWE758_Undefined_Behavior__int_new_use_08.cpp" language="C++" size="3133" checksum="ab6f3535a16e187acf2920c9f46133eedbbe62da">
      <mixed line="42" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112234" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/234/CWE758_Undefined_Behavior__int_new_use_09.cpp" language="C++" size="2841" checksum="6d75f725dcbfee5b8975f1960a6106f109687646">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112235" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/235/CWE758_Undefined_Behavior__int_new_use_10.cpp" language="C++" size="2792" checksum="8a4633109b2fde7bbdc6aef685ed526e2e5b55e0">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112236" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/236/CWE758_Undefined_Behavior__int_new_use_11.cpp" language="C++" size="2855" checksum="1ce696aef971f5b6a3e2626f87e0bb067d0a7ea8">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112237" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/237/CWE758_Undefined_Behavior__int_new_use_12.cpp" language="C++" size="2929" checksum="4a4398ce7886c6b4b0a6d365d637b5368d858e9d">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112238" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/238/CWE758_Undefined_Behavior__int_new_use_13.cpp" language="C++" size="2859" checksum="276f74b2de3f5c5d0c945045595b55e8712b4352">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112239" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/239/CWE758_Undefined_Behavior__int_new_use_14.cpp" language="C++" size="2810" checksum="fd5fb1940ea162c043122e5551a1cfba3a7929c5">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112240" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/240/CWE758_Undefined_Behavior__int_new_use_15.cpp" language="C++" size="2999" checksum="8c9a5bfdfc37c5c202a6d5218c74b8ac08403f31">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112241" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/241/CWE758_Undefined_Behavior__int_new_use_16.cpp" language="C++" size="2178" checksum="7555e3db368af79fb289307eb938a3f121f28a3f">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112242" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/242/CWE758_Undefined_Behavior__int_new_use_17.cpp" language="C++" size="2197" checksum="dbf16e010ad63409707cd653ca9bdbb1576f0ead">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112243" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/243/CWE758_Undefined_Behavior__int_new_use_18.cpp" language="C++" size="2070" checksum="939b80db929b5b02d16f343bc79a09e552e7dbb1">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112244" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/244/CWE758_Undefined_Behavior__int_pointer_alloca_use_01.c" language="C" size="2133" checksum="2b308eb6c6253f5523f6621921049fabf04995df">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112245" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/245/CWE758_Undefined_Behavior__int_pointer_alloca_use_02.c" language="C" size="3034" checksum="d962c9ef04d12cc2f4e39e3bac680a2096de8436">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112246" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/246/CWE758_Undefined_Behavior__int_pointer_alloca_use_03.c" language="C" size="3055" checksum="19533836510543581927e67adc433e1080eabdd4">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112247" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/247/CWE758_Undefined_Behavior__int_pointer_alloca_use_04.c" language="C" size="3420" checksum="7aaf04e16217bc435804855a7e106a9792340aad">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112248" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/248/CWE758_Undefined_Behavior__int_pointer_alloca_use_05.c" language="C" size="3391" checksum="871caa6de611804cabb08a28ae35e0a35c8f16be">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112249" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/249/CWE758_Undefined_Behavior__int_pointer_alloca_use_06.c" language="C" size="3361" checksum="8644ae09b5444319b75b38eb759b6a25316eb9bc">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112250" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/250/CWE758_Undefined_Behavior__int_pointer_alloca_use_07.c" language="C" size="3341" checksum="c709adba89ec27bd80ae6b123068521788aff794">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112251" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/251/CWE758_Undefined_Behavior__int_pointer_alloca_use_08.c" language="C" size="3441" checksum="dff7cab5e21b786ee3dd1f53d46e33594f7df0a6">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112252" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/252/CWE758_Undefined_Behavior__int_pointer_alloca_use_09.c" language="C" size="3149" checksum="f55eef183a140f999bd16d060c0946c5b17b9ac1">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112253" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/253/CWE758_Undefined_Behavior__int_pointer_alloca_use_10.c" language="C" size="3100" checksum="c9cee6d6b96355d5de7cb651086b430ce4e50f77">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112254" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/254/CWE758_Undefined_Behavior__int_pointer_alloca_use_11.c" language="C" size="3163" checksum="23237fc6729d718bbce654b03bcf22c0534e78d1">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112255" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/255/CWE758_Undefined_Behavior__int_pointer_alloca_use_12.c" language="C" size="3358" checksum="78825160f55ae2cba823b8360158548a075445f7">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112256" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/256/CWE758_Undefined_Behavior__int_pointer_alloca_use_13.c" language="C" size="3167" checksum="8ba98b7ee5b11a216bf66d8ea82547eb0fefa9db">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112257" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/257/CWE758_Undefined_Behavior__int_pointer_alloca_use_14.c" language="C" size="3118" checksum="7d7b3381c448ea08c70febc9387df12d34f40596">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112258" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/258/CWE758_Undefined_Behavior__int_pointer_alloca_use_15.c" language="C" size="3303" checksum="ab17b4f1f4a7450f3324a76eba43e4ed691211ad">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112259" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/259/CWE758_Undefined_Behavior__int_pointer_alloca_use_16.c" language="C" size="2358" checksum="4a7ec1689c0722eeca3d2aa2dffa82a18c53385a">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112260" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/260/CWE758_Undefined_Behavior__int_pointer_alloca_use_17.c" language="C" size="2383" checksum="7bdd8bf4a4685d3b46458f2be5e7d9654cc24567">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112261" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/261/CWE758_Undefined_Behavior__int_pointer_alloca_use_18.c" language="C" size="2257" checksum="b66359f1860232557bc000604916101456e7c36f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112262" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/262/CWE758_Undefined_Behavior__int_pointer_malloc_use_01.c" language="C" size="2181" checksum="6a639e816b2569685e0c202cd95cdd9405d5bb8d">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112263" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/263/CWE758_Undefined_Behavior__int_pointer_malloc_use_02.c" language="C" size="3118" checksum="2fcaae641c4e5789b9960d7dfa1856a9859241d2">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112264" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/264/CWE758_Undefined_Behavior__int_pointer_malloc_use_03.c" language="C" size="3139" checksum="01051473fa70a9f60bc4210b6d26e59e9190d0a1">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112265" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/265/CWE758_Undefined_Behavior__int_pointer_malloc_use_04.c" language="C" size="3504" checksum="98f0bcad9163d1db1a70b74903df7a26c2b1d563">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112266" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/266/CWE758_Undefined_Behavior__int_pointer_malloc_use_05.c" language="C" size="3475" checksum="e3262f51ab4441a2e899ff0fc62c8ab692b33d45">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112267" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/267/CWE758_Undefined_Behavior__int_pointer_malloc_use_06.c" language="C" size="3445" checksum="f09a0a48aa606d4d9edb2c3906a1748db237d75a">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112268" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/268/CWE758_Undefined_Behavior__int_pointer_malloc_use_07.c" language="C" size="3425" checksum="409f140751b97a3a2746110e12be04369f040139">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112269" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/269/CWE758_Undefined_Behavior__int_pointer_malloc_use_08.c" language="C" size="3525" checksum="752802e0f97ac2a95b4e42dfbfb93f6f606f7730">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112270" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/270/CWE758_Undefined_Behavior__int_pointer_malloc_use_09.c" language="C" size="3233" checksum="95138b3655cb207959eefb5de14944607f242ab6">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112271" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/271/CWE758_Undefined_Behavior__int_pointer_malloc_use_10.c" language="C" size="3184" checksum="1abb6a60611678095a535e1f5bf65c4ce54b2ecd">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112272" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/272/CWE758_Undefined_Behavior__int_pointer_malloc_use_11.c" language="C" size="3247" checksum="c5719f61662b07c19b3db40269c0bed0857800b7">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112273" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/273/CWE758_Undefined_Behavior__int_pointer_malloc_use_12.c" language="C" size="3470" checksum="497b955125bc31f9145742c901e4f0f33ec9da58">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112274" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/274/CWE758_Undefined_Behavior__int_pointer_malloc_use_13.c" language="C" size="3251" checksum="9191679793f015a6feef615e0751ec8b71e724df">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112275" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/275/CWE758_Undefined_Behavior__int_pointer_malloc_use_14.c" language="C" size="3202" checksum="61fb242d1b3e7f47ac65a1f5a820f027b489c330">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112276" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/276/CWE758_Undefined_Behavior__int_pointer_malloc_use_15.c" language="C" size="3375" checksum="efe2ccef0420106697bd87262679657971ac346f">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112277" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/277/CWE758_Undefined_Behavior__int_pointer_malloc_use_16.c" language="C" size="2414" checksum="40880c51c22af31f87a87c64ceadf3112bd6b50a">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112278" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/278/CWE758_Undefined_Behavior__int_pointer_malloc_use_17.c" language="C" size="2439" checksum="3b54e9953538cd838792db6f6ab3ea2271ec661e">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112279" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/279/CWE758_Undefined_Behavior__int_pointer_malloc_use_18.c" language="C" size="2305" checksum="cbdc3239c9d54b48d45f672c3abc56f77afc2439">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112280" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/280/CWE758_Undefined_Behavior__int_pointer_new_use_01.cpp" language="C++" size="2079" checksum="9b967da6357c77f4f0ac6cc08cc7aafcf756b9ed">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112281" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/281/CWE758_Undefined_Behavior__int_pointer_new_use_02.cpp" language="C++" size="2977" checksum="5114f4d35cfe1ddd17aa0dd7961f88602e4f44f4">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112282" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/282/CWE758_Undefined_Behavior__int_pointer_new_use_03.cpp" language="C++" size="2998" checksum="5cd6a0f57584f408e0678e271bc3471be578c71d">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112283" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/283/CWE758_Undefined_Behavior__int_pointer_new_use_04.cpp" language="C++" size="3363" checksum="36ee6442cd3a30fee3a08d6e98d90a7e43b8a8e1">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112284" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/284/CWE758_Undefined_Behavior__int_pointer_new_use_05.cpp" language="C++" size="3334" checksum="36e2a62cd82bad299c54a88a85f3956f827ef718">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112285" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/285/CWE758_Undefined_Behavior__int_pointer_new_use_06.cpp" language="C++" size="3304" checksum="f1c2275a1c89a1c32068f2fa1310e65a75ef7469">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112286" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/286/CWE758_Undefined_Behavior__int_pointer_new_use_07.cpp" language="C++" size="3284" checksum="88b73612e67c052d9b7464dde70d2486fc529d58">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112287" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/287/CWE758_Undefined_Behavior__int_pointer_new_use_08.cpp" language="C++" size="3384" checksum="158fd3bc9c307599b83fe0f31eaee14b54facd3b">
      <mixed line="42" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112288" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/288/CWE758_Undefined_Behavior__int_pointer_new_use_09.cpp" language="C++" size="3092" checksum="4512cd5976b0a5bffc966abc1ab88e9b7bce63c1">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112289" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/289/CWE758_Undefined_Behavior__int_pointer_new_use_10.cpp" language="C++" size="3043" checksum="8fd87d784ffcdb200c9b21ee6d8768bea7ad8a8c">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112290" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/290/CWE758_Undefined_Behavior__int_pointer_new_use_11.cpp" language="C++" size="3106" checksum="4f70d28d4038c26b31e609317ee253ec0c74f279">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112291" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/291/CWE758_Undefined_Behavior__int_pointer_new_use_12.cpp" language="C++" size="3290" checksum="a6e7e3f25cb081d2ec7b1cdc2e6e9cf559d2f3ca">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112292" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/292/CWE758_Undefined_Behavior__int_pointer_new_use_13.cpp" language="C++" size="3110" checksum="d00409bf89158d8ad5f315adc86c75e2bbf00e76">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112293" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/293/CWE758_Undefined_Behavior__int_pointer_new_use_14.cpp" language="C++" size="3061" checksum="4b3b9af7673546a02223afec9b02552de65398bf">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112294" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/294/CWE758_Undefined_Behavior__int_pointer_new_use_15.cpp" language="C++" size="3234" checksum="ab5386d8a490c22d3cf6312bdf593479dc7b3b32">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112295" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/295/CWE758_Undefined_Behavior__int_pointer_new_use_16.cpp" language="C++" size="2319" checksum="a8515cd4046e43d4242a8799275c6fa0de56b1e0">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112296" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/296/CWE758_Undefined_Behavior__int_pointer_new_use_17.cpp" language="C++" size="2338" checksum="f65c2354a33ac0c9b679676357627377e709779a">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112297" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/297/CWE758_Undefined_Behavior__int_pointer_new_use_18.cpp" language="C++" size="2203" checksum="dd979e00cdd6fc72ab945b2e268614a8a2635944">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112298" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/298/CWE758_Undefined_Behavior__long_alloca_use_01.c" language="C" size="1978" checksum="f3f648613f8d5361b2cdb1961bf893697f3a9083">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112299" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/299/CWE758_Undefined_Behavior__long_alloca_use_02.c" language="C" size="2747" checksum="c8d8d1cc33249d1526cca4c0e4990075895a2e7a">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112300" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/300/CWE758_Undefined_Behavior__long_alloca_use_03.c" language="C" size="2768" checksum="3f6403533a787b1e544b17415b9632cf1e88d4fc">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112301" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/301/CWE758_Undefined_Behavior__long_alloca_use_04.c" language="C" size="3133" checksum="ef250631522a6f31c15b5b5961e3f8549366d927">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112302" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/302/CWE758_Undefined_Behavior__long_alloca_use_05.c" language="C" size="3104" checksum="ac3bb4f2c4b73af1dfc33324102ee08af2cc6af1">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112303" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/303/CWE758_Undefined_Behavior__long_alloca_use_06.c" language="C" size="3074" checksum="2909747ea89769813c1006b499a8a69ea2ab4d56">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112304" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/304/CWE758_Undefined_Behavior__long_alloca_use_07.c" language="C" size="3054" checksum="c76ddc694005db7cece2d54dfb94ca8676588876">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112305" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/305/CWE758_Undefined_Behavior__long_alloca_use_08.c" language="C" size="3154" checksum="765047ac26ddeca5f2fe6b37289f61c0c5283ce7">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112306" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/306/CWE758_Undefined_Behavior__long_alloca_use_09.c" language="C" size="2862" checksum="d31bcb4bbb3e22852289e6d07f9499ef1108890a">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112307" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/307/CWE758_Undefined_Behavior__long_alloca_use_10.c" language="C" size="2813" checksum="4f727e59b7240db80a886813f6ce136c9f7838bf">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112308" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/308/CWE758_Undefined_Behavior__long_alloca_use_11.c" language="C" size="2876" checksum="7f342c43b11d8ebcf0e813707af448f460174788">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112309" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/309/CWE758_Undefined_Behavior__long_alloca_use_12.c" language="C" size="2947" checksum="4094c8de0fca53c74f26f8a9da479b20376fe09f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112310" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/310/CWE758_Undefined_Behavior__long_alloca_use_13.c" language="C" size="2880" checksum="7f557a79bcf25d7be6d38a1414e652980477529f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112311" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/311/CWE758_Undefined_Behavior__long_alloca_use_14.c" language="C" size="2831" checksum="74437e528bc8558d367b599c91c32ddc906c9e16">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112312" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/312/CWE758_Undefined_Behavior__long_alloca_use_15.c" language="C" size="3032" checksum="2cbb8638031baaf74d87c9c7ed8c8ef8fc28a188">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112313" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/313/CWE758_Undefined_Behavior__long_alloca_use_16.c" language="C" size="2195" checksum="91fffaddfa4dd0a9df4734868f1a6358e9559a19">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112314" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/314/CWE758_Undefined_Behavior__long_alloca_use_17.c" language="C" size="2220" checksum="6702db84357277762def895bcf5b6f84fa06e6f9">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112315" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/315/CWE758_Undefined_Behavior__long_alloca_use_18.c" language="C" size="2102" checksum="f45b86a4feed90460d0f0919b8a0fcdc6f48178c">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112316" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/316/CWE758_Undefined_Behavior__long_malloc_use_01.c" language="C" size="2026" checksum="a499f2209c328408807a02bc97edc97e4b84b084">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112317" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/317/CWE758_Undefined_Behavior__long_malloc_use_02.c" language="C" size="2831" checksum="41dace9b90f0abe068c346dd712782dfb98e0467">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112318" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/318/CWE758_Undefined_Behavior__long_malloc_use_03.c" language="C" size="2852" checksum="f0ba5519aa50fc962f8978f4f3eb46eb74d06119">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112319" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/319/CWE758_Undefined_Behavior__long_malloc_use_04.c" language="C" size="3217" checksum="22e274941a72f17e23a2107285027fef6c3f3b9d">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112320" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/320/CWE758_Undefined_Behavior__long_malloc_use_05.c" language="C" size="3188" checksum="0106a2787f880720f03d54d225dcadd8a8caf9bd">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112321" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/321/CWE758_Undefined_Behavior__long_malloc_use_06.c" language="C" size="3158" checksum="b328fed34249e2872e95c7d921dab492083271a0">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112322" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/322/CWE758_Undefined_Behavior__long_malloc_use_07.c" language="C" size="3138" checksum="513eef5a311b320e83af40e1beee02ae5f4e5a17">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112323" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/323/CWE758_Undefined_Behavior__long_malloc_use_08.c" language="C" size="3238" checksum="66fd6c822b6395e1dd8b00381032e45a12aefd96">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112324" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/324/CWE758_Undefined_Behavior__long_malloc_use_09.c" language="C" size="2946" checksum="e47c674be024ecb732d975f011a3e0fb7df4ff11">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112325" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/325/CWE758_Undefined_Behavior__long_malloc_use_10.c" language="C" size="2897" checksum="e5af7ddf750ca6587b9fc794154a1f7480eabf3a">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112326" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/326/CWE758_Undefined_Behavior__long_malloc_use_11.c" language="C" size="2960" checksum="2901379693ee952610165a92f34f08d36c4a41ce">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112327" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/327/CWE758_Undefined_Behavior__long_malloc_use_12.c" language="C" size="3059" checksum="b48703d9e6369c118398edaa56a571f2967789ae">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112328" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/328/CWE758_Undefined_Behavior__long_malloc_use_13.c" language="C" size="2964" checksum="d1cf7d8a12973023c5406bf93d32d2c4f8815a86">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112329" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/329/CWE758_Undefined_Behavior__long_malloc_use_14.c" language="C" size="2915" checksum="bcaab43f388edce71ab475268a9e1016c75e3a88">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112330" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/330/CWE758_Undefined_Behavior__long_malloc_use_15.c" language="C" size="3104" checksum="14a97daa9571dcc5c7b0ae16a98bbe4a303c3efb">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112331" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/331/CWE758_Undefined_Behavior__long_malloc_use_16.c" language="C" size="2251" checksum="0ab01f261c96e2e775dc46b8ed47a07ee90d6b83">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112332" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/332/CWE758_Undefined_Behavior__long_malloc_use_17.c" language="C" size="2276" checksum="fce3a05718a183bb3940b55c8be1f3a532d517ba">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112333" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/333/CWE758_Undefined_Behavior__long_malloc_use_18.c" language="C" size="2150" checksum="ce3abb593dac6d3b5a2b43ee50307b676a38470f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112334" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/334/CWE758_Undefined_Behavior__long_new_use_01.cpp" language="C++" size="1959" checksum="526aea013d4dcbcfe51494148e1ad1f269755fcc">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112335" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/335/CWE758_Undefined_Behavior__long_new_use_02.cpp" language="C++" size="2745" checksum="da6b126aeab2751495ccd19ac931672a1fdb74f1">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112336" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/336/CWE758_Undefined_Behavior__long_new_use_03.cpp" language="C++" size="2766" checksum="9e4f03f828e8ff36c08d6628e14543d356b7ec99">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112337" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/337/CWE758_Undefined_Behavior__long_new_use_04.cpp" language="C++" size="3131" checksum="fea79a5982e2e32694b9c30fc46d605b161de46a">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112338" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/338/CWE758_Undefined_Behavior__long_new_use_05.cpp" language="C++" size="3102" checksum="efaf23a55337f70cc1e3b7182633882cf78302b5">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112339" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/339/CWE758_Undefined_Behavior__long_new_use_06.cpp" language="C++" size="3072" checksum="ad9362b334d25b9261e367bf885dc8398a59c8ac">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112340" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/340/CWE758_Undefined_Behavior__long_new_use_07.cpp" language="C++" size="3052" checksum="963c57edf99fed28baa4363fa600c06ac379422d">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112341" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/341/CWE758_Undefined_Behavior__long_new_use_08.cpp" language="C++" size="3152" checksum="f90ee2facb19bf3f7fc7ce6a1f54922fca8ad36e">
      <mixed line="42" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112342" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/342/CWE758_Undefined_Behavior__long_new_use_09.cpp" language="C++" size="2860" checksum="cba56cfcbff5cc6ac3b950113df4fa7e255d227b">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112343" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/343/CWE758_Undefined_Behavior__long_new_use_10.cpp" language="C++" size="2811" checksum="bfff12cbda2e68ec43fe09b281c903a330cb9454">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112344" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/344/CWE758_Undefined_Behavior__long_new_use_11.cpp" language="C++" size="2874" checksum="cac75e8ddbc47ca90fa3f447044d6f1f56d00bda">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112345" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/345/CWE758_Undefined_Behavior__long_new_use_12.cpp" language="C++" size="2954" checksum="0092aa2ef5b2ee7bafdcbce4657725e01aef5578">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112346" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/346/CWE758_Undefined_Behavior__long_new_use_13.cpp" language="C++" size="2878" checksum="5a19c2a8e6b50b33321fbc33f90369dedc817ba9">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112347" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/347/CWE758_Undefined_Behavior__long_new_use_14.cpp" language="C++" size="2829" checksum="e4782ab29e38a059fa85e9f114fa87f3e206247b">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112348" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/348/CWE758_Undefined_Behavior__long_new_use_15.cpp" language="C++" size="3018" checksum="b6857b03fd4bcafd75858e05876d9a3c6b3f70e7">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112349" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/349/CWE758_Undefined_Behavior__long_new_use_16.cpp" language="C++" size="2191" checksum="b977d6c897837f5b9457c0470a02cfe1827d24e4">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112350" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/350/CWE758_Undefined_Behavior__long_new_use_17.cpp" language="C++" size="2210" checksum="38005d5945726b91e136fc0e0df0d3879c4eb9bf">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112351" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/351/CWE758_Undefined_Behavior__long_new_use_18.cpp" language="C++" size="2083" checksum="2cf625947ce1bab3797e4e209476019ac84596ac">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112352" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Undefined Behavior - Missing Return Value From Function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/352/CWE758_Undefined_Behavior__no_return_01.c" language="C" size="1481" checksum="5bc29d86f2d6e884757dba07a7f0eed6684db3e0">
      <mixed line="13" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112353" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/353/CWE758_Undefined_Behavior__struct_alloca_use_01.c" language="C" size="2189" checksum="1abd5b1a6af9546675bd40d50178a6df27268d59">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112354" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/354/CWE758_Undefined_Behavior__struct_alloca_use_02.c" language="C" size="3101" checksum="ad4dac91c56e67bb630619ea5c28489c5bf3367b">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112355" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/355/CWE758_Undefined_Behavior__struct_alloca_use_03.c" language="C" size="3122" checksum="b18bc0965bc81e2e43acb6f20c48610246220272">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112356" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/356/CWE758_Undefined_Behavior__struct_alloca_use_04.c" language="C" size="3487" checksum="ba10cca59da8eba559f11551c9d7af8e6e44966f">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112357" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/357/CWE758_Undefined_Behavior__struct_alloca_use_05.c" language="C" size="3458" checksum="4580d334f1eb121e97c51e880fc09edd7925e065">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112358" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/358/CWE758_Undefined_Behavior__struct_alloca_use_06.c" language="C" size="3428" checksum="af8ffae09bf5a2818d3ab3b0982b96cf89bfb600">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112359" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/359/CWE758_Undefined_Behavior__struct_alloca_use_07.c" language="C" size="3408" checksum="17da728bcc5d1ec5b60638096830af6d93335489">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112360" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/360/CWE758_Undefined_Behavior__struct_alloca_use_08.c" language="C" size="3508" checksum="704312e16b98c9fc12b19d222367c072cf411e04">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112361" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/361/CWE758_Undefined_Behavior__struct_alloca_use_09.c" language="C" size="3216" checksum="1bc2b2dea02645edba650d4fafa20018bd906d20">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112362" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/362/CWE758_Undefined_Behavior__struct_alloca_use_10.c" language="C" size="3167" checksum="72bdff37489fc02b1906bcda28f2538d1f8842c5">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112363" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/363/CWE758_Undefined_Behavior__struct_alloca_use_11.c" language="C" size="3230" checksum="e111ac8f22be0f7ffc0dfd78599de247a4018574">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112364" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/364/CWE758_Undefined_Behavior__struct_alloca_use_12.c" language="C" size="3432" checksum="febe376044f98e1c6ccf4eb1293bf410929c2e0c">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112365" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/365/CWE758_Undefined_Behavior__struct_alloca_use_13.c" language="C" size="3234" checksum="b146cacba39b702e2f064b8b2d23dbec7d20d237">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112366" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/366/CWE758_Undefined_Behavior__struct_alloca_use_14.c" language="C" size="3185" checksum="eb89f18178fc7f5b0345e731b2622e86c29dbaf3">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112367" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/367/CWE758_Undefined_Behavior__struct_alloca_use_15.c" language="C" size="3366" checksum="8bf269ab2a89c87753a57213c8e4bea351cde607">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112368" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/368/CWE758_Undefined_Behavior__struct_alloca_use_16.c" language="C" size="2418" checksum="637d759316f63c4aacb5a53a9753f47f7eebba26">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112369" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/369/CWE758_Undefined_Behavior__struct_alloca_use_17.c" language="C" size="2443" checksum="2d03b336f5b2d8d47f5e5fbba50e18cdd1ad8e05">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112370" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/370/CWE758_Undefined_Behavior__struct_alloca_use_18.c" language="C" size="2313" checksum="b3f510c8f3605ea979086a92d2938060c82e4be5">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112371" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/371/CWE758_Undefined_Behavior__struct_malloc_use_01.c" language="C" size="2237" checksum="c8d1cbaf44bca2ae46178cd574872e747d737c5b">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112372" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/372/CWE758_Undefined_Behavior__struct_malloc_use_02.c" language="C" size="3185" checksum="0e3300c20edbb35ed0f17bc178360d8f7b989659">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112373" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/373/CWE758_Undefined_Behavior__struct_malloc_use_03.c" language="C" size="3206" checksum="be12f4f7cbdd85b5c4309780b6af0813319e5587">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112374" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/374/CWE758_Undefined_Behavior__struct_malloc_use_04.c" language="C" size="3571" checksum="87685b601677c8c00ae22acbad858a7e41e60085">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112375" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/375/CWE758_Undefined_Behavior__struct_malloc_use_05.c" language="C" size="3542" checksum="a92345dc7cc3f53154d8266d2226f9b4302a090c">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112376" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/376/CWE758_Undefined_Behavior__struct_malloc_use_06.c" language="C" size="3512" checksum="97e051fbbf51da6b8f4291760d77635958b8b357">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112377" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/377/CWE758_Undefined_Behavior__struct_malloc_use_07.c" language="C" size="3492" checksum="aa8975673c6cecd2c1519cd8f9787ed3c2c120b1">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112378" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/378/CWE758_Undefined_Behavior__struct_malloc_use_08.c" language="C" size="3592" checksum="e191c4ffeb5ce007265c0e3ef0933d4b34cf5d4b">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112379" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/379/CWE758_Undefined_Behavior__struct_malloc_use_09.c" language="C" size="3300" checksum="5a27a10caf0248b9bdc0fc444759b9b1ea7a608c">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112380" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/380/CWE758_Undefined_Behavior__struct_malloc_use_10.c" language="C" size="3251" checksum="b1a9d3d14fa79d5421f994f2955a55a5e86e7824">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112381" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/381/CWE758_Undefined_Behavior__struct_malloc_use_11.c" language="C" size="3314" checksum="c8bd9a489c441e640b54869e5fbea6600e0ba8ad">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112382" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/382/CWE758_Undefined_Behavior__struct_malloc_use_12.c" language="C" size="3544" checksum="f3b100fbbd033925ac9d2e4481b3467bfea921bb">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112383" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/383/CWE758_Undefined_Behavior__struct_malloc_use_13.c" language="C" size="3318" checksum="52078bd871dcdff4a56c2819fe10614dadb8f886">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112384" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/384/CWE758_Undefined_Behavior__struct_malloc_use_14.c" language="C" size="3269" checksum="a9594c4f48113bfba767b339cb36ddfedf663b8f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112385" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/385/CWE758_Undefined_Behavior__struct_malloc_use_15.c" language="C" size="3438" checksum="f6f4fed868377a7ce6a9d5ce26611aac01f2fabc">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112386" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/386/CWE758_Undefined_Behavior__struct_malloc_use_16.c" language="C" size="2474" checksum="42302dc4595be97692a9cb46f6c7801ecb9199a3">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112387" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/387/CWE758_Undefined_Behavior__struct_malloc_use_17.c" language="C" size="2499" checksum="3b018ca8e4e990b0a0a990a33f109fa9e1808341">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112388" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/388/CWE758_Undefined_Behavior__struct_malloc_use_18.c" language="C" size="2361" checksum="235ab429313ba54eff8b1c9803bed682f0b4e020">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112389" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/389/CWE758_Undefined_Behavior__struct_new_use_01.cpp" language="C++" size="2148" checksum="e0c80007b60bb3f8d012cfda8b7f514f40affa39">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112390" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/390/CWE758_Undefined_Behavior__struct_new_use_02.cpp" language="C++" size="3068" checksum="ee038421848223971aa44bdcd7b6ad064c10894b">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112391" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/391/CWE758_Undefined_Behavior__struct_new_use_03.cpp" language="C++" size="3089" checksum="9be280f34871f419ce19d4af964c9eed9bce6013">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112392" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/392/CWE758_Undefined_Behavior__struct_new_use_04.cpp" language="C++" size="3454" checksum="daf0b9ec7e743a8155474f669c26722db12db7cd">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112393" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/393/CWE758_Undefined_Behavior__struct_new_use_05.cpp" language="C++" size="3425" checksum="e640aad4c36e47c79a957c0b146f66cb63d8af93">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112394" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/394/CWE758_Undefined_Behavior__struct_new_use_06.cpp" language="C++" size="3395" checksum="c3f844c28d56a3a39d041070273a3f155c8b1937">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112395" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/395/CWE758_Undefined_Behavior__struct_new_use_07.cpp" language="C++" size="3375" checksum="a02444a45d681b1a233eeccc75e1bf991f2e0066">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112396" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/396/CWE758_Undefined_Behavior__struct_new_use_08.cpp" language="C++" size="3475" checksum="b4e72d8c06cf4d43cd505e79ab44339e776d215b">
      <mixed line="42" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112397" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/397/CWE758_Undefined_Behavior__struct_new_use_09.cpp" language="C++" size="3183" checksum="449aad2a547899c32a5cf2748fc3a4eedb2972ed">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112398" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/398/CWE758_Undefined_Behavior__struct_new_use_10.cpp" language="C++" size="3134" checksum="9b8601e074811bf7d6183757ec43a0ef912bf049">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112399" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/399/CWE758_Undefined_Behavior__struct_new_use_11.cpp" language="C++" size="3197" checksum="49932dd3ed46c770fdabb0ba8d30ec3482cbbb32">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112400" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/400/CWE758_Undefined_Behavior__struct_new_use_12.cpp" language="C++" size="3399" checksum="ec4b2ed5f8a94ed7263b8725ebf496d497edfaf6">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112401" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/401/CWE758_Undefined_Behavior__struct_new_use_13.cpp" language="C++" size="3201" checksum="18db8889a585cab31420cf0aa382d278579497f7">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112402" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/402/CWE758_Undefined_Behavior__struct_new_use_14.cpp" language="C++" size="3152" checksum="1c9a6b09d89af93c878d9345aa82be5269f8db4a">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112403" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/403/CWE758_Undefined_Behavior__struct_new_use_15.cpp" language="C++" size="3321" checksum="06292921b5dd51c28a6c6e11ac754e8636539fbf">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112404" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/404/CWE758_Undefined_Behavior__struct_new_use_16.cpp" language="C++" size="2392" checksum="ef19b733d0458f3def45ab1135ffd04846652702">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112405" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/405/CWE758_Undefined_Behavior__struct_new_use_17.cpp" language="C++" size="2411" checksum="f638eedc2228ade8fba1bd8164bbfc954dfc95d3">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112406" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/406/CWE758_Undefined_Behavior__struct_new_use_18.cpp" language="C++" size="2272" checksum="61d81277809660885c0fcc966fb6c7d38b0472f0">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112407" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/407/CWE758_Undefined_Behavior__struct_pointer_alloca_use_01.c" language="C" size="2384" checksum="a237d4e13b566acfdb691adcdd6dc4cf7b960d00">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112408" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/408/CWE758_Undefined_Behavior__struct_pointer_alloca_use_02.c" language="C" size="3457" checksum="93076e4a7dd539a28fa884d8899bc1875e2a0c42">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112409" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/409/CWE758_Undefined_Behavior__struct_pointer_alloca_use_03.c" language="C" size="3478" checksum="3b58e24fec1d1c70132055390b190d3e9939b67e">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112410" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/410/CWE758_Undefined_Behavior__struct_pointer_alloca_use_04.c" language="C" size="3843" checksum="c61f0f83bdb4e45ddbe01f52bd0854014233cb16">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112411" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/411/CWE758_Undefined_Behavior__struct_pointer_alloca_use_05.c" language="C" size="3814" checksum="ba6c14326ac333aacbe51209b7d66684eb92b9be">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112412" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/412/CWE758_Undefined_Behavior__struct_pointer_alloca_use_06.c" language="C" size="3784" checksum="d0d099921af6f0a49bc9fe6c5af0916951ffc10e">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112413" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/413/CWE758_Undefined_Behavior__struct_pointer_alloca_use_07.c" language="C" size="3764" checksum="ccdc6431260f074b7ffb6c6314fe47a72d162b2c">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112414" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/414/CWE758_Undefined_Behavior__struct_pointer_alloca_use_08.c" language="C" size="3864" checksum="09d639560c56c02325564aa43765e3190de16a8f">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112415" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/415/CWE758_Undefined_Behavior__struct_pointer_alloca_use_09.c" language="C" size="3572" checksum="8bd076bfbf74b72c0e19080ec0c8258a582cf298">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112416" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/416/CWE758_Undefined_Behavior__struct_pointer_alloca_use_10.c" language="C" size="3523" checksum="754712779b6257fbb63822fa00e73e1428bbe394">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112417" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/417/CWE758_Undefined_Behavior__struct_pointer_alloca_use_11.c" language="C" size="3586" checksum="3ab39b3b9fc6ee7a37c092af133e579eb421275d">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112418" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/418/CWE758_Undefined_Behavior__struct_pointer_alloca_use_12.c" language="C" size="3941" checksum="ec02abad36ccc241b7bcfb07e55887c22c7ca214">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112419" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/419/CWE758_Undefined_Behavior__struct_pointer_alloca_use_13.c" language="C" size="3590" checksum="94c0f9d76d596a70d8b12090aea0701f0e85a7e0">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112420" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/420/CWE758_Undefined_Behavior__struct_pointer_alloca_use_14.c" language="C" size="3541" checksum="c901a57ce5ac58a3edc6b400b66d520eb034e226">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112421" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/421/CWE758_Undefined_Behavior__struct_pointer_alloca_use_15.c" language="C" size="3706" checksum="1282b7d06903a428a312cde43a8e230f11cfaef5">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112422" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/422/CWE758_Undefined_Behavior__struct_pointer_alloca_use_16.c" language="C" size="2621" checksum="0aff09ef7c90fcb4809ece77779aaf3e324aa00a">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112423" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/423/CWE758_Undefined_Behavior__struct_pointer_alloca_use_17.c" language="C" size="2646" checksum="b266c6c56daea4c5425b299617f284639389ac4c">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112424" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/424/CWE758_Undefined_Behavior__struct_pointer_alloca_use_18.c" language="C" size="2508" checksum="16754e87b634609b14da6942a1e474b855f63dd1">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112425" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/425/CWE758_Undefined_Behavior__struct_pointer_malloc_use_01.c" language="C" size="2432" checksum="ca8ae01650967c8e1b0eadb09b54424604e0cc4c">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112426" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/426/CWE758_Undefined_Behavior__struct_pointer_malloc_use_02.c" language="C" size="3541" checksum="6bdb173f087a52742a1ba075c86b95c3af394d29">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112427" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/427/CWE758_Undefined_Behavior__struct_pointer_malloc_use_03.c" language="C" size="3562" checksum="94af71d2eee78e96892372315162863157c108cb">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112428" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/428/CWE758_Undefined_Behavior__struct_pointer_malloc_use_04.c" language="C" size="3927" checksum="ea5702387e61eb4b89c950849ab49a9dfb76ea27">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112429" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/429/CWE758_Undefined_Behavior__struct_pointer_malloc_use_05.c" language="C" size="3898" checksum="27fc3a29ca10fcfa7ca763a19175fe9807ce8266">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112430" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/430/CWE758_Undefined_Behavior__struct_pointer_malloc_use_06.c" language="C" size="3868" checksum="bfd21bfffed7134b5ea13c7456e1358f00de5dd7">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112431" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/431/CWE758_Undefined_Behavior__struct_pointer_malloc_use_07.c" language="C" size="3848" checksum="f155b8a7b60b7d1e6c01ceadfc5b99c274984213">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112432" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/432/CWE758_Undefined_Behavior__struct_pointer_malloc_use_08.c" language="C" size="3948" checksum="7121c443dec37ede16b54eed4a11da0c40f689d1">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112433" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/433/CWE758_Undefined_Behavior__struct_pointer_malloc_use_09.c" language="C" size="3656" checksum="b5043519c5a73b941fe556852423a341547c7847">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112434" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/434/CWE758_Undefined_Behavior__struct_pointer_malloc_use_10.c" language="C" size="3607" checksum="86426d7ce7b8eb6170a6648af6abd77b882e52a5">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112435" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/435/CWE758_Undefined_Behavior__struct_pointer_malloc_use_11.c" language="C" size="3670" checksum="155643c4cf8954360918fae8d96b2fe19285e57f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112436" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/436/CWE758_Undefined_Behavior__struct_pointer_malloc_use_12.c" language="C" size="4053" checksum="7a888b31d34df1f06e9845c3518b053f02bceef1">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112437" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/437/CWE758_Undefined_Behavior__struct_pointer_malloc_use_13.c" language="C" size="3674" checksum="65f2c45a8d4ef32cfc97544d1ec55ae4ba7189f1">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112438" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/438/CWE758_Undefined_Behavior__struct_pointer_malloc_use_14.c" language="C" size="3625" checksum="44a79dd1bfbdeb23e7fd6426b5a69fb7cbdd3ae6">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112439" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/439/CWE758_Undefined_Behavior__struct_pointer_malloc_use_15.c" language="C" size="3778" checksum="2a40490b83cbe0fb1a64bb816209f20d3d2cbb53">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112440" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/440/CWE758_Undefined_Behavior__struct_pointer_malloc_use_16.c" language="C" size="2677" checksum="79778e00983f1e9e684f7f837c1089ab3d28ad15">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112441" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/441/CWE758_Undefined_Behavior__struct_pointer_malloc_use_17.c" language="C" size="2702" checksum="777863f2a55f7054fbea5a37a45ea6e9421090d8">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112442" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/442/CWE758_Undefined_Behavior__struct_pointer_malloc_use_18.c" language="C" size="2556" checksum="d7758a5d4f44a11b98e8f1db145170c9ece81bb0">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112443" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/443/CWE758_Undefined_Behavior__struct_pointer_new_use_01.cpp" language="C++" size="2294" checksum="7e212f9dd5fae743f342f4ebb2195ae4eb2bd900">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112444" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/444/CWE758_Undefined_Behavior__struct_pointer_new_use_02.cpp" language="C++" size="3344" checksum="f48ac6e0f235edbbec79f9bbc8245a5f19ce5d8c">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112445" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/445/CWE758_Undefined_Behavior__struct_pointer_new_use_03.cpp" language="C++" size="3365" checksum="86318b2e63ba5d884a5c32c1c0e2b625ab1f7841">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112446" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/446/CWE758_Undefined_Behavior__struct_pointer_new_use_04.cpp" language="C++" size="3730" checksum="d229ddb038b9cba0ba05cf652d048466f493753f">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112447" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/447/CWE758_Undefined_Behavior__struct_pointer_new_use_05.cpp" language="C++" size="3701" checksum="c427c8cc03da34ff30d40c9c0817952a8811cf03">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112448" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/448/CWE758_Undefined_Behavior__struct_pointer_new_use_06.cpp" language="C++" size="3671" checksum="ec3c39d9d310aba3fcdbf35163c3f5ba6fce8eba">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112449" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/449/CWE758_Undefined_Behavior__struct_pointer_new_use_07.cpp" language="C++" size="3651" checksum="2d14c618224f87dfa14e576766601266fd31b534">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112450" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/450/CWE758_Undefined_Behavior__struct_pointer_new_use_08.cpp" language="C++" size="3751" checksum="5b5244eaa9188f5524d9afa3c4fdb8d213cca426">
      <mixed line="42" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112451" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/451/CWE758_Undefined_Behavior__struct_pointer_new_use_09.cpp" language="C++" size="3459" checksum="cf56f80e66b8145b38e1a1f1c77cd52e3ae575f9">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112452" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/452/CWE758_Undefined_Behavior__struct_pointer_new_use_10.cpp" language="C++" size="3410" checksum="c7193d00a060d7664fda2a58630a12381409cd72">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112453" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/453/CWE758_Undefined_Behavior__struct_pointer_new_use_11.cpp" language="C++" size="3473" checksum="11ef0263170b496fc6850e4038cbc24b5ad83326">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112454" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/454/CWE758_Undefined_Behavior__struct_pointer_new_use_12.cpp" language="C++" size="3797" checksum="fabacdf3edc3b809154494be5d92634239609366">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112455" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/455/CWE758_Undefined_Behavior__struct_pointer_new_use_13.cpp" language="C++" size="3477" checksum="089f2f47893961677a1eda23a0368a290588b0cc">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112456" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/456/CWE758_Undefined_Behavior__struct_pointer_new_use_14.cpp" language="C++" size="3428" checksum="62c3a5918b91376ab6ef0c739428b4bc93be8bd0">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112457" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/457/CWE758_Undefined_Behavior__struct_pointer_new_use_15.cpp" language="C++" size="3581" checksum="de55e050146ef3f8726ee8d3d116efe9388a2ae1">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112458" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/458/CWE758_Undefined_Behavior__struct_pointer_new_use_16.cpp" language="C++" size="2546" checksum="aea4773c216d30eabbcc689429222a3a01489023">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112459" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/459/CWE758_Undefined_Behavior__struct_pointer_new_use_17.cpp" language="C++" size="2565" checksum="1248e305d548813d533a56fa4875b0d88b622663">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112460" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/460/CWE758_Undefined_Behavior__struct_pointer_new_use_18.cpp" language="C++" size="2418" checksum="5809b731c526b3ae7e9c3620a29b2396cabff964">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112461" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Undefined Behavior - Bare Return From Function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/461/CWE758_Undefined_Behavior__w32_bare_return_01.c" language="C" size="1517" checksum="5d4860703b0bdd87d1ae35fa4b9ebe9b4af8c199">
      <mixed line="13" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112462" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Undefined Behavior - Bare Return From Function With Implicit Return Type]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/462/CWE758_Undefined_Behavior__w32_bare_return_implicit_01.c" language="C" size="1571" checksum="eb4ed4003e98024a39bfb1d239c503b97da1c138">
      <mixed line="13" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112463" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Undefined Behavior - Missing Return Value From Function With Implicit Return Type]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/463/CWE758_Undefined_Behavior__w32_no_return_implicit_01.c" language="C" size="1555" checksum="d0aa609657ea299b1414f50d46678db950145969">
      <mixed line="13" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112464" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[Undefined Behavior - Return Value From Function Using Implicit Return Type]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/464/CWE758_Undefined_Behavior__w32_return_implicit_01.c" language="C" size="1583" checksum="27a292eb82fee802bcda9955e633428bd0a53574">
      <mixed line="13" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112465" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/465/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_01.c" language="C" size="2079" checksum="0951257f35377168e578847aa075338c341fdd09">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112466" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/466/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_02.c" language="C" size="2877" checksum="8d1ed130a643b55eb94c0b74ff068548844f851b">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112467" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/467/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_03.c" language="C" size="2898" checksum="28a5283bda3bb11b0d0c2d91801c304a1283b794">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112468" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/468/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_04.c" language="C" size="3263" checksum="2c092ae3af4037b5576abd9d309e288ce18ed783">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112469" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/469/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_05.c" language="C" size="3234" checksum="f0cb22fa1d3505c74eaedf1f70d08ab6b09ffbf8">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112470" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/470/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_06.c" language="C" size="3204" checksum="eaf2ec47686749420f8dacb9c8f2ad27c48c98f0">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112471" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/471/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_07.c" language="C" size="3184" checksum="16c9f0a7df239cb4822ed9a20b8c2e3d0a7144bf">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112472" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/472/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_08.c" language="C" size="3284" checksum="d37e5923624fb39298d9a2d95e58f15fe2b68405">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112473" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/473/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_09.c" language="C" size="2992" checksum="4aa087f2728bbdbaf40b03c76ca84003a19541a2">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112474" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/474/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_10.c" language="C" size="2943" checksum="61d47fbf0f8b3fee9d45e3e7121e4d92c7050378">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112475" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/475/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_11.c" language="C" size="3006" checksum="8c2494b5d07aaef271cd191fb7f036bc32234702">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112476" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/476/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_12.c" language="C" size="3106" checksum="3b868d227dc7f1c79e7198076393963bc928fc5f">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112477" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/477/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_13.c" language="C" size="3010" checksum="83a9b30b762f679f524b9618446c8952eb2bf712">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112478" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/478/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_14.c" language="C" size="2961" checksum="79c47493d4552e78a93c314d702212fe5e34b102">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112479" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/479/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_15.c" language="C" size="3162" checksum="113d937a543d62cee1b49a17bc7b4fa3a4d17927">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112480" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/480/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_16.c" language="C" size="2296" checksum="15b005a2819a734ffcda61b4ac5f64fb8955d026">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112481" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/481/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_17.c" language="C" size="2321" checksum="760eb11506ec077ab9d1950c9da4d969c78e1d5f">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112482" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: alloca_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from alloca without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/482/CWE758_Undefined_Behavior__wchar_t_pointer_alloca_use_18.c" language="C" size="2203" checksum="77d0862419d4d4f83315c237c77847cdad7c623e">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112483" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/483/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_01.c" language="C" size="2127" checksum="2cbc754e31db3a1d5968b9db9f1eb0ad825937e1">
      <mixed line="24" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112484" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/484/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_02.c" language="C" size="2961" checksum="3ad0694fd2d665e88b2e1ebfe75893b2d51ce4cd">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112485" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/485/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_03.c" language="C" size="2982" checksum="91e1327056e393bd6bfd4dce007649bb2849a016">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112486" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/486/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_04.c" language="C" size="3347" checksum="162fa0df6835dbb6d5eb9d84c89dc0d3cbee1166">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112487" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/487/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_05.c" language="C" size="3318" checksum="50e58559f493113ce5c8699f3a8fa20469dcd366">
      <mixed line="32" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112488" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/488/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_06.c" language="C" size="3288" checksum="c36639ea582d90bbead8a25b0e8613e50d45f8ac">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112489" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/489/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_07.c" language="C" size="3268" checksum="8791dedd61a4551e349c54fcaad6a97345479514">
      <mixed line="31" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112490" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/490/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_08.c" language="C" size="3368" checksum="406f18e76e9f2b482d30dd4b0d44aad670d562c0">
      <mixed line="39" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112491" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/491/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_09.c" language="C" size="3076" checksum="1fa9fec86d069efd55883c4a0e31717951c653c2">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112492" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/492/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_10.c" language="C" size="3027" checksum="20b36601ef45e9bc52163d743fa4bd9079b6d2c6">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112493" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/493/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_11.c" language="C" size="3090" checksum="0f842fae9e908482682414bffd7c498d4bf99906">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112494" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/494/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_12.c" language="C" size="3218" checksum="ddbc4efa2fa73026de280304350ff5f75c5a151e">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112495" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/495/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_13.c" language="C" size="3094" checksum="7db5b32722260e971666286302dc6b1be0d3e94b">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112496" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/496/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_14.c" language="C" size="3045" checksum="74a2c3128fd948dc9bf6f2b5171692b48995b914">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112497" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/497/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_15.c" language="C" size="3234" checksum="7aae3b7aa405602e42846c3fbf273bbcce4b414a">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112498" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/498/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_16.c" language="C" size="2352" checksum="a4a0933bca1e158666f5eb739349eb57e757765b">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112499" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/499/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_17.c" language="C" size="2377" checksum="89af05be5f8d2f2cfbd44a86c12ffa41049aa213">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112500" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: malloc_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data from malloc without initialization<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/500/CWE758_Undefined_Behavior__wchar_t_pointer_malloc_use_18.c" language="C" size="2251" checksum="3e3a95a66b61576d1104435427318d729c35a137">
      <mixed line="26" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112501" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/501/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_01.cpp" language="C++" size="2028" checksum="f49bcdaf30d2250d0e71628d0ab5e3ff393964e5">
      <mixed line="27" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112502" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/502/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_02.cpp" language="C++" size="2838" checksum="3f10c254b1e4282518d2c462bb3605ffcf27cbcc">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112503" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/503/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_03.cpp" language="C++" size="2859" checksum="44d99ad9b4ee47da30edbe0f7ef8a14e579fda32">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112504" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/504/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_04.cpp" language="C++" size="3224" checksum="eb0f02e148013eeded120e9585d4b7c0eaf69f2f">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112505" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/505/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_05.cpp" language="C++" size="3195" checksum="19d3b321017369e9cd08433f2f9e8c15793407fa">
      <mixed line="35" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112506" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/506/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_06.cpp" language="C++" size="3165" checksum="a8b57086e9476f86f67c5163c8921a4fe40729e9">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112507" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/507/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_07.cpp" language="C++" size="3145" checksum="fb7edfc9650d4dba6a4b4d08fb6acfb9cd96256b">
      <mixed line="34" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112508" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/508/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_08.cpp" language="C++" size="3245" checksum="8a5648673f70d27bee64c6bd7becbd95ccdba0f5">
      <mixed line="42" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112509" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/509/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_09.cpp" language="C++" size="2953" checksum="330b3d2a466fd25ae90429ff5e243f20f005aea8">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112510" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/510/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_10.cpp" language="C++" size="2904" checksum="4300d80f86ad9f5c183e943b108fb55c604a4d41">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112511" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/511/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_11.cpp" language="C++" size="2967" checksum="ac2f6088837e0b6f1a07151681e0923c2d374943">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112512" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/512/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_12.cpp" language="C++" size="3071" checksum="82922d122f676d6eb4cbc7aa382bf4d52acea7ee">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112513" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/513/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_13.cpp" language="C++" size="2971" checksum="7cec9459eb69b510cb078f77da9472091bb0336c">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112514" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/514/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_14.cpp" language="C++" size="2922" checksum="49db10e4d1bb31fa9f57d6cb719ba5f23c4a09dc">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112515" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/515/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_15.cpp" language="C++" size="3111" checksum="9f269c941b04f53d06e4123e5843603d0aba2ce7">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112516" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/516/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_16.cpp" language="C++" size="2260" checksum="899e1400cd354d49d74b2fdedd793e1beb2b2b4c">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112517" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/517/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_17.cpp" language="C++" size="2279" checksum="de41a73d8433b30ca98218a664abc7b3e5860f26">
      <mixed line="30" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="112518" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 758 Undefined Behavior<br/> Sinks: new_use<br/> GoodSink: Initialize then use data<br/> BadSink : Use data<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/112/518/CWE758_Undefined_Behavior__wchar_t_pointer_new_use_18.cpp" language="C++" size="2152" checksum="fd6c34b198908d0f89f2b1f67b526c3adcb82c00">
      <mixed line="29" name="CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior"></mixed>
    </file>
  </testcase>
  <testcase id="116803" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/803/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_01.c" language="C" size="2287" checksum="73fa3e1150e9bfd7e6890c25a2f0d65add3ae13a">
      <mixed line="27" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116804" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/804/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_02.c" language="C" size="2972" checksum="fffed19ce5a38b96fff520751e5d6d360648a7c7">
      <mixed line="29" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116805" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/805/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_03.c" language="C" size="2993" checksum="a2001740c3a987dabea0f1e814fe1c895c51a674">
      <mixed line="29" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116806" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/806/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_04.c" language="C" size="3358" checksum="0bf0b2af3af2611da4ea577d3e233f2b967f2531">
      <mixed line="35" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116807" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/807/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_05.c" language="C" size="3329" checksum="c2dd983aee9d82706b14e0e8078e09a98504817a">
      <mixed line="35" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116808" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/808/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_06.c" language="C" size="3299" checksum="92575de225a390ece34a9a0e7eebc98b47effa1a">
      <mixed line="34" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116809" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/809/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_07.c" language="C" size="3279" checksum="37598748840137cfddb48464913ce84f6cf0b94e">
      <mixed line="34" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116810" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/810/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_08.c" language="C" size="3379" checksum="ccabc4ca98e03060ecfaa63be48766fdc3d4c07d">
      <mixed line="42" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116811" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/811/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_09.c" language="C" size="3087" checksum="a498537e2bbb3d593c8177685f3d9d2d9d351c99">
      <mixed line="29" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116812" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/812/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_10.c" language="C" size="3038" checksum="137c0cea3fa707dbdb8cf02be9d76c10d85d6f49">
      <mixed line="29" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116813" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/813/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_11.c" language="C" size="3101" checksum="7770ada1a5ac0300ecfb813409d9a44f689576a0">
      <mixed line="29" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116814" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/814/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_12.c" language="C" size="2823" checksum="2a331981e1551b9b00dfc65fe235adf59195705c">
      <mixed line="29" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116815" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/815/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_13.c" language="C" size="3105" checksum="33f72b86840d6d1e5a737a854857a48c6b9c8d58">
      <mixed line="29" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116816" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/816/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_14.c" language="C" size="3056" checksum="87aeedc597616938f4ef2592e1211c40d8378ee4">
      <mixed line="29" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116817" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/817/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_15.c" language="C" size="3395" checksum="9b246d3a86ff18763ab5a40feaa1cd761486130b">
      <mixed line="30" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116818" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/818/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_16.c" language="C" size="2460" checksum="06ed1091271702dff00081e0d3ed4274494f1e29">
      <mixed line="29" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116819" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/819/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_17.c" language="C" size="2441" checksum="f354ee663b9a0566dddce3e0ab5793cc8c8bdb18">
      <mixed line="30" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116820" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/820/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_18.c" language="C" size="2392" checksum="046850af07152c774a6c86acce217bed047bb488">
      <mixed line="29" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116821" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/821/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_21.c" language="C" size="3719" checksum="d46177356232c7a8981461a77a252a0edb747d40">
      <mixed line="28" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116822" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/822/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_22a.c" language="C" size="3890" checksum="7e8427d46b2515b9c1da1f5ab19fc5820e86846e"></file>
    <file path="000/116/822/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_22b.c" language="C" size="2617" checksum="0613a3f983af71a946a0c0826706c6cd69087f92">
      <mixed line="28" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116823" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/823/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_31.c" language="C" size="2520" checksum="389f882f9c6b67be9441609139f63a3467ce32a1">
      <mixed line="30" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116824" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 32 Data flow: two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/824/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_32.c" language="C" size="2759" checksum="5e4c5fc32fb6d7594d0f338e02e22c51447498af">
      <mixed line="35" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116825" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/825/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_33.cpp" language="C++" size="2491" checksum="88661203508fe61ce4d7f54ada1d3e1ab66d04ee">
      <mixed line="33" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116826" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/826/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_34.c" language="C" size="2931" checksum="77c80a60159aee3c1cc6813f243e38ae4445e522">
      <mixed line="37" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116827" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/827/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_41.c" language="C" size="2499" checksum="b67c821f37f646ea686b368533903cce076a5206">
      <mixed line="23" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116828" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/828/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_42.c" language="C" size="2548" checksum="e833cfe1d721ea2b87b6b819f52102a6d72af1ca">
      <mixed line="33" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116829" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/829/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_43.cpp" language="C++" size="2487" checksum="b43f60d01aee9b97b1ca860b58a6ce5b24a36c5e">
      <mixed line="35" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116830" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/830/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_44.c" language="C" size="2695" checksum="5d1427cd9f04119d358f716d4c8fe1ed47b31cc9">
      <mixed line="23" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116831" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/831/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_45.c" language="C" size="3068" checksum="478dd71bb23a06abd874bab708ad6a42fa31fd33">
      <mixed line="27" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116832" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/832/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_51a.c" language="C" size="2614" checksum="5cc219a1594de6e943f2b6c089afe3627e518729"></file>
    <file path="000/116/832/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_51b.c" language="C" size="1186" checksum="27fae34437057ae27c5eee235a9d934dc1de75f4">
      <mixed line="23" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116833" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/833/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_52a.c" language="C" size="2631" checksum="e1afdf2776e2f57326894cb107910fe82dc31aa0"></file>
    <file path="000/116/833/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_52b.c" language="C" size="1464" checksum="c8aad8c5767feaa914b0d6dfe5731ddacfb7c59d"></file>
    <file path="000/116/833/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_52c.c" language="C" size="1203" checksum="9639464fd90d02a7c55c55ae28e624674856072a">
      <mixed line="23" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116834" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/834/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_53a.c" language="C" size="2658" checksum="efbd4e3c051937ead819f0913b5e3deced37dec9"></file>
    <file path="000/116/834/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_53b.c" language="C" size="1491" checksum="98ba71321527f370adf6a457e586d3b399c1a2e6"></file>
    <file path="000/116/834/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_53c.c" language="C" size="1491" checksum="33ec753d1260a4409de955a383915158a6c7d5b6"></file>
    <file path="000/116/834/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_53d.c" language="C" size="1230" checksum="facd30ebf9e912b698971690073437b977fc8a4c">
      <mixed line="23" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116835" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/835/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_54a.c" language="C" size="2659" checksum="c324338fe5be79c5ab96bc200a5aa525e4df1486"></file>
    <file path="000/116/835/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_54b.c" language="C" size="1492" checksum="7260f768a3406e1ca9c9727a10acf7a5e99bbefd"></file>
    <file path="000/116/835/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_54c.c" language="C" size="1492" checksum="20c10e59e57179d410edd849328aba22d87b3a13"></file>
    <file path="000/116/835/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_54d.c" language="C" size="1492" checksum="40bbd423043b96637dc674cf26035c7e02d7db60"></file>
    <file path="000/116/835/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_54e.c" language="C" size="1231" checksum="ca5b04428c745fcd7494695ce6ef144f391d2203">
      <mixed line="23" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116836" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/836/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_61a.c" language="C" size="2600" checksum="6219bfebe9acfab48f700dcb2bc512fd04f6d6a0">
      <mixed line="29" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/836/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_61b.c" language="C" size="1264" checksum="f44dbf9f82f915e8ce3f4972de88b2aaf73d0094"></file>
  </testcase>
  <testcase id="116837" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/837/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_62a.cpp" language="C++" size="2285" checksum="b5c67fbf6cb5a81f2ce36ef28a8b1f3cc7280be8">
      <mixed line="32" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/837/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_62b.cpp" language="C++" size="1219" checksum="dd59e56d2390c1a56cac92769ec7db3056538be3"></file>
  </testcase>
  <testcase id="116838" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/838/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_63a.c" language="C" size="2585" checksum="611780bd601fef17d4862a08aabe95112eabed7a"></file>
    <file path="000/116/838/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_63b.c" language="C" size="1302" checksum="b2bdd97207f7b64841102dc12814728cc46cb35e">
      <mixed line="24" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116839" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/839/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_64a.c" language="C" size="2597" checksum="ea3178cdb2e29aa9476858bc549a38d08f82a053"></file>
    <file path="000/116/839/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_64b.c" language="C" size="1623" checksum="ef098b949ab1ec0e7f7268774a1d0039e9fb1fcc">
      <mixed line="27" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116840" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/840/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_65a.c" language="C" size="2777" checksum="5f3707579afa059d94b1606cc4ed0a8f8dcbafbd"></file>
    <file path="000/116/840/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_65b.c" language="C" size="1280" checksum="dd2b64871622c1c152f41b9a75581c1c19f79c6f">
      <mixed line="23" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116841" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/841/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_66a.c" language="C" size="2734" checksum="e86d16bcda453a89c0e2a63385ef46e5551a4dd5"></file>
    <file path="000/116/841/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_66b.c" language="C" size="1353" checksum="8a78eec6e49db03e618b1bf976c996681fd46385">
      <mixed line="25" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116842" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/842/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_67a.c" language="C" size="3220" checksum="37822708b1c272feb0bebfd8e8e8ca8dc89c7ff4"></file>
    <file path="000/116/842/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_67b.c" language="C" size="1690" checksum="29d0bfc1b17f143d6e365033436b19909afd0642">
      <mixed line="29" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116843" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/843/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_68a.c" language="C" size="2996" checksum="d763437a9feca0525738a8b0c34e80cf146bf7ff"></file>
    <file path="000/116/843/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_68b.c" language="C" size="1604" checksum="fb617e17b5f84d387027d135e93874eb6e7a7d31">
      <mixed line="28" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116844" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/844/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_72a.cpp" language="C++" size="2744" checksum="f504da3c7531e589165a51a6751ddd5bf5640a17"></file>
    <file path="000/116/844/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_72b.cpp" language="C++" size="1387" checksum="b6a5cf7d9bc96faaba501e528c4bfb0531acdd2c">
      <mixed line="31" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116845" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/845/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_73a.cpp" language="C++" size="2598" checksum="38b4a4691fe2c8393bcd22a134a16003e73b4158"></file>
    <file path="000/116/845/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_73b.cpp" language="C++" size="1377" checksum="753c1eda871b4ad4e6eae90671dc1950feb651d1">
      <mixed line="31" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116846" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/846/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_74a.cpp" language="C++" size="2563" checksum="3af0f33cdac3d98548f896afca719f4290ff3366"></file>
    <file path="000/116/846/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_74b.cpp" language="C++" size="1370" checksum="137026bc78f5963f2cd6d95bf85d7fc6c94f8328">
      <mixed line="31" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116847" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/847/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_81.h" language="C" size="1459" checksum="e1fdb5e7ae472b7f462f049263dd5fea5e89d7ec"></file>
    <file path="000/116/847/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_81_bad.cpp" language="C++" size="1097" checksum="fa5b977a77b18778358b0853727341fce654bcb4">
      <mixed line="26" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/847/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_81_goodB2G.cpp" language="C++" size="1120" checksum="9b7facd2b981eecebd53de855e9e96e2534d70f1"></file>
    <file path="000/116/847/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_81a.cpp" language="C++" size="2618" checksum="71b899ada2b3b1eac515da6886e971387c5a4de0"></file>
  </testcase>
  <testcase id="116848" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/848/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_82.h" language="C" size="1439" checksum="ad6c1b46d50916ca33c2ce985f32c6def6f44b13"></file>
    <file path="000/116/848/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_82_bad.cpp" language="C++" size="1089" checksum="5aedbe6def3b74ddadd5b3b1ff7f9448193efb3a">
      <mixed line="26" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/848/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_82_goodB2G.cpp" language="C++" size="1112" checksum="26a9f00fd7d25f818401bdc932e754da599eb97f"></file>
    <file path="000/116/848/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_82a.cpp" language="C++" size="2658" checksum="15d99978dfd80bd2e990bfd12085f46ce56456e9"></file>
  </testcase>
  <testcase id="116849" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/849/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_83.h" language="C" size="1484" checksum="3980d47714d716aac4706e7e42d2fcaaf15f14a1"></file>
    <file path="000/116/849/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_83_bad.cpp" language="C++" size="1465" checksum="1440e5f46e4ff9d185a4040c7fdfe3b6c51bdeae">
      <mixed line="32" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/849/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_83_goodB2G.cpp" language="C++" size="1500" checksum="25cc84f2486d74dba1bc930e0120a62059ee1974"></file>
    <file path="000/116/849/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_83a.cpp" language="C++" size="2206" checksum="957944f517952913ac206eef3390aee37aec4acf"></file>
  </testcase>
  <testcase id="116850" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using fopen()<br/> Sinks:<br/> GoodSink: Close the file using fclose()<br/> BadSink : Do not close file<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/850/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_84.h" language="C" size="1509" checksum="02477e752e42d2e5aa66b195eec4555d103a1f22"></file>
    <file path="000/116/850/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_84_bad.cpp" language="C++" size="1490" checksum="6991fbb0040a339f9c23449eb2aebe3432293e99">
      <mixed line="32" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/850/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_84_goodB2G.cpp" language="C++" size="1525" checksum="4f37e4f2e28b5ceb580f18e5b14b07a985a6e332"></file>
    <file path="000/116/850/CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_84a.cpp" language="C++" size="2451" checksum="5c278ed9ce1015468165045423f1b5c27b75465b"></file>
  </testcase>
  <testcase id="116851" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/851/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_01.c" language="C" size="2507" checksum="a6f301e41c12de26be263b2cbaa11f114995d35d">
      <mixed line="37" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116852" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/852/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_02.c" language="C" size="3237" checksum="3c60827d6423159446ebc5e7264d1200cd1c69a7">
      <mixed line="39" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116853" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/853/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_03.c" language="C" size="3258" checksum="c03d3f738213a120300e43d7323450a5423d7b00">
      <mixed line="39" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116854" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/854/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_04.c" language="C" size="3623" checksum="7f9757e593d5f79cacf018afdba77697530d3e1c">
      <mixed line="45" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116855" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/855/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_05.c" language="C" size="3594" checksum="1b5d0e713c36db3dc8c300386cf8095913a407cf">
      <mixed line="45" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116856" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/856/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_06.c" language="C" size="3564" checksum="6e18bdaa3051873d64676181f740dbad4196df4c">
      <mixed line="44" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116857" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/857/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_07.c" language="C" size="3544" checksum="9ebbb3bd06716fe694f71133363c9335a39b3802">
      <mixed line="44" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116858" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/858/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_08.c" language="C" size="3644" checksum="13566cb886494ef8f1f29e04f3073c2a3b177e86">
      <mixed line="52" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116859" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/859/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_09.c" language="C" size="3352" checksum="2a91e1fc10a11901d330bbcbe62a2ec46c408890">
      <mixed line="39" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116860" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/860/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_10.c" language="C" size="3303" checksum="aebb52b1ccd8ab87ba4b587a0020a1260c6ed5dc">
      <mixed line="39" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116861" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/861/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_11.c" language="C" size="3366" checksum="de831eff898ddb569ce06ea868b1763494dc15e1">
      <mixed line="39" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116862" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/862/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_12.c" language="C" size="3037" checksum="f34ee4183bfe722d070f8387bcb8b747aaf2f3ae">
      <mixed line="39" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116863" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/863/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_13.c" language="C" size="3370" checksum="ac83e2746c91fa049528421f978c0af56650de78">
      <mixed line="39" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116864" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/864/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_14.c" language="C" size="3321" checksum="1ec7f28dfec597fab0d4eab0142663597e6a08b0">
      <mixed line="39" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116865" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/865/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_15.c" language="C" size="3660" checksum="93866b81d318bdfe4b8b329470368a36cb8035b3">
      <mixed line="40" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116866" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/866/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_16.c" language="C" size="2680" checksum="78c402498ca24cf3ff6de8171d4152056f77cbc3">
      <mixed line="39" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116867" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/867/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_17.c" language="C" size="2661" checksum="05791f50ac9c7b34fa7cd350cbee489aea7189fd">
      <mixed line="40" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116868" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/868/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_18.c" language="C" size="2612" checksum="85f49d9be5e852fcd65253223fd4a4a1cc8dbaf9">
      <mixed line="39" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116869" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/869/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_21.c" language="C" size="3975" checksum="fa79510f74dced96398947cfaf061d2e2a4880d1">
      <mixed line="37" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116870" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/870/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_22a.c" language="C" size="4140" checksum="a87f6d8f134394ae719c0bc8b7d3d6953bf121b0"></file>
    <file path="000/116/870/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_22b.c" language="C" size="2724" checksum="e84cc9014c57346697dc04f20e5b7f9995b78d1c">
      <mixed line="37" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116871" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/871/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_31.c" language="C" size="2728" checksum="68543e860cb35f3ea3d0424fb3706c619de6de2a">
      <mixed line="40" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116872" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 32 Data flow: two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/872/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_32.c" language="C" size="2955" checksum="00d86d48e7584b8d5082880876092e65ad8a1a6d">
      <mixed line="45" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116873" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/873/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_33.cpp" language="C++" size="2701" checksum="d9b45b415107e8b17cc629f7707b7dfbc2d00939">
      <mixed line="43" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116874" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/874/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_34.c" language="C" size="3136" checksum="eae6066de065958f732e806bc5180348ea05f4f0">
      <mixed line="47" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116875" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/875/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_41.c" language="C" size="2713" checksum="ef2f5139c6fe6d15d862d396dc5ffb7dd557b430">
      <mixed line="32" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116876" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/876/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_42.c" language="C" size="2756" checksum="1956c9a61b918827033a4a97a154bb83377dde39">
      <mixed line="43" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116877" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/877/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_43.cpp" language="C++" size="2703" checksum="a5c6e5fd5d84a0848217e51c630c08e95d338321">
      <mixed line="45" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116878" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/878/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_44.c" language="C" size="2903" checksum="06eace9c9f86532bacaefad1692cc051612dc095">
      <mixed line="32" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116879" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/879/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_45.c" language="C" size="3270" checksum="d3a86309c631a8cca1e7bcdb5bd31872c29caffa">
      <mixed line="36" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116880" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/880/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_51a.c" language="C" size="2827" checksum="3a6fe9cbb03acdad412a47c8f92b63f16e98e6a6"></file>
    <file path="000/116/880/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_51b.c" language="C" size="1306" checksum="d76c9977826dabc2a57d1c8b6f046bff907e4cad">
      <mixed line="32" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116881" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/881/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_52a.c" language="C" size="2844" checksum="e772056f99c8209b3afab6da78d9d65bd1354dd3"></file>
    <file path="000/116/881/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_52b.c" language="C" size="1577" checksum="011be8fae8b6542e5d98b4e9aafa8aead183d002"></file>
    <file path="000/116/881/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_52c.c" language="C" size="1323" checksum="9f89c95fe6ca34c4f6ab413ce2255b7627a68c6c">
      <mixed line="32" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116882" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/882/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_53a.c" language="C" size="2871" checksum="b92bec482075edfef13ecd89c36e0e0045ab1691"></file>
    <file path="000/116/882/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_53b.c" language="C" size="1604" checksum="847d7c961a795b4394a399403ae50a2694c8483d"></file>
    <file path="000/116/882/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_53c.c" language="C" size="1604" checksum="3dbc18bcc4b5dad7bc4e8f13df5c7850c837beb3"></file>
    <file path="000/116/882/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_53d.c" language="C" size="1350" checksum="bce6878018804c19da91872bf63f35a07a24f211">
      <mixed line="32" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116883" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/883/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_54a.c" language="C" size="2872" checksum="961889746fa30a04b228af4340db751d7901dcf1"></file>
    <file path="000/116/883/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_54b.c" language="C" size="1605" checksum="c253b0e2f574d18328863b2612b81f35a594b912"></file>
    <file path="000/116/883/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_54c.c" language="C" size="1605" checksum="c949bc21e5d1c2423f6d4865e334fcb07ed5f37e"></file>
    <file path="000/116/883/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_54d.c" language="C" size="1605" checksum="893b0d9e1f4257b1f08ff948e531801aa281b015"></file>
    <file path="000/116/883/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_54e.c" language="C" size="1351" checksum="0fbee40e3eb320645b748ae58434c8a9f06341b2">
      <mixed line="32" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116884" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/884/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_61a.c" language="C" size="2752" checksum="537bc0401835dffc63eee836b13ec346d1a98466">
      <mixed line="39" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/884/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_61b.c" language="C" size="1433" checksum="459f9dd2325ef9c50edd9b7f202d38b5813d08a4"></file>
  </testcase>
  <testcase id="116885" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/885/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_62a.cpp" language="C++" size="2449" checksum="717c27a58001da4c7a9d8dc2edaf5b8a6de45f86">
      <mixed line="42" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/885/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_62b.cpp" language="C++" size="1395" checksum="43c992fff17a6561c09ef107e95894de2a0fda95"></file>
  </testcase>
  <testcase id="116886" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/886/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_63a.c" language="C" size="2798" checksum="177eef00a2911578532dbcc7435bf5d3cc1b72eb"></file>
    <file path="000/116/886/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_63b.c" language="C" size="1416" checksum="fccabc6189bbb06f562e97b1c8d3bf0502ed78c2">
      <mixed line="33" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116887" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/887/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_64a.c" language="C" size="2816" checksum="2b7713e50a78345c7368c6df34ddf8cf7d2cb747"></file>
    <file path="000/116/887/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_64b.c" language="C" size="1731" checksum="5bc56a6bbe1f18c6e9f8333845eeed3babde0a64">
      <mixed line="36" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116888" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/888/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_65a.c" language="C" size="2984" checksum="15cc4879961fd8a5f83bbc3314d7b22f31e62d37"></file>
    <file path="000/116/888/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_65b.c" language="C" size="1400" checksum="2b3023f6c0421d5682b8e8c9ebf811cae13ec5ca">
      <mixed line="32" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116889" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/889/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_66a.c" language="C" size="2941" checksum="06b2a80867ef7f1bb219b453d32bd098c48a0472"></file>
    <file path="000/116/889/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_66b.c" language="C" size="1467" checksum="0aa135bcfe2891c22cc77c10db6b40e38e7f6f2e">
      <mixed line="34" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116890" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/890/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_67a.c" language="C" size="3430" checksum="08aebae86f5edc1cd39abeaf496cb92c97a34cfa"></file>
    <file path="000/116/890/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_67b.c" language="C" size="1803" checksum="b825d3903046461d543941d2cf8bd7be6d97a5d6">
      <mixed line="38" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116891" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/891/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_68a.c" language="C" size="3205" checksum="9381d658eab076792a863e3cd18c32f830e07116"></file>
    <file path="000/116/891/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_68b.c" language="C" size="1714" checksum="55d8adf2c86804805e5fb5a0a6d58e54440da7f6">
      <mixed line="37" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116892" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/892/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_72a.cpp" language="C++" size="2957" checksum="c15738b38107003e50a2f2824da5e53df157b5ac"></file>
    <file path="000/116/892/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_72b.cpp" language="C++" size="1502" checksum="3e42c992f66481ab02db8464e3a2404e232f59e4">
      <mixed line="40" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116893" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/893/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_73a.cpp" language="C++" size="2811" checksum="25e04bd8d5d17d00cb3cd320e173797e28b25b50"></file>
    <file path="000/116/893/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_73b.cpp" language="C++" size="1492" checksum="c49dc0363ab7436f39a62bc048a275db631c2bfb">
      <mixed line="40" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116894" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/894/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_74a.cpp" language="C++" size="2776" checksum="4d7fbd9219ed0af1df177572331cb00806de0a03"></file>
    <file path="000/116/894/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_74b.cpp" language="C++" size="1485" checksum="c0264e66ac8cbdbced9fd0914d99d3ca3ea0834b">
      <mixed line="40" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116895" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/895/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_81.h" language="C" size="1575" checksum="9c0f1b91c22a9db6fb3a9f7a0af8ebfef8ff694d"></file>
    <file path="000/116/895/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_81_bad.cpp" language="C++" size="1087" checksum="786d0fbf98f4d1dde27a21ecba7579e452e02038">
      <mixed line="26" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/895/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_81_goodB2G.cpp" language="C++" size="1107" checksum="750dc82fd05a69d0211bcede8fbed646f8bbb358"></file>
    <file path="000/116/895/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_81a.cpp" language="C++" size="2703" checksum="31baf74e8bb66e2768b203c5a4b80e8892625d1b"></file>
  </testcase>
  <testcase id="116896" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/896/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_82.h" language="C" size="1555" checksum="7e40ed74434976d485c6dac519fca2376b5725aa"></file>
    <file path="000/116/896/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_82_bad.cpp" language="C++" size="1079" checksum="67046d6728158fe93228c7715026588c96227d42">
      <mixed line="26" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/896/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_82_goodB2G.cpp" language="C++" size="1099" checksum="d374e219498d1c595ea825f8ee70bd8949aef959"></file>
    <file path="000/116/896/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_82a.cpp" language="C++" size="2743" checksum="05906ac615b37c4537e913ed361d8a117b3c9d58"></file>
  </testcase>
  <testcase id="116897" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/897/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_83.h" language="C" size="1596" checksum="45d3bce895a843d5e0f7d88a79e9f01ba1f57d41"></file>
    <file path="000/116/897/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_83_bad.cpp" language="C++" size="1478" checksum="b3f5880cc43a2b724b99457bf02407cabc425798">
      <mixed line="32" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/897/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_83_goodB2G.cpp" language="C++" size="1510" checksum="0e61667531a8d3e0a4b566d572f77212e9f8ab95"></file>
    <file path="000/116/897/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_83a.cpp" language="C++" size="2241" checksum="5ae45fae6c332c8cc44c171e2a291b485621b576"></file>
  </testcase>
  <testcase id="116898" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using open()<br/> Sinks:<br/> GoodSink: Close the file using close()<br/> BadSink : Do not close file<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/898/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_84.h" language="C" size="1621" checksum="0ff5114c7809a7441828a431e0ddc48b672c5924"></file>
    <file path="000/116/898/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_84_bad.cpp" language="C++" size="1503" checksum="dcaaf02688b8760a810d5b9287b358d55ca5f1f2">
      <mixed line="32" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/898/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_84_goodB2G.cpp" language="C++" size="1535" checksum="3fb9ffb493e74325549899d0dc5d9ef1944c8889"></file>
    <file path="000/116/898/CWE775_Missing_Release_of_File_Descriptor_or_Handle__open_no_close_84a.cpp" language="C++" size="2484" checksum="a3286053ecd3e70394887aad1d304924381074c0"></file>
  </testcase>
  <testcase id="116899" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 01 Baseline]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/899/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_01.c" language="C" size="2928" checksum="74c6fafedeec82d6b189bc2eda79aac6f0a3b113">
      <mixed line="36" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116900" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/900/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_02.c" language="C" size="3903" checksum="2ac6fce58f9e30109b2754543abae9a37ab4f9d4">
      <mixed line="38" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116901" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/901/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_03.c" language="C" size="3924" checksum="cae78f43a771ad0efec5f106f0af7107bdb913e8">
      <mixed line="38" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116902" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/902/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_04.c" language="C" size="4289" checksum="995a4f58fb448d6b6144f38fe7992fb59fc7d2a5">
      <mixed line="44" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116903" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/903/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_05.c" language="C" size="4260" checksum="716a2b0f9ff88bc0dda9fc4307393f21e8e82362">
      <mixed line="44" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116904" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/904/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_06.c" language="C" size="4230" checksum="a22358b9d0e37ff5a0854129ba2202d5adfbd605">
      <mixed line="43" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116905" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/905/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_07.c" language="C" size="4210" checksum="ca9290299f28860c836e5c26b563ec0581f7e199">
      <mixed line="43" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116906" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/906/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_08.c" language="C" size="4310" checksum="16da40769b7f504e151aa544a3401d58debb7dd6">
      <mixed line="51" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116907" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/907/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_09.c" language="C" size="4018" checksum="5e7a2b3ab425d0f7163141a37dc8f807a30c49dd">
      <mixed line="38" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116908" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/908/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_10.c" language="C" size="3969" checksum="1b6b4d92d114c581b5db7462ed50b3089d8117b0">
      <mixed line="38" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116909" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/909/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_11.c" language="C" size="4032" checksum="ddfc26bedfdf4ca2aef788ef655e62ba84df6d5f">
      <mixed line="38" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116910" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/910/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_12.c" language="C" size="3506" checksum="3d13a56035c32ac27324dba7089316117f6b8d0f">
      <mixed line="38" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116911" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/911/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_13.c" language="C" size="4036" checksum="a32e708316eb2666503370642277d83315808ff2">
      <mixed line="38" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116912" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/912/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_14.c" language="C" size="3987" checksum="0c21c8ffa00270c5d7bffce5dcae807804bd790f">
      <mixed line="38" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116913" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/913/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_15.c" language="C" size="4326" checksum="634ea1c86aa35de547cb81bf7f12d2053671b67e">
      <mixed line="39" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116914" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/914/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_16.c" language="C" size="3101" checksum="e8be6853f4d180a904339e9ee82e0e06da13f9e5">
      <mixed line="38" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116915" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/915/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_17.c" language="C" size="3082" checksum="0c5cf3da7018d0f855cf9fe1be28b59ee3407dd8">
      <mixed line="39" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116916" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/916/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_18.c" language="C" size="3033" checksum="d9ac612733b5463c3fa568d756214d8c2bb352bd">
      <mixed line="38" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116917" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/917/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_21.c" language="C" size="4650" checksum="497a0401e922430d21a555a39edc41c952e24c5c">
      <mixed line="30" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116918" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/918/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_22a.c" language="C" size="4875" checksum="be82cf52494d8db2abc11cf0eff6483513b2e01e"></file>
    <file path="000/116/918/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_22b.c" language="C" size="2781" checksum="45e4e47618972ddb87b97c1540ec3adda11ba930">
      <mixed line="30" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116919" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/919/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_31.c" language="C" size="3161" checksum="58741f60bf9cec624fe8d2ee668e74df8032d279">
      <mixed line="39" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116920" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 32 Data flow: two pointers to the same value within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/920/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_32.c" language="C" size="3448" checksum="341af0542fb7111577d2421169fed0a21982cf02">
      <mixed line="44" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116921" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/921/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_33.cpp" language="C++" size="3116" checksum="926c146d55c283a17086554eb5bbb1b199d357e6">
      <mixed line="42" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116922" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 34 Data flow: use of a union containing two methods of accessing the same data (within the same function)]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/922/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_34.c" language="C" size="3596" checksum="8d94b6fca092af43c503e0b944b3b4142c4ddc34">
      <mixed line="46" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116923" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/923/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_41.c" language="C" size="3140" checksum="855d82e799350b0993bd9683ed22237deebe6312">
      <mixed line="25" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116924" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/924/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_42.c" language="C" size="3189" checksum="b323e9f9d8d66e2d3b66034afae7c8b3937e755e">
      <mixed line="42" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116925" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/925/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_43.cpp" language="C++" size="3112" checksum="2500bc537ee15d4100aad1ebf71240228e351504">
      <mixed line="44" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116926" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/926/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_44.c" language="C" size="3336" checksum="87bab47c590c8977e436eca3c2ffe9a7fefd9b6c">
      <mixed line="25" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116927" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="4" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/927/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_45.c" language="C" size="3757" checksum="d228f502ad433806ff52e3b376d042944df49dc8">
      <mixed line="29" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116928" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/928/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_51a.c" language="C" size="3266" checksum="ea60240453faf8dc10c903b6132fb4426949b5dc"></file>
    <file path="000/116/928/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_51b.c" language="C" size="1273" checksum="d25e8651ce8830fa797b1c2f97b8a7bc343cc722">
      <mixed line="25" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116929" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="6" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/929/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_52a.c" language="C" size="3283" checksum="b87e2936b7beee349a5201acdf9d140f765b4153"></file>
    <file path="000/116/929/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_52b.c" language="C" size="1562" checksum="cee9141360f98e5be5bb8eb6093c40efef193f01"></file>
    <file path="000/116/929/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_52c.c" language="C" size="1290" checksum="228dc47490c8e1cde8ed6841c31f161a0db7d98f">
      <mixed line="25" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116930" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/930/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_53a.c" language="C" size="3310" checksum="aae55a41d00a8497fb5bb5135da39085e5379398"></file>
    <file path="000/116/930/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_53b.c" language="C" size="1589" checksum="62b8f2e5093c1ad90bd956b431ea442b673e6c17"></file>
    <file path="000/116/930/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_53c.c" language="C" size="1589" checksum="4289fa73a41f54ed2fd40489a5074f79c37ed603"></file>
    <file path="000/116/930/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_53d.c" language="C" size="1317" checksum="046fb2d2b1e4678fc128b377f6de0a465d89bb9b">
      <mixed line="25" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116931" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="8" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/931/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_54a.c" language="C" size="3311" checksum="35f225f6d8239b63b46056d714a21bde80444ddd"></file>
    <file path="000/116/931/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_54b.c" language="C" size="1590" checksum="341c7d9167c7d5df743d461ada54fd6bf810f576"></file>
    <file path="000/116/931/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_54c.c" language="C" size="1590" checksum="fe1bebb54590228d1b60be6afdc0fc2d6d9728b1"></file>
    <file path="000/116/931/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_54d.c" language="C" size="1590" checksum="008532c2b5f123eae93f2f7332095fa714752f43"></file>
    <file path="000/116/931/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_54e.c" language="C" size="1318" checksum="3e6d823d5094b5b20fccc5e95546a4e0718cbda3">
      <mixed line="25" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116932" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/932/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_61a.c" language="C" size="2821" checksum="c9292e6f9d5a27a0cd49c4c0b800ab2e61d07e91">
      <mixed line="32" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/932/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_61b.c" language="C" size="1782" checksum="6c6abb899eb2ac89b52fa88704ab207f3af63e70"></file>
  </testcase>
  <testcase id="116933" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/933/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_62a.cpp" language="C++" size="2458" checksum="06ffac415a8d4efac6f9b8a844e7fc17e75a7328">
      <mixed line="35" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/933/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_62b.cpp" language="C++" size="1729" checksum="419bd235084584a8251e88a36787bdb1f36e3d0f"></file>
  </testcase>
  <testcase id="116934" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/934/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_63a.c" language="C" size="3237" checksum="127ac4b6e2c92b627b38e5c77ba0559f2ce34752"></file>
    <file path="000/116/934/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_63b.c" language="C" size="1389" checksum="7228aa8d2d0a416097ba56eb22899ea17e80d3fc">
      <mixed line="26" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116935" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/935/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_64a.c" language="C" size="3249" checksum="372726e77fba2e16ce9e2a1084f03fd32f55d233"></file>
    <file path="000/116/935/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_64b.c" language="C" size="1710" checksum="f13c5d37e403acfa69e5cf0af65091cecbb6d2fe">
      <mixed line="29" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116936" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/936/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_65a.c" language="C" size="3429" checksum="2b3b7376b6e0b6406cf2b755fed1470ab087afba"></file>
    <file path="000/116/936/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_65b.c" language="C" size="1367" checksum="c943f8b3a0d41150a64970e04a949e38c43bfc03">
      <mixed line="25" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116937" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/937/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_66a.c" language="C" size="3386" checksum="6eaa31b8eff7b24c29e35339e4b4880ec192c85e"></file>
    <file path="000/116/937/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_66b.c" language="C" size="1440" checksum="ee98f54154a171abfb483995cbc37e67efef1be0">
      <mixed line="27" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116938" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/938/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_67a.c" language="C" size="3920" checksum="f8b427b24cebac8f3fdfb742d5146bfb2886d0df"></file>
    <file path="000/116/938/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_67b.c" language="C" size="1809" checksum="f78a2d980a17bebba0459a9a30c7b1b4d40b6e05">
      <mixed line="31" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116939" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/939/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_68a.c" language="C" size="3680" checksum="43855097246f29a0f19edb141d348b1bf9105078"></file>
    <file path="000/116/939/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_68b.c" language="C" size="1723" checksum="fe90522edadf006499c70f9f751e60d49b699783">
      <mixed line="30" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116940" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/940/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_72a.cpp" language="C++" size="3348" checksum="44bb121c09a0cc20127814d448addd0607827703"></file>
    <file path="000/116/940/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_72b.cpp" language="C++" size="1466" checksum="d8362a5c22c26824a325c60ebe8b0aa19d818f06">
      <mixed line="33" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116941" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/941/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_73a.cpp" language="C++" size="3202" checksum="06c2023866f0d82dd62c73fd84bb899ffcc932b9"></file>
    <file path="000/116/941/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_73b.cpp" language="C++" size="1456" checksum="2b047f2c41b33906f5405b13a3681d6ac0072429">
      <mixed line="33" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116942" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="5" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/942/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_74a.cpp" language="C++" size="3167" checksum="f7d59e255a68d51afbcc0a4350d957b7ea2275f0"></file>
    <file path="000/116/942/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_74b.cpp" language="C++" size="1449" checksum="5ca7c9f7efea39dd88980d2ad6608fffe23ee26c">
      <mixed line="33" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
  </testcase>
  <testcase id="116943" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/943/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_81.h" language="C" size="1557" checksum="fb6dff058f47341f0548514063f231eb1a24459b"></file>
    <file path="000/116/943/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_81_bad.cpp" language="C++" size="1147" checksum="416b6302307ce6b6d89564f841c18d3c631b484a">
      <mixed line="26" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/943/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_81_goodB2G.cpp" language="C++" size="1191" checksum="fe6e65232022852c273c207e05f9f848f4b14b3d"></file>
    <file path="000/116/943/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_81a.cpp" language="C++" size="3238" checksum="05c4f85cd18da12ce7360c2c5e755ab4f9f1c104"></file>
  </testcase>
  <testcase id="116944" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/944/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_82.h" language="C" size="1537" checksum="7a8564ee8dd5be0d1be4fefd1f00577daa771439"></file>
    <file path="000/116/944/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_82_bad.cpp" language="C++" size="1139" checksum="3739ab57a14220bc997e45c0c0c889f3b29458d4">
      <mixed line="26" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/944/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_82_goodB2G.cpp" language="C++" size="1183" checksum="cac77d7148c1533545bfdb5f79e355b21fa1da45"></file>
    <file path="000/116/944/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_82a.cpp" language="C++" size="3278" checksum="39403d4e608adfd7cf11b7e5542b7db1c40b8b48"></file>
  </testcase>
  <testcase id="116945" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/945/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_83.h" language="C" size="1590" checksum="ea8f1231c4b0b2b70b95ea347015b98631aa2219"></file>
    <file path="000/116/945/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_83_bad.cpp" language="C++" size="1765" checksum="2048d3f03e822f128d162e8f818f995531154de0">
      <mixed line="38" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/945/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_83_goodB2G.cpp" language="C++" size="1821" checksum="52a9aaee8a28cc81b45a07092feb7df87f5de9d0"></file>
    <file path="000/116/945/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_83a.cpp" language="C++" size="2358" checksum="5cac741d5286b826b607c9a753c27143c7826cc8"></file>
  </testcase>
  <testcase id="116946" type="Source Code" status="Candidate" submissionDate="2013-05-21" numberOfFiles="7" testsuiteid="86">
    <description><![CDATA[CWE: 775 Missing Release of File Descriptor or Handle After Effective Lifetime<br/> BadSource:  Open a file using CreateFile()<br/> Sinks:<br/> GoodSink: Close the file using CloseHandle()<br/> BadSink : Do not close file<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file path="shared/86/io.c" language="C" size="5385" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file path="shared/86/std_testcase.h" language="C" size="3516" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file path="shared/86/std_testcase_io.h" language="C" size="1457" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file path="000/116/946/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_84.h" language="C" size="1615" checksum="a5f6a1d1acc9375d7b727035aaf88f32f455425d"></file>
    <file path="000/116/946/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_84_bad.cpp" language="C++" size="1790" checksum="d4195ca695cbc3f4a92a9185363b35aef01519e2">
      <mixed line="38" name="CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime"></mixed>
    </file>
    <file path="000/116/946/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_84_goodB2G.cpp" language="C++" size="1846" checksum="bdcf6661205962dae9cf48acd65196a61a1aef01"></file>
    <file path="000/116/946/CWE775_Missing_Release_of_File_Descriptor_or_Handle__w32CreateFile_no_close_84a.cpp" language="C++" size="2619" checksum="0b656fbcf71a9f9dae61ee299b8e2cb902a946b1"></file>
  </testcase>
</container>
