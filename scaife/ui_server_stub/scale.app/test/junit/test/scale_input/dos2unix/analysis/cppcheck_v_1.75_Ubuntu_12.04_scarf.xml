<?xml version="1.0" encoding="UTF-8"?>

<AnalyzerReport package_root_dir="pkg1" assessment_stop_ts="1576181949.431699" uuid="3b49a747-b4e1-45ce-ac70-b1cb97138fad" tool_version="1.75" build_fw="c-assess" tool_name="cppcheck" package_version="1.0" build_fw_version="1.1.22" parser_fw="resultparser" assess_fw_version="1.1.22" package_name="dos2unix_20191212_v2" parser_fw_version="3.2.3" results_root_dir="/home/builder/results" build_root_dir="/home/builder/build" assessment_start_ts="1576181948.487524" assess_fw="c-assess" platform_name="ubuntu-12.04-64">
  <BugInstance id="0">
    <Methods></Methods>
    <BugLocations>
      <Location id="0" primary="true">
        <SourceFile>pkg1/dos2unix-7.2.2/common.c</SourceFile>
        <StartLine>732</StartLine>
        <EndLine>732</EndLine>
        <Explanation>Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>warning</BugGroup>
    <BugCode>uselessAssignmentPtrArg</BugCode>
    <BugMessage>Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>/results/errors/error[1]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="1">
    <Methods></Methods>
    <BugLocations>
      <Location id="0" primary="true">
        <SourceFile>pkg1/dos2unix-7.2.2/common.c</SourceFile>
        <StartLine>772</StartLine>
        <EndLine>772</EndLine>
        <Explanation>Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>warning</BugGroup>
    <BugCode>uselessAssignmentPtrArg</BugCode>
    <BugMessage>Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>/results/errors/error[2]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="2">
    <Methods></Methods>
    <BugLocations>
      <Location id="0" primary="true">
        <SourceFile>pkg1/dos2unix-7.2.2/common.c</SourceFile>
        <StartLine>141</StartLine>
        <EndLine>141</EndLine>
        <Explanation>The scope of the variable 'errstr' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'errstr' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/dos2unix-7.2.2/common.c:141 ****** Primary Bug Location
  The scope of the variable 'errstr' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>/results/errors/error[3]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="3">
    <Methods></Methods>
    <BugLocations>
      <Location id="0" primary="true">
        <SourceFile>pkg1/dos2unix-7.2.2/common.c</SourceFile>
        <StartLine>199</StartLine>
        <EndLine>199</EndLine>
        <Explanation>The scope of the variable 'errstr' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'errstr' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/dos2unix-7.2.2/common.c:199 ****** Primary Bug Location
  The scope of the variable 'errstr' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>/results/errors/error[4]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="4">
    <Methods></Methods>
    <BugLocations>
      <Location id="0" primary="true">
        <SourceFile>pkg1/dos2unix-7.2.2/common.c</SourceFile>
        <StartLine>544</StartLine>
        <EndLine>544</EndLine>
        <Explanation>The scope of the variable 'bom' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'bom' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/dos2unix-7.2.2/common.c:544 ****** Primary Bug Location
  The scope of the variable 'bom' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>/results/errors/error[5]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="5">
    <Methods></Methods>
    <BugLocations>
      <Location id="0" primary="true">
        <SourceFile>pkg1/dos2unix-7.2.2/common.c</SourceFile>
        <StartLine>824</StartLine>
        <EndLine>824</EndLine>
        <Explanation>The scope of the variable 'mask' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'mask' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/dos2unix-7.2.2/common.c:824 ****** Primary Bug Location
  The scope of the variable 'mask' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>/results/errors/error[6]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="6">
    <Methods></Methods>
    <BugLocations>
      <Location id="0" primary="true">
        <SourceFile>pkg1/dos2unix-7.2.2/common.c</SourceFile>
        <StartLine>1464</StartLine>
        <EndLine>1464</EndLine>
        <Explanation>The scope of the variable 'errstr' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'errstr' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/dos2unix-7.2.2/common.c:1464 ****** Primary Bug Location
  The scope of the variable 'errstr' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>/results/errors/error[7]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="7">
    <Methods></Methods>
    <BugLocations>
      <Location id="0" primary="true">
        <SourceFile>pkg1/dos2unix-7.2.2/common.c</SourceFile>
        <StartLine>1903</StartLine>
        <EndLine>1903</EndLine>
        <Explanation>The scope of the variable 'trail' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'trail' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/dos2unix-7.2.2/common.c:1903 ****** Primary Bug Location
  The scope of the variable 'trail' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>/results/errors/error[8]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="8">
    <Methods></Methods>
    <BugLocations>
      <Location id="0" primary="true">
        <SourceFile>pkg1/dos2unix-7.2.2/common.c</SourceFile>
        <StartLine>1905</StartLine>
        <EndLine>1905</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/dos2unix-7.2.2/common.c:1905 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>/results/errors/error[9]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="9">
    <Methods></Methods>
    <BugLocations>
      <Location id="0" primary="true">
        <SourceFile>pkg1/dos2unix-7.2.2/common.c</SourceFile>
        <StartLine>1906</StartLine>
        <EndLine>1906</EndLine>
        <Explanation>The scope of the variable 'c_trail' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'c_trail' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/dos2unix-7.2.2/common.c:1906 ****** Primary Bug Location
  The scope of the variable 'c_trail' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>/results/errors/error[10]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="10">
    <Methods></Methods>
    <BugLocations>
      <Location id="0" primary="true">
        <SourceFile>pkg1/dos2unix-7.2.2/common.c</SourceFile>
        <StartLine>1906</StartLine>
        <EndLine>1906</EndLine>
        <Explanation>The scope of the variable 'c_lead' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'c_lead' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/dos2unix-7.2.2/common.c:1906 ****** Primary Bug Location
  The scope of the variable 'c_lead' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>/results/errors/error[11]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="11">
    <Methods></Methods>
    <BugLocations>
      <Location id="0" primary="true">
        <SourceFile>pkg1/dos2unix-7.2.2/common.c</SourceFile>
        <StartLine>1910</StartLine>
        <EndLine>1910</EndLine>
        <Explanation>The scope of the variable 'errstr' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'errstr' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/dos2unix-7.2.2/common.c:1910 ****** Primary Bug Location
  The scope of the variable 'errstr' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>/results/errors/error[12]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="12">
    <Methods></Methods>
    <BugLocations>
      <Location id="0" primary="true">
        <SourceFile>pkg1/dos2unix-7.2.2/common.c</SourceFile>
        <StartLine>1838</StartLine>
        <EndLine>1838</EndLine>
        <Explanation>Variable 'RetVal' is assigned a value that is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unreadVariable</BugCode>
    <BugMessage>Variable 'RetVal' is assigned a value that is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>/results/errors/error[13]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="13">
    <Methods></Methods>
    <BugLocations>
      <Location id="0" primary="true">
        <SourceFile>pkg1/dos2unix-7.2.2/common.c</SourceFile>
        <StartLine>1012</StartLine>
        <EndLine>1012</EndLine>
        <Explanation>Obsolescent function 'utime' called. It is recommended to use 'utimensat' instead.</Explanation>
      </Location>
    </BugLocations>
    <CweId>477</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>utimeCalled</BugCode>
    <BugMessage>Obsolescent function 'utime' called. It is recommended to use 'utimensat' instead.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>/results/errors/error[14]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugSummary>
    <BugCategory group="style" code="utimeCalled" count="1" bytes="842" />
    <BugCategory group="style" code="unreadVariable" count="1" bytes="772" />
    <BugCategory group="style" code="variableScope" count="10" bytes="14113" />
    <BugCategory group="warning" code="uselessAssignmentPtrArg" count="2" bytes="1780" />
  </BugSummary>
</AnalyzerReport>