#
# Mappings from PCLint error identifier tags that span multiple coding rules
# <legal>
# SCALe version r.6.2.2.2.A
# 
# Copyright 2020 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

.*Violates CERT .* DCL04-C: DCL04-C
.*Violates CERT .* EXP00-C: EXP00-C
.*Violates CERT .* EXP02-C: EXP02-C
.*Violates CERT .* INT13-C: INT13-C
.*Violates CERT .* MSC01-C: MSC01-C
.*Violates CERT .* PRE00-C: PRE00-C
.*Violates CERT .* STR36-C: STR11-C
.*Violates MISRA 2004 Advisory Rule 12\.1.*:  EXP00-C
.*Violates MISRA 2004 Advisory Rule 19\.1.*:  NONE
.*Violates MISRA 2004 Advisory Rule 19\.2.*:  NONE
.*Violates MISRA 2004 Advisory Rule 19\.7.*:  PRE00-C
.*Violates MISRA 2004 Required Rule 10\.1.*:  NONE
# used to be INT31-C, produces too many false positives
.*Violates MISRA 2004 Required Rule 10\.2.*:  FLP34-C
.*Violates MISRA 2004 Required Rule 10\.3.*:  INT31-C
# this may also be FLP06-C
.*Violates MISRA 2004 Required Rule 10\.4.*:  FLP34-C
.*Violates MISRA 2004 Required Rule 10\.5.*:  NONE
.*Violates MISRA 2004 Required Rule 12\.10.*: NONE
.*Violates MISRA 2004 Required Rule 12\.4.*:  EXP02-C
.*Violates MISRA 2004 Required Rule 12\.7.*:  INT13-C
.*Violates MISRA 2004 Required Rule 12\.9.*:  INT30-C
.*Violates MISRA 2004 Required Rule 14\.10.*: NONE
.*Violates MISRA 2004 Required Rule 14\.3.*:  EXP15-C
.*Violates MISRA 2004 Required Rule 14\.5.*:  NONE
.*Violates MISRA 2004 Required Rule 14\.6.*:  NONE
.*Violates MISRA 2004 Required Rule 14\.8.*:  EXP19-C
.*Violates MISRA 2004 Required Rule 14\.9.*:  EXP19-C
.*Violates MISRA 2004 Required Rule 16\.3.*:  NONE
.*Violates MISRA 2004 Advisory Rule 17\.5.*:  NONE
.*Violates MISRA 2004 Required Rule 18\.4.*:  NONE
.*Violates MISRA 2004 Required Rule 19\.12.*: PRE30-C
.*Violates MISRA 2004 Required Rule 19\.5.*:  NONE
.*Violates MISRA 2004 Required Rule 19\.6.*:  NONE
.*Violates MISRA 2004 Required Rule 4\.1.*:   MSC09-C
.*Violates MISRA 2004 Required Rule 7\.1.*:   NONE
.*Violates MISRA 2004 Required Rule 8\.5.*:   NONE
.*Violates MISRA C\+\+ 2008 Advisory Rule 14-8-2.*: NONE
.*Violates MISRA C\+\+ 2008 Advisory Rule 16-2-5.*: NONE
.*Violates MISRA C\+\+ 2008 Advisory Rule 16-3-2.*: PRE30-C
.*Violates MISRA C\+\+ 2008 Advisory Rule 5-0-2.*:  EXP00-C
.*Violates MISRA C\+\+ 2008 Required Rule 0-1-8.*:  NONE
.*Violates MISRA C\+\+ 2008 Required Rule 16-0-1.*: NONE
.*Violates MISRA C\+\+ 2008 Required Rule 16-0-2.*: NONE
.*Violates MISRA C\+\+ 2008 Required Rule 16-0-3.*: NONE
.*Violates MISRA C\+\+ 2008 Required Rule 16-0-4.*: PRE00-C
.*Violates MISRA C\+\+ 2008 Required Rule 16-3-1.*: PRE30-C
.*Violates MISRA C\+\+ 2008 Required Rule 2-13-2.*: MSC09-C
.*Violates MISRA C\+\+ 2008 Required Rule 3-1-1.*:  NONE
.*Violates MISRA C\+\+ 2008 Required Rule 5-0-10.*: NONE
.*Violates MISRA C\+\+ 2008 Required Rule 5-0-19.*: NONE
.*Violates MISRA C\+\+ 2008 Required Rule 5-0-21.*: INT13-C
.*Violates MISRA C\+\+ 2008 Required Rule 5-0-3.*:  NONE
# used to be INT31-C, produces too many false positives
.*Violates MISRA C\+\+ 2008 Required Rule 5-0-4.*:  NONE
# used to be INT31-C, produces too many false positives
.*Violates MISRA C\+\+ 2008 Required Rule 5-0-5.*:  NONE
.*Violates MISRA C\+\+ 2008 Required Rule 5-0-6.*:  NONE
# used to be INT31-C, produces too many false positives
.*Violates MISRA C\+\+ 2008 Required Rule 5-0-7.*:  FLP34-C
.*Violates MISRA C\+\+ 2008 Required Rule 5-0-8.*:  NONE
.*Violates MISRA C\+\+ 2008 Required Rule 5-0-9.*:  INT31-C
.*Violates MISRA C\+\+ 2008 Required Rule 5-14-1.*: EXP02-C
.*Violates MISRA C\+\+ 2008 Required Rule 5-18-1.*: NONE
.*Violates MISRA C\+\+ 2008 Required Rule 5-2-12.*: NONE
.*Violates MISRA C\+\+ 2008 Required Rule 5-3-2.*:  INT30-C
.*Violates MISRA C\+\+ 2008 Required Rule 6-2-3.*:  EXP15-C
.*Violates MISRA C\+\+ 2008 Required Rule 6-3-1.*:  EXP19-C
.*Violates MISRA C\+\+ 2008 Required Rule 6-4-1.*:  EXP19-C
.*Violates MISRA C\+\+ 2008 Required Rule 6-4-2.*:  NONE
.*Violates MISRA C\+\+ 2008 Required Rule 6-6-2.*:  NONE
.*Violates MISRA C\+\+ 2008 Required Rule 6-6-3.*:  NONE
.*Violates MISRA C\+\+ 2008 Required Rule 6-6-4.*:  NONE
.*Violates MISRA C\+\+ 2008 Required Rule 7-3-1.*:  NONE
.*Violates MISRA C\+\+ 2008 Required Rule 7-3-4.*:  NONE
.*Violates MISRA C\+\+ 2008 Required Rule 7-3-6.*:  NONE
.*Violates MISRA C\+\+ 2008 Required Rule 8-0-1.*:  DCL04-C
.*Violates MISRA C\+\+ 2008 Required Rule 9-5-1.*:  NONE
.*Violates MISRA 2004 Required Rule 10\.3, Cast of complex expression changes signedness.*:     INT31-C
.*Violates MISRA 2004 Required Rule 10\.3, Cast of complex integer expression to larger type.*: INT18-C
.*(Implicit .*conversion|Prototype coercion|cast from).*? (_Bool|bool) to .*:                         NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? (?<!un)signed char to signed char.*:        NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? (?<!un)signed char to short.*:              NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? (?<!un)signed char to int.*:                NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? (?<!un)signed char to long(?! double).*:    NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? (?<!unsigned )short to short.*:             NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? (?<!unsigned )short to int.*:               NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? (?<!unsigned )short to long(?! double).*:   NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? (?<!unsigned )int to int.*:                 NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? (?<!unsigned )int to long(?! double).*:     NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? (?<!unsigned )long to long(?! double).*:    NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? (?<!unsigned )long long to long long.*:     NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? unsigned char to unsigned char.*:           NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? unsigned char to unsigned short.*:          NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? unsigned char to unsigned int.*:            NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? unsigned char to unsigned long.*:           NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? unsigned short to unsigned short.*:         NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? unsigned short to unsigned int.*:           NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? unsigned short to unsigned long.*:          NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? unsigned int to unsigned int.*:             NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? unsigned int to unsigned long.*:            NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? unsigned long to unsigned long.*:           NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? unsigned long long to unsigned long long.*: NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? float to float.*:                           NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? float to double.*:                          NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? float to long double.*:                     NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? double to double.*:                         NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? double to long double.*:                    NONE
.*(Implicit .*conversion|Prototype coercion|cast from).*? long double to long double.*:               NONE
.*(Implicit .*conversion|Prototype coercion|cast from) .* to .*:                                      NONE
# .*(Implicit .*conversion|Prototype coercion|cast from) .* to .* was INT31-C, but kv2c had 1/15 (combined with 732)
