#
# Mappings from g++ error identifiers (aka categories)
# to CERT secure coding rules
#
# The rule numbers need to be updated -DS 2009-12-10
#
# NOTE: Regular expressions in this file are matched in the order they appear.
#
# <legal>
# SCALe version r.6.7.0.0.A
# 
# Copyright 2021 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

.*argument of .*main.* should be.*: EXP37-C
.*array subscript is above array bounds: ARR30-C
.*array subscript has type.*: ARR30-C
.*assuming .* overflow does not occur when assuming that .*: INT32-C
.*assignment from incompatible pointer type: EXP39-C
.*backslash and newline separated by.*: NONE
.*braces around scalar initializer: NONE
.*cast increases required alignment of target type: EXP36-C
.*cast to pointer from integer of different size: INT36-C
.*casting .* does not dereference pointer: EXP05-C
.*choice value used outside its choice group: NONE
# comparison was INT31-C, but too many false positives on TA osc-remainder
.*comparison between signed and unsigned: NONE
.*comparison between pointer and integer: INT36-C
.*comparison between ''enum.*: NONE
.*comparison is always false due to limited range of data type: INT18-C
.*comparison is always.*due to limited range of.*: INT18-C
.*comparison of promoted.*: INT18-C
.*comparison of unsigned .* is always .*: INT18-C
.*comparison with string literal results in unspecified behavior: ARR36-C
.*conflicting types for.*: DCL40-C
.*control reaches end of non-void function: EXP33-C
.*conversion lacks type at end of format: FIO00-C
.*data definition has no type or storage class: NONE
.*declared.*but never defined: MSC13-C
.*defaults for choice values not supported: NONE
.*defined but not used: MSC13-C
.*deprecated conversion from string constant to.*: STR05-C
.*dereferencing pointer .* break strict-aliasing rules: EXP39-C
.*discards qualifiers: EXP05-C
.*embedded .* in format: FIO00-C
.*enumeration value.*not handled in switch: MSC01-C
.*enumeral and non-enumeral type in conditional expression: NONE
.*enumeral mismatch in conditional expression: NONE
.*expected.*but argument is of type.*: EXP37-C
.*forbids empty anonymous enum.*: NONE
.*forbids mixed declarations and code: NONE
.*format not a string literal and no format arguments: API07-C
.*format.*expects type.*, but.*has type.*: INT31-C
.*function declaration isn.*t a prototype: DCL20-C
.*ignoring #pragma: NONE
.*ignoring return value: EXP12-C
.*implicit declaration of.*: DCL31-C
.*initialization from incompatible pointer type: EXP39-C
.*initialized field overwritten: NONE
.*invalid access to non-static data member .* of NULL object: EXP34-C
.*is deprecated.*: MSC24-C
.*is not at beginning of declaration: NONE
.*is not defined: NONE
.*is used uninitialized in this function: EXP33-C
.*is static but used in inline function: MSC21-C
.*is used uninitialized in.*: EXP33-C
.*is usually a function: DCL40-C
.*large integer implicitly truncated to unsigned type: INT31-C
.*left shift count >= width of type: INT34-C
.*makes qualified function pointer from unqualified: NONE
.*makes.*without a cast: INT36-C
.*may be used uninitialized in.*: EXP33-C
.*might be clobbered by .*longjmp.*: MSC22-C
.*missing braces around initializer for.*: ARR02-C
.*missing braces around initializer: NONE
.*missing initializer for member: NONE
.*missing initializer: NONE
.*multi-line comment: MSC04-C
.*near initialization for.*: NONE
.*number is invalid: NONE

.*No such file.*: NONE

.*operand of comma operator has no effect.*: MSC12-C

.*ordered comparison of pointer with integer zero: NONE
.*overflow in .* conversion: INT31-C
.*parameter names .* in function declaration: NONE
.*passing argument .* of .* from incompatible pointer type: EXP39-C
.*passing .* chooses .* over .*: INT31-C
.*pointer of type .* used in arithmetic: ARR37-C
.*pointer targets .* differ in signedness: NONE
.*pointer of type .* used in addition: ARR37-C
.*pointer of type .* used in subtraction: ARR37-C
.*pointer targets in .* differ in signedness: INT31-C
.*qualified void .* type.*: NONE
.*redefined: NONE
.*required from here: NONE
.*returns address of local variable: EXP35-C
.*return from incompatible pointer type: EXP39-C
.*signed and unsigned type in conditional: INT18-C
.*statement has no effect: MSC07-C
.*statement with no effect: MSC07-C
.*suggest braces around empty body in .* statement: EXP19-C
.*suggest explicit braces to avoid ambiguous .*else.*: EXP19-C
.*suggest parentheses around .* inside .*: EXP18-C
.*suggest parentheses around .* within .*: EXP18-C
.*suggest parentheses around arithmetic in operand: EXP00-C
.*suggest parentheses around assignment used as truth value: EXP18-C
.*suggest parentheses around operand of .* or change.*: EXP18-C
.*suggest parentheses around .* in operand of .*: EXP17-C
.*the use of .* is dangerous: MSC24-C
.*the frame size of .* bytes is larger than .* bytes.*: MEM05-C
.*this is the location of the previous definition: NONE
.*this decimal constant is unsigned only in .*: INT31-C
.*too few arguments for format: EXP37-C
.*too many arguments for format: EXP37-C
.*type defaults to .*int.* in.*: NONE
.*type of .* defaults to .*: NONE
.*type qualifiers ignored on function return type: NONE
.*unknown conversion type character .* in format: FIO00-C
.*unused parameter.*: MSC13-C
.*unused variable.*: MSC13-C
.*used but never defined: NONE
.*value computed is not used: EXP12-C
.*#warning.*: NONE

.*control reaches end of non-void function.*: EXP33-C
.*warning.* initialized and declared .*extern.*: MSC21-C
.*warning.*: return type of .* is not .*.*: NONE
.*warning.*attribute directive ignored.*: NONE
.*warning.*attribute ignored.*: NONE
.*warning.*base ''.*.*: NONE
.*warning.*by ''.*.*: NONE
.*warning.*by â€˜.*.*: NONE
.*warning.*format*.*: INT31-C
.*warning.*in call to .*.*: NONE
.*warning.*perhaps the .* macro was used incorrectly.*.*: NONE
.*warning.*was ignored in this declaration.*: NONE
.*warning.*when initialized here.*.*: NONE
.*with a value, in function returning void.*: MSC13-C
.*with no value, in function returning non-void.*: EXP33-C
.*within comment.*: MSC04-C
.*zero-length .* format string.*: FIO47-C


# These are actually compiler flags to output alerts.
# Theoretically, they also appear as checker IDs, so they can be added here:
.*-Wimplicit-int.*: DCL31-C
.*-Wincompatible-pointer-types-discards-qualifiers.*: EXP32-C
.*-Wincompatible-pointer-types.*: STR38-C
.*-Wint-conversion.*: INT36-C
.*-Wint-to-pointer-cast.*: INT36-C
.*-Wparentheses.*: EXP45-C
.*-Wsometimes-uninitialized.*: DCL41-C
.*-Wunevaluated-expression.*: EXP44-C
.*-Wunsequenced.*: EXP30-C
.*-Wvarargs.*: EXP47-C
.*-Ww.*: STR05-C
