# Checker mappings to CERT C++ coding rules copied on Feb. 10, 2021
# from public wiki site at: https://wiki.sei.cmu.edu/confluence/display/cplusplus/Clang
#
# <legal>
# SCALe version r.6.7.0.0.A
# 
# Copyright 2021 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

cert-dcl50-cpp: DCL50-CPP
cert-dcl59-cpp: DCL59-CPP
cert-err34-c: ERR62-CPP
cert-err52-cpp: ERR52-CPP
cert-err58-cpp: ERR58-CPP
cert-err60-cpp: ERR60-CPP
cert-err61-cpp: ERR61-CPP
cert-msc50-cpp: MSC50-CPP
cert-oop54-cpp: OOP54-CPP
clang-analyzer-alpha.cplusplus.VirtualCall: OOP50-CPP
clang-analyzer-alpha.security.ArrayBoundV2: MEM50-CPP
clang-analyzer-core.UndefinedBinaryOperatorResult: EXP53-CPP
clang-analyzer-cplusplus.NewDelete: MEM50-CPP
clang-analyzer-cplusplus.NewDeleteLeaks: MEM51-CPP
clang-analyzer-unix.MismatchedDeallocator: MEM51-CPP
misc-new-delete-overloads: DCL54-CPP

# This looks hinky to me
Clang checks for violations of this rule and produces an error without the need to specify any special flags or options.: DCL52-CPP

########### Below are C mappings #############
# The CERT C++ standard includes a subset of the CERT C standard's rules.
# Checker mappings to CERT C Secure Coding Standard rules below were copied on Feb. 10, 2021
# from the public wiki site at: https://wiki.sei.cmu.edu/confluence/display/c/Clang
# Mappings commented-out below, if the mapping is to a CERT C rule that does not
# apply to the CERT C++ Secure Coding Standard as documented on Feb 10, 2021 from
# https://wiki.sei.cmu.edu/confluence/display/cplusplus/Relation+to+the+CERT+C+Coding+Standard
rite-strings: STR05-C
misc-static-assert: DCL03-C
misc-non-copyable-objects: FIO38-C
clang-analyzer-unix.Malloc: MEM34-C
cert-msc30-c: MSC30-C
cert-flp30-c: FLP30-C
cert-err34-c: ERR34-C
cert-env33-c: ENV33-C

# Below was copied Feb 10, 2021 from https://wiki.sei.cmu.edu/confluence/display/cplusplus/Relation+to+the+CERT+C+Coding+Standard
#
# The following rules from the CERT C Coding Standard have been reviewed and do not apply to the CERT C++ Secure Coding Standard:
#ARR32-C
#ARR36-C
#CON30-C
#CON31-C
#CON32-C
#CON34-C
#CON35-C
#CON36-C
#CON38-C
#CON39-C
#DCL31-C
#DCL36-C
#DCL37-C
#DCL38-C
#DCL41-C
#EXP30-C
#EXP32-C
#EXP33-C
#EXP40-C
#EXP43-C
#EXP44-C
#MEM33-C
#SIG30-C
