# <legal>
# SCALe version r.6.2.2.2.A
# 
# Copyright 2020 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

module Scaife
module Api
module Prioritization
=begin

API calls to SCAIFE Prioritization module

=end

=begin

	Get a list of prioritization schemes

	params:
		access_t (string) - x_access_token recieved from SCAIFE_get_access_token()
		req_t (string) - x_request_token generated by UI module
		p_id (int) - OPTIONAL, project id to limit the priority schemes returned by
									project

	returns:
		r (RestClient::Response) - the response object
		Throws exception if unable to connect to SCAIFE
=end
	def SCAIFE_get_priorities(access_t, req_t, p_id = nil)
		headers = {
			x_access_token: access_t,
			x_request_token: req_t,
			content_type: :json,
			accept: :json
		}

		if not p_id.nil?
			headers[:project_id] = p_id
		end

		begin
			r = RestClient::Request.execute(
				method: :get,
				url: File.join(
					Rails.configuration.x.scaife.prioritization_module_url,
					Rails.configuration.x.scaife.get_priorities
				),
				headers: headers
			)
		rescue RestClient::ExceptionWithResponse => e
			r = e.response
		end

		return r
	end

=begin

	Create an new prioritization scheme

	params:
		access_t (string) - x_access_token recieved from SCAIFE_get_access_token()
		req_t (string) - x_request_token generated by UI module
		p_name (string) - priority scheme name
		p_ids ([string]) - array of project ids
		formula (string) - formula
		w_cols (Hash) - weighted columns
		is_global (bool) - All users can access this scheme from the Prioritization
												Module (PM), it is stored in SCAIFE-PM.
		is_remote (bool) - This scheme is accessible from the PM but is restricted
												to either the organization_id or the project.

	returns:
		r (RestClient::Response) - the response object
		Throws exception if unable to connect to SCAIFE
=end
	def SCAIFE_create_priority_scheme(access_t, req_t, p_name, p_ids, formula,
		w_cols, is_global, is_remote)
		begin
			r = RestClient::Request.execute(
				method: :post,
				url: File.join(
					Rails.configuration.x.scaife.prioritization_module_url,
					Rails.configuration.x.scaife.create_priority_scheme
				),
				payload: {
					priority_scheme_name: p_name,
					project_ids: p_ids,
					formula: formula,
					weighted_columns: w_cols,
					is_global: is_global,
					is_remote: is_remote
				}.to_json,
				headers: {
					x_access_token: access_t,
					x_request_token: req_t,
					content_type: :json,
					accept: :json
				}
			)
		rescue RestClient::ExceptionWithResponse => e
			r = e.response
		end

		return r
	end

=begin

	Update the values in the prioritization scheme

	params:
		access_t (string) - x_access_token recieved from SCAIFE_get_access_token()
		req_t (string) - x_request_token generated by UI module
		p_id (string) - ID of the prioritization scheme to update
		update (bool) - update_project
		pname (string) - priority scheme name
		OPTIONAL:
		formula (string) - OPTIONAL, formula
		w_cols (Hash) - OPTIONAL, weighted columns
		p_ids ([string]) - OPTIONAL, array of project ids

	returns:
		r (RestClient::Response) - the response object
		Throws exception if unable to connect to SCAIFE
=end
	def SCAIFE_update_priority_scheme(access_t, req_t, p_id, pname, formula = nil, w_cols = nil, proj_ids = nil)
		payload = {
			priority_scheme_name: pname
		}

		if not formula.nil?
			payload[:formula] = formula
		end

		if not w_cols.nil?
			payload[:weighted_columns] = w_cols
		end

		if not :proj_ids.nil?
			payload[:project_ids] = proj_ids
		end

		begin
			r = RestClient::Request.execute(
				method: :put,
				url: File.join(
					Rails.configuration.x.scaife.prioritization_module_url,
					Rails.configuration.x.scaife.update_priority_scheme,
					p_id
				),
				payload: payload.to_json,
				headers: {
					x_access_token: access_t,
					x_request_token: req_t,
					content_type: :json,
					accept: :json
				}
			)
		rescue RestClient::ExceptionWithResponse => e
			r = e.response
		end

		return r
	end

=begin

	Get a specific prioritization scheme

	params:
		access_t (string) - x_access_token recieved from SCAIFE_get_access_token()
		req_t (string) - x_request_token generated by UI module
		proj_id (string) - ID of the project associated with this prioritization
												scheme
		ps_id (string) - ID of the prioritization scheme to retrieve

	returns:
		r (RestClient::Response) - the response object
		Throws exception if unable to connect to SCAIFE
=end
	def SCAIFE_get_priority_scheme(access_t, req_t, proj_id, ps_id)
		begin
			r = RestClient::Request.execute(
				method: :get,
				url: File.join(
					Rails.configuration.x.scaife.prioritization_module_url,
					Rails.configuration.x.scaife.get_priority_scheme,
					ps_id,
					Rails.configuration.x.scaife.projects,
					proj_id
				),
				headers: {
					x_access_token: access_t,
					x_request_token: req_t,
					content_type: :json,
					accept: :json
				}
			)
		rescue RestClient::ExceptionWithResponse => e
			r = e.response
		end

		return r
	end

=begin

	Delete a prioritization scheme from the DB

	params:
		access_t (string) - x_access_token recieved from SCAIFE_get_access_token()
		req_t (string) - x_request_token generated by UI module
		proj_id (string) - ID of the project associated with this prioritization
												scheme
		ps_id (string) - ID of the prioritization scheme to delete

	returns:
		r (RestClient::Response) - the response object
		Throws exception if unable to connect to SCAIFE
=end
	def SCAIFE_delete_priority_scheme(access_t, req_t, proj_id, ps_id)
		begin
			r = RestClient::Request.execute(
				method: :delete,
				url: File.join(
					Rails.configuration.x.scaife.prioritization_module_url,
					Rails.configuration.x.scaife.delete_priority_scheme,
					ps_id,
					Rails.configuration.x.scaife.projects,
					proj_id
				),
				headers: {
					x_access_token: access_t,
					x_request_token: req_t,
					content_type: :json,
					accept: :json
				}
			)
		rescue RestClient::ExceptionWithResponse => e
			r = e.response
		end

		return r
	end

end
end
end
