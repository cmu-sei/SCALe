# Client code for the SCAIFE Datahub Module
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.0.1
#
# <legal>
# SCALe version r.6.7.0.0.A
# 
# Copyright 2021 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

require 'cgi'

module Scaife
module Api
module Datahub

  class StatsToDataHubApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Send a list of project_ids to stop forwarding the project's alerts to the Stats Module.
    # @param x_access_token [String] Token that contains information about the user
    # @param request_body [Array<String>] &#39;Multiple project_ids to close adaptive heuristic alert forwarding request&#39;
    # @param [Hash] opts the optional parameters
    # @return [AdaptiveHeuristicCloseResponse]
    def close_adaptive_heuristics(x_access_token, request_body, opts = {})
      data, _status_code, _headers = close_adaptive_heuristics_with_http_info(x_access_token, request_body, opts)
      data
    end

    # Send a list of project_ids to stop forwarding the project&#39;s alerts to the Stats Module.
    # @param x_access_token [String] Token that contains information about the user
    # @param request_body [Array<String>] &#39;Multiple project_ids to close adaptive heuristic alert forwarding request&#39;
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdaptiveHeuristicCloseResponse, Integer, Hash)>] AdaptiveHeuristicCloseResponse data, response status code and response headers
    def close_adaptive_heuristics_with_http_info(x_access_token, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatsToDataHubApi.close_adaptive_heuristics ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling StatsToDataHubApi.close_adaptive_heuristics"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling StatsToDataHubApi.close_adaptive_heuristics"
      end
      # resource path
      local_var_path = '/projects/adaptive_heuristics/close'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'AdaptiveHeuristicCloseResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StatsToDataHubApi.close_adaptive_heuristics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatsToDataHubApi#close_adaptive_heuristics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve projects from the DataHub for Classification at the Stats Module
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_projects_requested [ClassifierProjectsRequested] &#39;Tool and taxonomy information the requesting module already has, along with projects it is requesting.&#39;
    # @param [Hash] opts the optional parameters
    # @return [Array<ClassifierProject>]
    def get_projects_for_classifier(x_access_token, classifier_projects_requested, opts = {})
      data, _status_code, _headers = get_projects_for_classifier_with_http_info(x_access_token, classifier_projects_requested, opts)
      data
    end

    # Retrieve projects from the DataHub for Classification at the Stats Module
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_projects_requested [ClassifierProjectsRequested] &#39;Tool and taxonomy information the requesting module already has, along with projects it is requesting.&#39;
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ClassifierProject>, Integer, Hash)>] Array<ClassifierProject> data, response status code and response headers
    def get_projects_for_classifier_with_http_info(x_access_token, classifier_projects_requested, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StatsToDataHubApi.get_projects_for_classifier ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling StatsToDataHubApi.get_projects_for_classifier"
      end
      # verify the required parameter 'classifier_projects_requested' is set
      if @api_client.config.client_side_validation && classifier_projects_requested.nil?
        fail ArgumentError, "Missing the required parameter 'classifier_projects_requested' when calling StatsToDataHubApi.get_projects_for_classifier"
      end
      # resource path
      local_var_path = '/projects/classifiers/retrieve'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(classifier_projects_requested)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ClassifierProject>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StatsToDataHubApi.get_projects_for_classifier",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StatsToDataHubApi#get_projects_for_classifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exports relevant performance metrics for given experiment.
    # @param x_access_token Token that contains information about the user
    # @param experiment_id Experiment ID to export data
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def export_experiment_metrics(x_access_token, experiment_id, opts = {})
      export_experiment_metrics_with_http_info(x_access_token, experiment_id, opts)
      nil
    end

    # Exports relevant performance metrics for given experiment.
    # @param x_access_token Token that contains information about the user
    # @param experiment_id Experiment ID to export data
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def export_experiment_metrics_with_http_info(x_access_token, experiment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExperimentsApi.export_experiment_metrics ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling ExperimentsApi.export_experiment_metrics"
      end
      # verify the required parameter 'experiment_id' is set
      if @api_client.config.client_side_validation && experiment_id.nil?
        fail ArgumentError, "Missing the required parameter 'experiment_id' when calling ExperimentsApi.export_experiment_metrics"
      end
      # resource path
      local_var_path = '/experiments/{experiment_id}/export'.sub('{' + 'experiment_id' + '}', experiment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body]

      return_type = opts[:return_type]

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                        :header_params => header_params,
                                                        :query_params => query_params,
                                                        :form_params => form_params,
                                                        :body => post_body,
                                                        :auth_names => auth_names,
                                                        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExperimentsApi#export_experiment_metrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
end
end
