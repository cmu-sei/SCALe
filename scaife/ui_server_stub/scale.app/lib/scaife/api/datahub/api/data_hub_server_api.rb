# Client code for the SCAIFE Datahub Module
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.0.1
#
# <legal>
# SCALe version r.6.5.5.1.A
# 
# Copyright 2021 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

require 'cgi'

module Scaife
module Api
module Datahub

  class DataHubServerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve only the alerts and meta-alerts for a specific project.
    # @param x_access_token [String] Token that contains information about the user
    # @param project_id [String] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [GetAlertsResponse]
    def get_alerts_for_project(x_access_token, project_id, opts = {})
      data, _status_code, _headers = get_alerts_for_project_with_http_info(x_access_token, project_id, opts)
      data
    end

    # Retrieve only the alerts and meta-alerts for a specific project.
    # @param x_access_token [String] Token that contains information about the user
    # @param project_id [String] The ID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAlertsResponse, Integer, Hash)>] GetAlertsResponse data, response status code and response headers
    def get_alerts_for_project_with_http_info(x_access_token, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubServerApi.get_alerts_for_project ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling DataHubServerApi.get_alerts_for_project"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DataHubServerApi.get_alerts_for_project"
      end
      # resource path
      local_var_path = '/projects/{project_id}/alerts'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAlertsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubServerApi.get_alerts_for_project",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubServerApi#get_alerts_for_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing package in the DataHub Module.
    # @param x_access_token [String] Token that contains information about the user
    # @param package_id [String] ID of the package to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Package]
    def get_package(x_access_token, package_id, opts = {})
      data, _status_code, _headers = get_package_with_http_info(x_access_token, package_id, opts)
      data
    end

    # Retrieve an existing package in the DataHub Module.
    # @param x_access_token [String] Token that contains information about the user
    # @param package_id [String] ID of the package to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Package, Integer, Hash)>] Package data, response status code and response headers
    def get_package_with_http_info(x_access_token, package_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubServerApi.get_package ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling DataHubServerApi.get_package"
      end
      # verify the required parameter 'package_id' is set
      if @api_client.config.client_side_validation && package_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_id' when calling DataHubServerApi.get_package"
      end
      # resource path
      local_var_path = '/packages/{package_id}'.sub('{' + 'package_id' + '}', CGI.escape(package_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Package'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubServerApi.get_package",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubServerApi#get_package\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provides Server Status
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_status(opts = {})
      get_status_with_http_info(opts)
      nil
    end

    # Provides Server Status
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubServerApi.get_status ...'
      end
      # resource path
      local_var_path = '/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubServerApi.get_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubServerApi#get_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing taxonomy based on the name and version.
    # @param x_access_token [String] Token that contains information about the user
    # @param taxonomy_id [String] ID of the taxonomy to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Taxonomy]
    def get_taxonomy(x_access_token, taxonomy_id, opts = {})
      data, _status_code, _headers = get_taxonomy_with_http_info(x_access_token, taxonomy_id, opts)
      data
    end

    # Retrieve an existing taxonomy based on the name and version.
    # @param x_access_token [String] Token that contains information about the user
    # @param taxonomy_id [String] ID of the taxonomy to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Taxonomy, Integer, Hash)>] Taxonomy data, response status code and response headers
    def get_taxonomy_with_http_info(x_access_token, taxonomy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubServerApi.get_taxonomy ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling DataHubServerApi.get_taxonomy"
      end
      # verify the required parameter 'taxonomy_id' is set
      if @api_client.config.client_side_validation && taxonomy_id.nil?
        fail ArgumentError, "Missing the required parameter 'taxonomy_id' when calling DataHubServerApi.get_taxonomy"
      end
      # resource path
      local_var_path = '/taxonomies/{taxonomy_id}'.sub('{' + 'taxonomy_id' + '}', CGI.escape(taxonomy_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Taxonomy'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubServerApi.get_taxonomy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubServerApi#get_taxonomy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the languages associated with this taxonomy
    # @param x_access_token [String] Token that contains information about the user
    # @param taxonomy_id [String] ID of the taxonomy to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<LanguageVersionWId>]
    def get_taxonomy_languages(x_access_token, taxonomy_id, opts = {})
      data, _status_code, _headers = get_taxonomy_languages_with_http_info(x_access_token, taxonomy_id, opts)
      data
    end

    # Retrieve the languages associated with this taxonomy
    # @param x_access_token [String] Token that contains information about the user
    # @param taxonomy_id [String] ID of the taxonomy to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LanguageVersionWId>, Integer, Hash)>] Array<LanguageVersionWId> data, response status code and response headers
    def get_taxonomy_languages_with_http_info(x_access_token, taxonomy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubServerApi.get_taxonomy_languages ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling DataHubServerApi.get_taxonomy_languages"
      end
      # verify the required parameter 'taxonomy_id' is set
      if @api_client.config.client_side_validation && taxonomy_id.nil?
        fail ArgumentError, "Missing the required parameter 'taxonomy_id' when calling DataHubServerApi.get_taxonomy_languages"
      end
      # resource path
      local_var_path = '/taxonomies/{taxonomy_id}/languages'.sub('{' + 'taxonomy_id' + '}', CGI.escape(taxonomy_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<LanguageVersionWId>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubServerApi.get_taxonomy_languages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubServerApi#get_taxonomy_languages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing tool in the DataHub Module.
    # @param x_access_token [String] Token that contains information about the user
    # @param tool_id [String] Tool ID to retrieve data
    # @param [Hash] opts the optional parameters
    # @return [GetToolResponse]
    def get_tool_data(x_access_token, tool_id, opts = {})
      data, _status_code, _headers = get_tool_data_with_http_info(x_access_token, tool_id, opts)
      data
    end

    # Retrieve an existing tool in the DataHub Module.
    # @param x_access_token [String] Token that contains information about the user
    # @param tool_id [String] Tool ID to retrieve data
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetToolResponse, Integer, Hash)>] GetToolResponse data, response status code and response headers
    def get_tool_data_with_http_info(x_access_token, tool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubServerApi.get_tool_data ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling DataHubServerApi.get_tool_data"
      end
      # verify the required parameter 'tool_id' is set
      if @api_client.config.client_side_validation && tool_id.nil?
        fail ArgumentError, "Missing the required parameter 'tool_id' when calling DataHubServerApi.get_tool_data"
      end
      # resource path
      local_var_path = '/tools/{tool_id}'.sub('{' + 'tool_id' + '}', CGI.escape(tool_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetToolResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubServerApi.get_tool_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubServerApi#get_tool_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a List of Tool Parsers Available in the Module. The values should be used to set the tool_parser parameter in the POST /tools API
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_tool_parsers(x_access_token, opts = {})
      data, _status_code, _headers = get_tool_parsers_with_http_info(x_access_token, opts)
      data
    end

    # Retrieve a List of Tool Parsers Available in the Module. The values should be used to set the tool_parser parameter in the POST /tools API
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def get_tool_parsers_with_http_info(x_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubServerApi.get_tool_parsers ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling DataHubServerApi.get_tool_parsers"
      end
      # resource path
      local_var_path = '/tools/parsers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<String>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubServerApi.get_tool_parsers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubServerApi#get_tool_parsers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of all the available languages.
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<LanguageVersionWId>]
    def list_languages(x_access_token, opts = {})
      data, _status_code, _headers = list_languages_with_http_info(x_access_token, opts)
      data
    end

    # Retrieve a list of all the available languages.
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LanguageVersionWId>, Integer, Hash)>] Array<LanguageVersionWId> data, response status code and response headers
    def list_languages_with_http_info(x_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubServerApi.list_languages ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling DataHubServerApi.list_languages"
      end
      # resource path
      local_var_path = '/languages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<LanguageVersionWId>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubServerApi.list_languages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubServerApi#list_languages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of all available packages.
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<PackageHeading>]
    def list_packages(x_access_token, opts = {})
      data, _status_code, _headers = list_packages_with_http_info(x_access_token, opts)
      data
    end

    # Retrieve a list of all available packages.
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PackageHeading>, Integer, Hash)>] Array<PackageHeading> data, response status code and response headers
    def list_packages_with_http_info(x_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubServerApi.list_packages ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling DataHubServerApi.list_packages"
      end
      # resource path
      local_var_path = '/packages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PackageHeading>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubServerApi.list_packages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubServerApi#list_packages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of all available projects.
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<ProjectHeading>]
    def list_projects(x_access_token, opts = {})
      data, _status_code, _headers = list_projects_with_http_info(x_access_token, opts)
      data
    end

    # Retrieve a list of all available projects.
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ProjectHeading>, Integer, Hash)>] Array<ProjectHeading> data, response status code and response headers
    def list_projects_with_http_info(x_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubServerApi.list_projects ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling DataHubServerApi.list_projects"
      end
      # resource path
      local_var_path = '/projects'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ProjectHeading>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubServerApi.list_projects",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubServerApi#list_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of available Taxonomy ID, Name and Versions Available in the Module
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<TaxonomyHeading>]
    def list_taxonomies(x_access_token, opts = {})
      data, _status_code, _headers = list_taxonomies_with_http_info(x_access_token, opts)
      data
    end

    # Retrieve a list of available Taxonomy ID, Name and Versions Available in the Module
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TaxonomyHeading>, Integer, Hash)>] Array<TaxonomyHeading> data, response status code and response headers
    def list_taxonomies_with_http_info(x_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubServerApi.list_taxonomies ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling DataHubServerApi.list_taxonomies"
      end
      # resource path
      local_var_path = '/taxonomies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TaxonomyHeading>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubServerApi.list_taxonomies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubServerApi#list_taxonomies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 'Retrieve a List of Test Suite ID, Name and Versions Available in the Module'
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<TestSuiteHeading>]
    def list_test_suites(x_access_token, opts = {})
      data, _status_code, _headers = list_test_suites_with_http_info(x_access_token, opts)
      data
    end

    # &#39;Retrieve a List of Test Suite ID, Name and Versions Available in the Module&#39;
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TestSuiteHeading>, Integer, Hash)>] Array<TestSuiteHeading> data, response status code and response headers
    def list_test_suites_with_http_info(x_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubServerApi.list_test_suites ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling DataHubServerApi.list_test_suites"
      end
      # resource path
      local_var_path = '/test_suites'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TestSuiteHeading>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubServerApi.list_test_suites",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubServerApi#list_test_suites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a List of Tool ID, Name, and Versions Available in the Module
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<ToolHeading>]
    def list_tools(x_access_token, opts = {})
      data, _status_code, _headers = list_tools_with_http_info(x_access_token, opts)
      data
    end

    # Retrieve a List of Tool ID, Name, and Versions Available in the Module
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ToolHeading>, Integer, Hash)>] Array<ToolHeading> data, response status code and response headers
    def list_tools_with_http_info(x_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubServerApi.list_tools ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling DataHubServerApi.list_tools"
      end
      # resource path
      local_var_path = '/tools'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ToolHeading>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubServerApi.list_tools",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubServerApi#list_tools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end

end
end
end
