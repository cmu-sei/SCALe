# Client code for the SCAIFE DataHub Module
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.2.1
#
# <legal>
# SCALe version r.6.7.0.0.A
# 
# Copyright 2021 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

=end

require 'cgi'

module Scaife
module Api
module Datahub

  class ExperimentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Return list of experiment pre-configurations (.json)
    # @param x_access_token [String] Token that contains information about the package
    # @param [Hash] opts the optional parameters
    # @return [Array<ExperimentConfig>]
    def get_experiment_configs(x_access_token, opts = {})
      data, _status_code, _headers = get_experiment_configs_with_http_info(x_access_token, opts)
      data
    end

    # Return list of experiment pre-configurations (.json)
    # @param x_access_token [String] Token that contains information about the package
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ExperimentConfig>, Integer, Hash)>] Array<ExperimentConfig> data, response status code and response headers
    def get_experiment_configs_with_http_info(x_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExperimentsApi.get_experiment_configs ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling ExperimentsApi.get_experiment_configs"
      end
      # resource path
      local_var_path = '/experiments/configs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ExperimentConfig>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ExperimentsApi.get_experiment_configs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExperimentsApi#get_experiment_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload new experiment configuration (.json)
    # @param x_access_token [String] Token that contains information about the user
    # @param experiment_config [ExperimentConfig] Config file to be uploaded (.json)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upload_experiment_config(x_access_token, experiment_config, opts = {})
      upload_experiment_config_with_http_info(x_access_token, experiment_config, opts)
      nil
    end

    # Upload new experiment configuration (.json)
    # @param x_access_token [String] Token that contains information about the user
    # @param experiment_config [ExperimentConfig] Config file to be uploaded (.json)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def upload_experiment_config_with_http_info(x_access_token, experiment_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExperimentsApi.upload_experiment_config ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling ExperimentsApi.upload_experiment_config"
      end
      # verify the required parameter 'experiment_config' is set
      if @api_client.config.client_side_validation && experiment_config.nil?
        fail ArgumentError, "Missing the required parameter 'experiment_config' when calling ExperimentsApi.upload_experiment_config"
      end
      # resource path
      local_var_path = '/experiments/configs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(experiment_config)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ExperimentsApi.upload_experiment_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExperimentsApi#upload_experiment_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end

end
end
end
