# Client code for the SCAIFE Datahub Module
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.0.1
#
# <legal>
# SCALe version r.6.7.0.0.A
# 
# Copyright 2021 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

require 'date'
require 'time'

module Scaife
module Api
module Datahub

  class ClassifierTool
    attr_accessor :tool_id

    attr_accessor :tool_name

    attr_accessor :tool_version

    attr_accessor :category

    attr_accessor :source_mappings

    # Header fields expected for the metrics data
    attr_accessor :metrics_data_headers

    attr_accessor :uploader_id

    attr_accessor :uploader_organization_id

    attr_accessor :author_source

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tool_id' => :'tool_id',
        :'tool_name' => :'tool_name',
        :'tool_version' => :'tool_version',
        :'category' => :'category',
        :'source_mappings' => :'source_mappings',
        :'metrics_data_headers' => :'metrics_data_headers',
        :'uploader_id' => :'uploader_id',
        :'uploader_organization_id' => :'uploader_organization_id',
        :'author_source' => :'author_source'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tool_id' => :'String',
        :'tool_name' => :'String',
        :'tool_version' => :'String',
        :'category' => :'String',
        :'source_mappings' => :'Array<SourceMappingsClassifier>',
        :'metrics_data_headers' => :'Object',
        :'uploader_id' => :'String',
        :'uploader_organization_id' => :'String',
        :'author_source' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Scaife::Api::Datahub::ClassifierTool` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Scaife::Api::Datahub::ClassifierTool`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tool_id')
        self.tool_id = attributes[:'tool_id']
      end

      if attributes.key?(:'tool_name')
        self.tool_name = attributes[:'tool_name']
      end

      if attributes.key?(:'tool_version')
        self.tool_version = attributes[:'tool_version']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'source_mappings')
        if (value = attributes[:'source_mappings']).is_a?(Array)
          self.source_mappings = value
        end
      end

      if attributes.key?(:'metrics_data_headers')
        self.metrics_data_headers = attributes[:'metrics_data_headers']
      end

      if attributes.key?(:'uploader_id')
        self.uploader_id = attributes[:'uploader_id']
      end

      if attributes.key?(:'uploader_organization_id')
        self.uploader_organization_id = attributes[:'uploader_organization_id']
      end

      if attributes.key?(:'author_source')
        self.author_source = attributes[:'author_source']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @tool_id.nil?
        invalid_properties.push('invalid value for "tool_id", tool_id cannot be nil.')
      end

      if @tool_name.nil?
        invalid_properties.push('invalid value for "tool_name", tool_name cannot be nil.')
      end

      if @tool_version.nil?
        invalid_properties.push('invalid value for "tool_version", tool_version cannot be nil.')
      end

      if @category.nil?
        invalid_properties.push('invalid value for "category", category cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @tool_id.nil?
      return false if @tool_name.nil?
      return false if @tool_version.nil?
      return false if @category.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tool_id == o.tool_id &&
          tool_name == o.tool_name &&
          tool_version == o.tool_version &&
          category == o.category &&
          source_mappings == o.source_mappings &&
          metrics_data_headers == o.metrics_data_headers &&
          uploader_id == o.uploader_id &&
          uploader_organization_id == o.uploader_organization_id &&
          author_source == o.author_source
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tool_id, tool_name, tool_version, category, source_mappings, metrics_data_headers, uploader_id, uploader_organization_id, author_source].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Scaife::Api::Datahub.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
end
end
