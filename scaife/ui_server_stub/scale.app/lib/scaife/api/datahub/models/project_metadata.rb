# Client code for the SCAIFE Datahub Module
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.0.1
#
# <legal>
# SCALe version r.6.5.5.1.A
# 
# Copyright 2021 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

require 'date'
require 'time'

module Scaife
module Api
module Datahub

  class ProjectMetadata
    attr_accessor :project_name

    attr_accessor :project_description

    attr_accessor :author_source

    attr_accessor :package_id

    # If true, the DataHub will use checkers to create meta-alerts, instead of checker-to-condition mappings. Default => False
    attr_accessor :use_checkers

    # Default cascading type for the project. Default is 'diff'
    attr_accessor :cascading_type

    attr_accessor :meta_alerts

    attr_accessor :taxonomy_ids

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'project_name' => :'project_name',
        :'project_description' => :'project_description',
        :'author_source' => :'author_source',
        :'package_id' => :'package_id',
        :'use_checkers' => :'use_checkers',
        :'cascading_type' => :'cascading_type',
        :'meta_alerts' => :'meta_alerts',
        :'taxonomy_ids' => :'taxonomy_ids'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'project_name' => :'String',
        :'project_description' => :'String',
        :'author_source' => :'String',
        :'package_id' => :'String',
        :'use_checkers' => :'Boolean',
        :'cascading_type' => :'String',
        :'meta_alerts' => :'Array<MetaAlertNoId>',
        :'taxonomy_ids' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Scaife::Api::Datahub::ProjectMetadata` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Scaife::Api::Datahub::ProjectMetadata`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'project_name')
        self.project_name = attributes[:'project_name']
      end

      if attributes.key?(:'project_description')
        self.project_description = attributes[:'project_description']
      end

      if attributes.key?(:'author_source')
        self.author_source = attributes[:'author_source']
      end

      if attributes.key?(:'package_id')
        self.package_id = attributes[:'package_id']
      end

      if attributes.key?(:'use_checkers')
        self.use_checkers = attributes[:'use_checkers']
      end

      if attributes.key?(:'cascading_type')
        self.cascading_type = attributes[:'cascading_type']
      end

      if attributes.key?(:'meta_alerts')
        if (value = attributes[:'meta_alerts']).is_a?(Array)
          self.meta_alerts = value
        end
      end

      if attributes.key?(:'taxonomy_ids')
        if (value = attributes[:'taxonomy_ids']).is_a?(Array)
          self.taxonomy_ids = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @project_name.nil?
        invalid_properties.push('invalid value for "project_name", project_name cannot be nil.')
      end

      if @project_description.nil?
        invalid_properties.push('invalid value for "project_description", project_description cannot be nil.')
      end

      if @package_id.nil?
        invalid_properties.push('invalid value for "package_id", package_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @project_name.nil?
      return false if @project_description.nil?
      return false if @package_id.nil?
      cascading_type_validator = EnumAttributeValidator.new('String', ["diff", "precise"])
      return false unless cascading_type_validator.valid?(@cascading_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cascading_type Object to be assigned
    def cascading_type=(cascading_type)
      validator = EnumAttributeValidator.new('String', ["diff", "precise"])
      unless validator.valid?(cascading_type)
        fail ArgumentError, "invalid value for \"cascading_type\", must be one of #{validator.allowable_values}."
      end
      @cascading_type = cascading_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          project_name == o.project_name &&
          project_description == o.project_description &&
          author_source == o.author_source &&
          package_id == o.package_id &&
          use_checkers == o.use_checkers &&
          cascading_type == o.cascading_type &&
          meta_alerts == o.meta_alerts &&
          taxonomy_ids == o.taxonomy_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [project_name, project_description, author_source, package_id, use_checkers, cascading_type, meta_alerts, taxonomy_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Scaife::Api::Datahub.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
end
end
