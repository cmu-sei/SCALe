=begin
#SCAIFE DataHub Module API Definition

#This is the API definition for a SCAIFE DataHub module. SCAIFE facilitates auditing static analysis meta-alerts using classifiers, optional adaptive heuristics, and meta-alert prioritization. SCAIFE enables jump-starting labeled datasets using test suites. It is intended to enable a wide range of users (with widely varying datasets, static analysis tools, machine learning expertise, and amount of labeled data) to benefit from using classifiers and sophisticated prioritization to automatically triage static analysis meta-alerts.

OpenAPI spec version: 2.1.0
Contact: lflynn@cert.org
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.27
=end

# <legal>
# SCALe version r.6.7.0.0.A
# 
# Copyright 2021 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

require 'date'

module Scaife
module Api
module Datahub

  class ExperimentConfig
    # Name of the experiment config
    attr_accessor :experiment_name

    # Chosen classifier for the experiment
    attr_accessor :classifier_type

    # Chosen heuristic for the experiment
    attr_accessor :heuristic_type

    # Parameters for chosen heuristic for the experiment
    attr_accessor :heuristic_parameters

    # Chosen parameterization type for the experiment
    attr_accessor :parameterization_type

    # Chosen alert priority scheme for the experiment
    attr_accessor :alert_priority_scheme

    # Chosen alert filtering for the experiment
    attr_accessor :alert_filtering

    # True if fused
    attr_accessor :fused

    # True if this will be used to create a project for classifier training
    attr_accessor :is_test_suite

    # Names of tools whose output will be ingested
    attr_accessor :tool_names

    # IDs of tools used with project
    attr_accessor :tool_ids

    # Tool file paths
    attr_accessor :tool_files

    # Versions of tools used
    attr_accessor :tool_versions

    # Source code file path
    attr_accessor :source_code_file

    # Languages used
    attr_accessor :language_ids

    # Taxonomies used
    attr_accessor :taxonomy_ids

    # Optional maximum number of adjudications for the experiment
    attr_accessor :max_adjudications

    # Random seed to use when shuffling audit elements
    attr_accessor :shuffle_seed

    # Default confidence threshold for false posiitves
    attr_accessor :efp_ct

    # Default confidence threshold for true posiitves
    attr_accessor :etp_ct

    # Default ordering
    attr_accessor :ordering

    # Default filter
    attr_accessor :filtering

    # Test suite name
    attr_accessor :test_suite_name

    # Test suite version
    attr_accessor :test_suite_version

    # Test suite type
    attr_accessor :test_suite_type

    # Test suite sard id
    attr_accessor :test_suite_sard_id

    # Test suite manifest url
    attr_accessor :manifest_url

    # Test suite author
    attr_accessor :author_source

    # Test suite license
    attr_accessor :license_file

    # Test suite source url
    attr_accessor :source_url

    # Test suite manifest file path
    attr_accessor :manifest_file_path

    # Test suite file info file path
    attr_accessor :file_info_path

    # Test suite function info file path
    attr_accessor :function_info_path

    # Name of project used to train experiment classifier
    attr_accessor :classifier_training_project

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'experiment_name' => :'experiment_name',
        :'classifier_type' => :'classifier_type',
        :'heuristic_type' => :'heuristic_type',
        :'heuristic_parameters' => :'heuristic_parameters',
        :'parameterization_type' => :'parameterization_type',
        :'alert_priority_scheme' => :'alert_priority_scheme',
        :'alert_filtering' => :'alert_filtering',
        :'fused' => :'fused',
        :'is_test_suite' => :'is_test_suite',
        :'tool_names' => :'tool_names',
        :'tool_ids' => :'tool_ids',
        :'tool_files' => :'tool_files',
        :'tool_versions' => :'tool_versions',
        :'source_code_file' => :'source_code_file',
        :'language_ids' => :'language_ids',
        :'taxonomy_ids' => :'taxonomy_ids',
        :'max_adjudications' => :'max_adjudications',
        :'shuffle_seed' => :'shuffle_seed',
        :'efp_ct' => :'efp_ct',
        :'etp_ct' => :'etp_ct',
        :'ordering' => :'ordering',
        :'filtering' => :'filtering',
        :'test_suite_name' => :'test_suite_name',
        :'test_suite_version' => :'test_suite_version',
        :'test_suite_type' => :'test_suite_type',
        :'test_suite_sard_id' => :'test_suite_sard_id',
        :'manifest_url' => :'manifest_url',
        :'author_source' => :'author_source',
        :'license_file' => :'license_file',
        :'source_url' => :'source_url',
        :'manifest_file_path' => :'manifest_file_path',
        :'file_info_path' => :'file_info_path',
        :'function_info_path' => :'function_info_path',
        :'classifier_training_project' => :'classifier_training_project'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'experiment_name' => :'Object',
        :'classifier_type' => :'Object',
        :'heuristic_type' => :'Object',
        :'heuristic_parameters' => :'Object',
        :'parameterization_type' => :'Object',
        :'alert_priority_scheme' => :'Object',
        :'alert_filtering' => :'Object',
        :'fused' => :'Object',
        :'is_test_suite' => :'Object',
        :'tool_names' => :'Object',
        :'tool_ids' => :'Object',
        :'tool_files' => :'Object',
        :'tool_versions' => :'Object',
        :'source_code_file' => :'Object',
        :'language_ids' => :'Object',
        :'taxonomy_ids' => :'Object',
        :'max_adjudications' => :'Object',
        :'shuffle_seed' => :'Object',
        :'efp_ct' => :'Object',
        :'etp_ct' => :'Object',
        :'ordering' => :'Object',
        :'filtering' => :'Object',
        :'test_suite_name' => :'Object',
        :'test_suite_version' => :'Object',
        :'test_suite_type' => :'Object',
        :'test_suite_sard_id' => :'Object',
        :'manifest_url' => :'Object',
        :'author_source' => :'Object',
        :'license_file' => :'Object',
        :'source_url' => :'Object',
        :'manifest_file_path' => :'Object',
        :'file_info_path' => :'Object',
        :'function_info_path' => :'Object',
        :'classifier_training_project' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::ExperimentConfig` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::ExperimentConfig`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'experiment_name')
        self.experiment_name = attributes[:'experiment_name']
      end

      if attributes.key?(:'classifier_type')
        self.classifier_type = attributes[:'classifier_type']
      end

      if attributes.key?(:'heuristic_type')
        self.heuristic_type = attributes[:'heuristic_type']
      end

      if attributes.key?(:'heuristic_parameters')
        if (value = attributes[:'heuristic_parameters']).is_a?(Hash)
          self.heuristic_parameters = value
        end
      end

      if attributes.key?(:'parameterization_type')
        self.parameterization_type = attributes[:'parameterization_type']
      end

      if attributes.key?(:'alert_priority_scheme')
        self.alert_priority_scheme = attributes[:'alert_priority_scheme']
      end

      if attributes.key?(:'alert_filtering')
        self.alert_filtering = attributes[:'alert_filtering']
      end

      if attributes.key?(:'fused')
        self.fused = attributes[:'fused']
      end

      if attributes.key?(:'is_test_suite')
        self.is_test_suite = attributes[:'is_test_suite']
      end

      if attributes.key?(:'tool_names')
        self.tool_names = attributes[:'tool_names']
      end

      if attributes.key?(:'tool_ids')
        self.tool_ids = attributes[:'tool_ids']
      end

      if attributes.key?(:'tool_files')
        self.tool_files = attributes[:'tool_files']
      end

      if attributes.key?(:'tool_versions')
        self.tool_versions = attributes[:'tool_versions']
      end

      if attributes.key?(:'source_code_file')
        self.source_code_file = attributes[:'source_code_file']
      end

      if attributes.key?(:'language_ids')
        self.language_ids = attributes[:'language_ids']
      end

      if attributes.key?(:'taxonomy_ids')
        self.taxonomy_ids = attributes[:'taxonomy_ids']
      end

      if attributes.key?(:'max_adjudications')
        self.max_adjudications = attributes[:'max_adjudications']
      end

      if attributes.key?(:'shuffle_seed')
        self.shuffle_seed = attributes[:'shuffle_seed']
      end

      if attributes.key?(:'efp_ct')
        self.efp_ct = attributes[:'efp_ct']
      end

      if attributes.key?(:'etp_ct')
        self.etp_ct = attributes[:'etp_ct']
      end

      if attributes.key?(:'ordering')
        self.ordering = attributes[:'ordering']
      end

      if attributes.key?(:'filtering')
        self.filtering = attributes[:'filtering']
      end

      if attributes.key?(:'test_suite_name')
        self.test_suite_name = attributes[:'test_suite_name']
      end

      if attributes.key?(:'test_suite_version')
        self.test_suite_version = attributes[:'test_suite_version']
      end

      if attributes.key?(:'test_suite_type')
        self.test_suite_type = attributes[:'test_suite_type']
      end

      if attributes.key?(:'test_suite_sard_id')
        self.test_suite_sard_id = attributes[:'test_suite_sard_id']
      end

      if attributes.key?(:'manifest_url')
        self.manifest_url = attributes[:'manifest_url']
      end

      if attributes.key?(:'author_source')
        self.author_source = attributes[:'author_source']
      end

      if attributes.key?(:'license_file')
        self.license_file = attributes[:'license_file']
      end

      if attributes.key?(:'source_url')
        self.source_url = attributes[:'source_url']
      end

      if attributes.key?(:'manifest_file_path')
        self.manifest_file_path = attributes[:'manifest_file_path']
      end

      if attributes.key?(:'file_info_path')
        self.file_info_path = attributes[:'file_info_path']
      end

      if attributes.key?(:'function_info_path')
        self.function_info_path = attributes[:'function_info_path']
      end

      if attributes.key?(:'classifier_training_project')
        self.classifier_training_project = attributes[:'classifier_training_project']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @experiment_name.nil?
        invalid_properties.push('invalid value for "experiment_name", experiment_name cannot be nil.')
      end

      if @classifier_type.nil?
        invalid_properties.push('invalid value for "classifier_type", classifier_type cannot be nil.')
      end

      if @heuristic_type.nil?
        invalid_properties.push('invalid value for "heuristic_type", heuristic_type cannot be nil.')
      end

      if @parameterization_type.nil?
        invalid_properties.push('invalid value for "parameterization_type", parameterization_type cannot be nil.')
      end

      if @alert_priority_scheme.nil?
        invalid_properties.push('invalid value for "alert_priority_scheme", alert_priority_scheme cannot be nil.')
      end

      if @alert_filtering.nil?
        invalid_properties.push('invalid value for "alert_filtering", alert_filtering cannot be nil.')
      end

      if @fused.nil?
        invalid_properties.push('invalid value for "fused", fused cannot be nil.')
      end

      if @is_test_suite.nil?
        invalid_properties.push('invalid value for "is_test_suite", is_test_suite cannot be nil.')
      end

      if @tool_names.nil?
        invalid_properties.push('invalid value for "tool_names", tool_names cannot be nil.')
      end

      if @tool_ids.nil?
        invalid_properties.push('invalid value for "tool_ids", tool_ids cannot be nil.')
      end

      if @tool_files.nil?
        invalid_properties.push('invalid value for "tool_files", tool_files cannot be nil.')
      end

      if @tool_versions.nil?
        invalid_properties.push('invalid value for "tool_versions", tool_versions cannot be nil.')
      end

      if @source_code_file.nil?
        invalid_properties.push('invalid value for "source_code_file", source_code_file cannot be nil.')
      end

      if @language_ids.nil?
        invalid_properties.push('invalid value for "language_ids", language_ids cannot be nil.')
      end

      if @taxonomy_ids.nil?
        invalid_properties.push('invalid value for "taxonomy_ids", taxonomy_ids cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @experiment_name.nil?
      return false if @classifier_type.nil?
      return false if @heuristic_type.nil?
      return false if @parameterization_type.nil?
      return false if @alert_priority_scheme.nil?
      return false if @alert_filtering.nil?
      return false if @fused.nil?
      return false if @is_test_suite.nil?
      return false if @tool_names.nil?
      return false if @tool_ids.nil?
      return false if @tool_files.nil?
      return false if @tool_versions.nil?
      return false if @source_code_file.nil?
      return false if @language_ids.nil?
      return false if @taxonomy_ids.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
        experiment_name == o.experiment_name &&
        classifier_type == o.classifier_type &&
        heuristic_type == o.heuristic_type &&
        heuristic_parameters == o.heuristic_parameters &&
        parameterization_type == o.parameterization_type &&
        alert_priority_scheme == o.alert_priority_scheme &&
        alert_filtering == o.alert_filtering &&
        fused == o.fused &&
        is_test_suite == o.is_test_suite &&
        tool_names == o.tool_names &&
        tool_ids == o.tool_ids &&
        tool_files == o.tool_files &&
        tool_versions == o.tool_versions &&
        source_code_file == o.source_code_file &&
        language_ids == o.language_ids &&
        taxonomy_ids == o.taxonomy_ids &&
        max_adjudications == o.max_adjudications &&
        shuffle_seed == o.shuffle_seed &&
        efp_ct == o.efp_ct &&
        etp_ct == o.etp_ct &&
        ordering == o.ordering &&
        filtering == o.filtering &&
        test_suite_name == o.test_suite_name &&
        test_suite_version == o.test_suite_version &&
        test_suite_type == o.test_suite_type &&
        test_suite_sard_id == o.test_suite_sard_id &&
        manifest_url == o.manifest_url &&
        author_source == o.author_source &&
        license_file == o.license_file &&
        source_url == o.source_url &&
        manifest_file_path == o.manifest_file_path &&
        file_info_path == o.file_info_path &&
        function_info_path == o.function_info_path &&
        classifier_training_project == o.classifier_training_project
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [experiment_name, classifier_type, heuristic_type, heuristic_parameters, parameterization_type, alert_priority_scheme, alert_filtering, fused, is_test_suite, tool_names, tool_ids, tool_files, tool_versions, source_code_file, language_ids, taxonomy_ids, max_adjudications, shuffle_seed, efp_ct, etp_ct, ordering, filtering, test_suite_name, test_suite_version, test_suite_type, test_suite_sard_id, manifest_url, author_source, license_file, source_url, manifest_file_path, file_info_path, function_info_path, classifier_training_project].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
end
end
end
end
