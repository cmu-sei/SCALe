# <legal>
# SCALe version r.6.2.2.2.A
# 
# Copyright 2020 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

module Scaife
module Api
module Datahub


=begin

API calls to SCAIFE Datahub module

=end


=begin

  List SCAIFE Projects

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_list_projects(access_t, req_t)
  headers = {
              x_access_token: access_t,
              x_request_token: req_t,
              content_type: :json,
              accept: :json
  }

  url = File.join(
		    Rails.configuration.x.scaife.datahub_module_url,
	            Rails.configuration.x.scaife.list_projects
		 )

  begin
    r = RestClient::Request.execute(method: :get, url: url, headers: headers)
  rescue RestClient::ExceptionWithResponse => e
    r = e.response
  end

  return r
end


=begin

  List SCAIFE Packages

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_list_packages(access_t, req_t)
  headers = {
              x_access_token: access_t,
              x_request_token: req_t,
              content_type: :json,
              accept: :json
            }

  url = File.join(
		   Rails.configuration.x.scaife.datahub_module_url,
		   Rails.configuration.x.scaife.list_packages
		 )

  begin
    r = RestClient::Request.execute(method: :get, url: url, headers: headers)
  rescue RestClient::ExceptionWithResponse => e
    r = e.response
  end

  return r
end



=begin

  List SCAIFE CodeLanguages

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_list_languages(access_t, req_t)
  headers = {
              x_access_token: access_t,
              x_request_token: req_t,
              content_type: :json,
              accept: :json
            }

  url = File.join(
	            Rails.configuration.x.scaife.datahub_module_url,
                    Rails.configuration.x.scaife.list_languages
	)
  begin
    r = RestClient::Request.execute(method: :get, url: url, headers: headers)
  rescue RestClient::ExceptionWithResponse => e
    r = e.response
  end

  return r
end


=begin

  Get SCAIFE Taxonomies

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_get_taxonomy_list(access_t, req_t)
  headers = {
              x_access_token: access_t,
              x_request_token: req_t,
              content_type: :json,
              accept: :json
  }

  url = File.join(
                   Rails.configuration.x.scaife.datahub_module_url,
		   Rails.configuration.x.scaife.get_taxonomy_list
  )

  begin
    r = RestClient::Request.execute(method: :get, url: url, headers: headers)
  rescue RestClient::ExceptionWithResponse => e
    r = e.response
  end

  return r
end


=begin

  Get SCAIFE Taxonomies

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_get_taxonomy(access_t, req_t, t_id)
  headers = {
              x_access_token: access_t,
              x_request_token: req_t,
              content_type: :json,
              accept: :json
  }

  url = File.join(
                   Rails.configuration.x.scaife.datahub_module_url,
		   Rails.configuration.x.scaife.get_taxonomy_list,
                   t_id
  )

  begin
    r = RestClient::Request.execute(method: :get, url: url, headers: headers)
  rescue RestClient::ExceptionWithResponse => e
    r = e.response
  end

  return r
end


=begin

  Create SCAIFE Taxonomy

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module
    t_name (string) - name for the taxonomy
    t_version (string) - version for the taxonomy
    descript (string) - description for the type of taxonomy and any other clarifying information
    author_src (string) - author of the taxonomy (may be an organization)

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_create_taxonomy(access_t, req_t, t_name, t_version, descript, conditions, author_src)

  headers = {
              x_access_token: access_t,
              x_request_token: req_t,
              content_type: :json,
              accept: :json
  }

  url = File.join(
		   Rails.configuration.x.scaife.datahub_module_url,
		   Rails.configuration.x.scaife.create_taxonomy
		 )

  payload = Hash.new
  payload["taxonomy_name"] = t_name
  payload["taxonomy_version"] = t_version
  payload["description"] = descript
  payload["conditions"] = conditions

  if nil != author_src
    payload["author_source"] = author_src
  end


  begin
    r = RestClient::Request.execute(method: :post, url: url, payload: payload.to_json, headers: headers)
  rescue RestClient::ExceptionWithResponse => e
    r = e.response
  end

  return r
end


=begin

  Edit SCAIFE Taxonomy

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module
    t_id (string) - SCAIFE taxonomy ID to add the conditions to
    conditions (array) - Conditions to include in the SCAIFE taxonomy   

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
  def SCAIFE_edit_taxonomy(access_t, req_t, t_id, conditions)
  
    headers = {
                x_access_token: access_t,
                x_request_token: req_t,
                content_type: :json,
                accept: :json
    }
  
    url = File.join(
         Rails.configuration.x.scaife.datahub_module_url,
         Rails.configuration.x.scaife.edit_taxonomy,
         t_id
       )
  
    payload = Hash.new
    payload["conditions"] = conditions
  
    begin
      r = RestClient::Request.execute(method: :put, url: url, payload: payload.to_json, headers: headers)
    rescue RestClient::ExceptionWithResponse => e
      r = e.response
    end
  
    return r
  end


=begin

  List SCAIFE Tools

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_get_tool_list(access_t, req_t)
  headers = {
              x_access_token: access_t,
              x_request_token: req_t,
              content_type: :json,
              accept: :json
            }

  url = File.join(
                   Rails.configuration.x.scaife.datahub_module_url,
                   Rails.configuration.x.scaife.get_tool_list
                 )

  begin
    r = RestClient::Request.execute(method: :get, url: url, headers: headers)
  rescue RestClient::ExceptionWithResponse => e
    r = e.response
  end

  return r
end


=begin

  Get SCAIFE Tool data

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_get_tool_data(access_t, req_t, t_id)
  headers = {
              x_access_token: access_t,
              x_request_token: req_t,
              content_type: :json,
              accept: :json
            }

  url = File.join(
	  Rails.configuration.x.scaife.datahub_module_url,
	  Rails.configuration.x.scaife.get_tool_data,
          t_id
	)

  begin
    r = RestClient::Request.execute(method: :get, url: url, headers: headers)
  rescue RestClient::ExceptionWithResponse => e
    r = e.response
  end

  return r
end


=begin

  Upload SCAIFE Tool

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_upload_tool(access_t, req_t, tool_name, tool_version, category, platforms, code_language_ids, checker_mappings, checkers, code_metrics_headers, author_src)

  headers = {
    x_access_token: access_t,
    x_request_token: req_t,
    content_type: :json,
    accept: :json
  }

  url = File.join(
    Rails.configuration.x.scaife.datahub_module_url,
    Rails.configuration.x.scaife.upload_tool
  )


  payload = Hash.new
  payload["tool_name"] = tool_name
  payload["tool_version"] = tool_version
  payload["category"] = category

  if platforms.present?
    payload["language_platforms"] = platforms
  end
    
  if code_language_ids.present?
    payload["code_language_ids"] = code_language_ids
  end

  if checker_mappings.present?
    payload["checker_mappings"] = checker_mappings
  end

  if checkers.present?
    payload["checkers"] = checkers
  end

  if code_metrics_headers.present?
    payload["code_metrics_headers"] = code_metrics_headers
  end

  if not author_src.nil?
    payload["author_source"] = author_src
  end

  begin
    r = RestClient::Request.execute(method: :post, url: url, payload: payload.to_json, headers: headers)
  rescue RestClient::ExceptionWithResponse => e
    r = e.response
  end

  return r
end


=begin

  Edit SCAIFE Tool

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_edit_tool(access_t, req_t, t_id, cm_file_path)

  headers = {
    x_access_token: access_t,
    x_request_token: req_t
  }

  url = File.join(
	  Rails.configuration.x.scaife.datahub_module_url,
          Rails.configuration.x.scaife.edit_tool,
          t_id
	)

  payload = Hash.new
  payload["multipart"] = true
  payload["checker_mapping_csv"] = File.new(cm_file_path, "r")


  begin
    r = RestClient::Request.execute(method: :put, url: url, payload: payload, headers: headers)
  rescue RestClient::ExceptionWithResponse => e
    r = e.response
  end

  return r
end


=begin

  Create SCAIFE Project

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_create_project(access_t, req_t, p_name, p_descript, author_src, package_id, m_alerts, taxonomy_ids)

  headers = {
    x_access_token: access_t,
    x_request_token: req_t,
    content_type: :json,
    accept: :json
  }

  url = File.join(
          Rails.configuration.x.scaife.datahub_module_url,
          Rails.configuration.x.scaife.create_project
        )

  payload = Hash.new
  payload["project_name"] = p_name
  payload["project_description"] = p_descript
  payload["package_id"] = package_id

  if nil != author_src
    payload["author_source"] = author_src
  end

  if m_alerts.length > 0
    payload["meta_alerts"] = m_alerts
  end

  if taxonomy_ids.length > 0
    payload["taxonomy_ids"] = taxonomy_ids
  end

  begin
    r = RestClient::Request.execute(method: :post, url: url, payload: payload.to_json, headers: headers, read_timeout: nil)
  rescue RestClient::ExceptionWithResponse => e
    r = e.response
  end

  return r
end


=begin

  Enable SCAIFE project data forwarding

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
  def SCAIFE_enable_data_forwarding(access_t, req_t, p_id)
  
    headers = {
                x_access_token: access_t,
                x_request_token: req_t,
                content_type: :json,
                accept: :json
    }
  
    url = File.join(
         Rails.configuration.x.scaife.datahub_module_url,
         Rails.configuration.x.scaife.enable_data_forwarding,
         p_id
       )
    
    begin
      r = RestClient::Request.execute(method: :post, url: url, headers: headers)
    rescue RestClient::ExceptionWithResponse => e
      r = e.response
    end
  
    return r
  end


=begin

  Edit SCAIFE Project

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
  def SCAIFE_edit_project(access_t, req_t, p_id, p_name, p_descript, m_alerts, taxonomy_ids)
  
    headers = {
                x_access_token: access_t,
                x_request_token: req_t,
                content_type: :json,
                accept: :json
    }
  
    url = File.join(
         Rails.configuration.x.scaife.datahub_module_url,
         Rails.configuration.x.scaife.edit_project,
         p_id
       )
  
    payload = Hash.new
 
    if nil != p_name
      payload["project_name"] = p_name
    end
   
    if nil != p_descript
      payload["project_description"] = p_descript
    end

    if m_alerts.length > 0
      payload["meta_alerts"] = m_alerts
    end

    if taxonomy_ids.length > 0
      payload["taxonomy_ids"] = taxonomy_ids
    end
  
    begin
      r = RestClient::Request.execute(method: :put, url: url, payload: payload.to_json, headers: headers)
    rescue RestClient::ExceptionWithResponse => e
      r = e.response
    end
  
    return r
  end


=begin

  Send meta-alerts for SCAIFE Project

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
  def SCAIFE_send_meta_alerts_for_project(access_t, req_t, p_id, meta_alert_determinations)
  
    headers = {
                x_access_token: access_t,
                x_request_token: req_t,
                content_type: :json,
                accept: :json
    }
  
    url = File.join(
         Rails.configuration.x.scaife.datahub_module_url,
         Rails.configuration.x.scaife.send_meta_alerts_for_project,
         p_id,
         "determinations"
       )
  
    payload = meta_alert_determinations
  
    begin
      r = RestClient::Request.execute(method: :post, url: url, payload: payload.to_json, headers: headers)
    rescue RestClient::ExceptionWithResponse => e
      r = e.response
    end
  
    return r
  end


=begin

  Create SCAIFE Package

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_create_package(access_t, req_t, p_name, p_descript, author_src, lang_ids, code_src_url, src_file_url, src_func_url, ts_id, alerts, t_ids)

  headers = {
    x_access_token: access_t,
    x_request_token: req_t,
    content_type: :json,
    accept: :json
  }

  url = File.join(
          Rails.configuration.x.scaife.datahub_module_url,
	  Rails.configuration.x.scaife.create_package
        )

  payload = Hash.new
  payload["package_name"] = p_name
  payload["package_description"] = p_descript
  payload["code_language_ids"] = lang_ids

  if !author_src.blank?
    payload["author_source"] = author_src
  end

  if !code_src_url.blank?
    payload["code_source_url"] = code_src_url
  end

  if !src_file_url.blank?
    payload["source_file_url"] = src_file_url
  end

  if !src_func_url.blank?
    payload["source_function_url"] = src_func_url
  end

  if !ts_id.blank?
    payload["test_suite_id"] = ts_id
  end

  if alerts.length > 0
    payload["alerts"] = alerts
  end

  if t_ids.length > 0
    payload["tool_ids"] = t_ids
  end

  begin
    r = RestClient::Request.execute(method: :post, url: url, payload: payload.to_json, headers: headers, read_timeout: nil)
  rescue RestClient::ExceptionWithResponse => e
    r = e.response
  end

  return r
end

=begin

  Upload codebase for SCAIFE Package

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_upload_codebase_for_package(access_t, req_t, p_id, src, file_info, function_info)

  headers = {
    x_access_token: access_t,
    x_request_token: req_t
  }

  url = File.join(
          Rails.configuration.x.scaife.datahub_module_url,
          Rails.configuration.x.scaife.create_package,
          p_id
        )

  payload = Hash.new
  payload["multipart"] = true

  if File.file?(src)
    payload["sourcecode_archive"] = File.new(src, "r")
  end

  if File.file?(file_info)
    payload["source_file_csv"] = File.new(file_info, "r")
  end

  if File.file?(function_info)
    payload["source_function_csv"] = File.new(function_info, "r")
  end

  begin
    r = RestClient::Request.execute(method: :post, url: url, payload: payload, headers: headers, read_timeout: nil)
  rescue RestClient::ExceptionWithResponse => e
    r = e.response
  end

  return r
end

=begin

  Get a list of languages with their versions and ids

  params:
    access_t (string) - x_access_token recieved from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end

def SCAIFE_get_languages(access_t, req_t)
    headers = {
      x_access_token: access_t,
      x_request_token: req_t,
      content_type: :json,
      accept: :json
    }

    url = File.join(
            Rails.configuration.x.scaife.datahub_module_url,
            Rails.configuration.x.scaife.get_languages
          )

    begin
      r = RestClient::Request.execute(method: :get, url: url, headers: headers)
    rescue RestClient::ExceptionWithResponse => e
      r = e.response
    end

    return r
end

=begin

  Create a new language

  params:
    access_t (string) - x_access_token recieved from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module
    l_name (string) - language name
    l_version (string) - language version

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_create_language(access_t, req_t, l_name, l_version)

    headers = {
          x_access_token: access_t,
          x_request_token: req_t,
          content_type: :json,
          accept: :json
    }

    url = File.join(
            Rails.configuration.x.scaife.datahub_module_url,
            Rails.configuration.x.scaife.create_language
          )

    payload = Hash.new
    payload["language"] = l_name
    if nil != l_version
      payload["version"] = l_version
    end

    begin
      r = RestClient::Request.execute(method: :post, url: url, payload: payload.to_json, headers: headers)
    rescue RestClient::ExceptionWithResponse => e
      r = e.response
    end

    return r
end

=begin

  Create a SCAIFE test suite

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_create_test_suite(access_t, req_t, ts_name, ts_version, ts_type, manifest_urls, use_license_file_url, author_src, code_languages)

    headers = {
          x_access_token: access_t,
          x_request_token: req_t,
          content_type: :json,
          accept: :json
    }

    url = File.join(
            Rails.configuration.x.scaife.datahub_module_url,
            Rails.configuration.x.scaife.test_suites
          )

    payload = Hash.new
    payload["test_suite_name"] = ts_name
    payload["test_suite_version"] = ts_version
    payload["test_suite_type"] = ts_type

    if nil != author_src
      payload["author_source"] = author_src
    end
    if nil != use_license_file_url
      payload["use_license_file_url"] = use_license_file_url
    end
    if manifest_urls.length > 0
      payload["manifest_urls"] = manifest_urls
    end
    if code_languages.length > 0
      payload["code_languages"] = code_languages
    end


    begin
      r = RestClient::Request.execute(method: :post, url: url, payload: payload.to_json, headers: headers, read_timeout: nil)
    rescue RestClient::ExceptionWithResponse => e
      r = e.response
    end

    return r
end

=begin

  Upload SCAIFE test suite file information

  params:
    access_t (string) - x_access_token received from SCAIFE_get_access_token()
    req_t (string) - x_request_token generated by UI module

  returns:
    r (RestClient::Response) - the response object
    Throws exception if unable to connect to SCAIFE
=end
def SCAIFE_upload_test_suite(access_t, req_t, ts_id, package_id, manifest_file, use_license_file, source_file_csv, source_function_csv)

    headers = {
          x_access_token: access_t,
          x_request_token: req_t
    }

    url = File.join(
            Rails.configuration.x.scaife.datahub_module_url,
            Rails.configuration.x.scaife.test_suites,
            ts_id,
            Rails.configuration.x.scaife.packages,
            package_id
          )

    payload = Hash.new
    payload["multipart"] = true

    if File.file?(manifest_file)
        payload["manifest_file"] = File.new(manifest_file, "r")
    end

    if File.file?(use_license_file)
        payload["use_license_file"] = File.new(use_license_file, "r")
    end

    if File.file?(source_file_csv)
        payload["source_file_csv"] = File.new(source_file_csv, "r")
    end

    if File.file?(source_function_csv)
      payload["source_function_csv"] = File.new(source_function_csv, "r")
    end


    begin
      r = RestClient::Request.execute(method: :post, url: url, payload: payload, headers: headers, read_timeout: nil)
    rescue RestClient::ExceptionWithResponse => e
      r = e.response
    end

    return r
end



end
end
end
