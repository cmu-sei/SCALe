# Client code for the SCAIFE Prioritization Module
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.0.0
#
# <legal>
# SCALe version r.6.5.5.1.A
# 
# Copyright 2021 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

require 'cgi'

module Scaife
module Api
module Prioritization

  class UIToPrioritizationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new prioritization scheme
    # @param x_access_token [String] Token that contains information about the user
    # @param create_prioritization_data [CreatePrioritizationData] Prioritization scheme to create
    # @param [Hash] opts the optional parameters
    # @return [CreatePrioritizationResponse]
    def create_prioritization(x_access_token, create_prioritization_data, opts = {})
      data, _status_code, _headers = create_prioritization_with_http_info(x_access_token, create_prioritization_data, opts)
      data
    end

    # Create a new prioritization scheme
    # @param x_access_token [String] Token that contains information about the user
    # @param create_prioritization_data [CreatePrioritizationData] Prioritization scheme to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatePrioritizationResponse, Integer, Hash)>] CreatePrioritizationResponse data, response status code and response headers
    def create_prioritization_with_http_info(x_access_token, create_prioritization_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UIToPrioritizationApi.create_prioritization ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling UIToPrioritizationApi.create_prioritization"
      end
      # verify the required parameter 'create_prioritization_data' is set
      if @api_client.config.client_side_validation && create_prioritization_data.nil?
        fail ArgumentError, "Missing the required parameter 'create_prioritization_data' when calling UIToPrioritizationApi.create_prioritization"
      end
      # resource path
      local_var_path = Rails.configuration.x.scaife.create_priority_scheme

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_prioritization_data)

      # return_type
      return_type = opts[:debug_return_type] || 'CreatePrioritizationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UIToPrioritizationApi.create_prioritization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UIToPrioritizationApi#create_prioritization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific prioritization scheme
    # @param priority_scheme_id [String] The id of the prioritization scheme
    # @param project_id [String] The id of the project associated with this project
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_prioritization(priority_scheme_id, project_id, x_access_token, opts = {})
      delete_prioritization_with_http_info(priority_scheme_id, project_id, x_access_token, opts)
      nil
    end

    # Delete a specific prioritization scheme
    # @param priority_scheme_id [String] The id of the prioritization scheme
    # @param project_id [String] The id of the project associated with this project
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_prioritization_with_http_info(priority_scheme_id, project_id, x_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UIToPrioritizationApi.delete_prioritization ...'
      end
      # verify the required parameter 'priority_scheme_id' is set
      if @api_client.config.client_side_validation && priority_scheme_id.nil?
        fail ArgumentError, "Missing the required parameter 'priority_scheme_id' when calling UIToPrioritizationApi.delete_prioritization"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling UIToPrioritizationApi.delete_prioritization"
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling UIToPrioritizationApi.delete_prioritization"
      end
      # resource path
      local_var_path = File.join(
        Rails.configuration.x.scaife.delete_priority_scheme,
        CGI.escape(priority_scheme_id.to_s),
        Rails.configuration.x.scaife.projects,
        CGI.escape(project_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UIToPrioritizationApi.delete_prioritization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UIToPrioritizationApi#delete_prioritization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a specific prioritization scheme
    # @param priority_scheme_id [String] The id of the prioritization scheme
    # @param project_id [String] The id of the project associated with this project
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [PrioritySchemeData]
    def get_prioritization(priority_scheme_id, project_id, x_access_token, opts = {})
      data, _status_code, _headers = get_prioritization_with_http_info(priority_scheme_id, project_id, x_access_token, opts)
      data
    end

    # Retrieve a specific prioritization scheme
    # @param priority_scheme_id [String] The id of the prioritization scheme
    # @param project_id [String] The id of the project associated with this project
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrioritySchemeData, Integer, Hash)>] PrioritySchemeData data, response status code and response headers
    def get_prioritization_with_http_info(priority_scheme_id, project_id, x_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UIToPrioritizationApi.get_prioritization ...'
      end
      # verify the required parameter 'priority_scheme_id' is set
      if @api_client.config.client_side_validation && priority_scheme_id.nil?
        fail ArgumentError, "Missing the required parameter 'priority_scheme_id' when calling UIToPrioritizationApi.get_prioritization"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling UIToPrioritizationApi.get_prioritization"
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling UIToPrioritizationApi.get_prioritization"
      end
      # resource path
      local_var_path = File.join(
        Rails.configuration.x.scaife.get_priority_scheme,
        CGI.escape(priority_scheme_id.to_s),
        Rails.configuration.x.scaife.projects,
        CGI.escape(project_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrioritySchemeData'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UIToPrioritizationApi.get_prioritization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UIToPrioritizationApi#get_prioritization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all prioritization schemes
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :project_id ID of the project associated with the priority schemes in the list
    # @return [PrioritizationList]
    def list_prioritizations(x_access_token, opts = {})
      data, _status_code, _headers = list_prioritizations_with_http_info(x_access_token, opts)
      data
    end

    # List all prioritization schemes
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :project_id ID of the project associated with the priority schemes in the list
    # @return [Array<(PrioritizationList, Integer, Hash)>] PrioritizationList data, response status code and response headers
    def list_prioritizations_with_http_info(x_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UIToPrioritizationApi.list_prioritizations ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling UIToPrioritizationApi.list_prioritizations"
      end
      # resource path
      local_var_path = Rails.configuration.x.scaife.get_priority_scheme

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token
      header_params[:'project_id'] = opts[:'project_id'] if !opts[:'project_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrioritizationList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UIToPrioritizationApi.list_prioritizations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UIToPrioritizationApi#list_prioritizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing prioritization scheme
    # @param priority_scheme_id [String] The id of the prioritization scheme
    # @param x_access_token [String] Token that contains information about the user
    # @param update_priority_data [UpdatePriorityData] Prioritization Scheme to update
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_prioritization(priority_scheme_id, x_access_token, update_priority_data, opts = {})
      update_prioritization_with_http_info(priority_scheme_id, x_access_token, update_priority_data, opts)
      nil
    end

    # Update an existing prioritization scheme
    # @param priority_scheme_id [String] The id of the prioritization scheme
    # @param x_access_token [String] Token that contains information about the user
    # @param update_priority_data [UpdatePriorityData] Prioritization Scheme to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_prioritization_with_http_info(priority_scheme_id, x_access_token, update_priority_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UIToPrioritizationApi.update_prioritization ...'
      end
      # verify the required parameter 'priority_scheme_id' is set
      if @api_client.config.client_side_validation && priority_scheme_id.nil?
        fail ArgumentError, "Missing the required parameter 'priority_scheme_id' when calling UIToPrioritizationApi.update_prioritization"
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling UIToPrioritizationApi.update_prioritization"
      end
      # verify the required parameter 'update_priority_data' is set
      if @api_client.config.client_side_validation && update_priority_data.nil?
        fail ArgumentError, "Missing the required parameter 'update_priority_data' when calling UIToPrioritizationApi.update_prioritization"
      end
      # resource path
      local_var_path = File.join(
        Rails.configuration.x.scaife.update_priority_scheme,
        CGI.escape(priority_scheme_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_priority_data)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UIToPrioritizationApi.update_prioritization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UIToPrioritizationApi#update_prioritization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end

end
end
end
