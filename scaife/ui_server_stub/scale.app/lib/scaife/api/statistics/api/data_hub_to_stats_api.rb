# Client code for the SCAIFE Statistics Module
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.0.1
#
# <legal>
# SCALe version r.6.5.5.1.A
# 
# Copyright 2021 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

require 'cgi'

module Scaife
module Api
module Statistics

  class DataHubToStatsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Forward new Alerts that have been uploaded to the DataHub and have a current open adaptive heuristic request for its respective package. Returns status message for the DataHub to track if the request was completed.
    # @param x_access_token [String] Token that contains information about the user
    # @param project_id [String] The id of the project associated with these alerts
    # @param package_id [String] The id of the package associated with these alerts
    # @param multiple_alerts [MultipleAlerts] Updated alert data
    # @param [Hash] opts the optional parameters
    # @return [AlertUpdatesResponse]
    def send_alert_updates_for_classifier(x_access_token, project_id, package_id, multiple_alerts, opts = {})
      data, _status_code, _headers = send_alert_updates_for_classifier_with_http_info(x_access_token, project_id, package_id, multiple_alerts, opts)
      data
    end

    # Forward new Alerts that have been uploaded to the DataHub and have a current open adaptive heuristic request for its respective package. Returns status message for the DataHub to track if the request was completed.
    # @param x_access_token [String] Token that contains information about the user
    # @param project_id [String] The id of the project associated with these alerts
    # @param package_id [String] The id of the package associated with these alerts
    # @param multiple_alerts [MultipleAlerts] Updated alert data
    # @param [Hash] opts the optional parameters
    # @return [Array<(AlertUpdatesResponse, Integer, Hash)>] AlertUpdatesResponse data, response status code and response headers
    def send_alert_updates_for_classifier_with_http_info(x_access_token, project_id, package_id, multiple_alerts, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubToStatsApi.send_alert_updates_for_classifier ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling DataHubToStatsApi.send_alert_updates_for_classifier"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling DataHubToStatsApi.send_alert_updates_for_classifier"
      end
      # verify the required parameter 'package_id' is set
      if @api_client.config.client_side_validation && package_id.nil?
        fail ArgumentError, "Missing the required parameter 'package_id' when calling DataHubToStatsApi.send_alert_updates_for_classifier"
      end
      # verify the required parameter 'multiple_alerts' is set
      if @api_client.config.client_side_validation && multiple_alerts.nil?
        fail ArgumentError, "Missing the required parameter 'multiple_alerts' when calling DataHubToStatsApi.send_alert_updates_for_classifier"
      end
      # resource path
      local_var_path = '/projects/{project_id}/packages/{package_id}/alerts'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s)).sub('{' + 'package_id' + '}', CGI.escape(package_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(multiple_alerts)

      # return_type
      return_type = opts[:debug_return_type] || 'AlertUpdatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubToStatsApi.send_alert_updates_for_classifier",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubToStatsApi#send_alert_updates_for_classifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send FFSA or code metrics tool info to the Stats Module. When a new tool is uploaded, the DataHub can send new tool info for packages with open adaptive heuristic requests automatically to keep the Stats Module in sync.
    # @param x_access_token [String] Token that contains information about the user
    # @param tool_id [String] The id of the tool uploaded to the DataHub
    # @param packages_with_tool_data [PackagesWithToolData] Tool info, including name, version, plus FFSA checker info OR code metrics field info and package ids associated with this new tool.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def send_new_tool(x_access_token, tool_id, packages_with_tool_data, opts = {})
      send_new_tool_with_http_info(x_access_token, tool_id, packages_with_tool_data, opts)
      nil
    end

    # Send FFSA or code metrics tool info to the Stats Module. When a new tool is uploaded, the DataHub can send new tool info for packages with open adaptive heuristic requests automatically to keep the Stats Module in sync.
    # @param x_access_token [String] Token that contains information about the user
    # @param tool_id [String] The id of the tool uploaded to the DataHub
    # @param packages_with_tool_data [PackagesWithToolData] Tool info, including name, version, plus FFSA checker info OR code metrics field info and package ids associated with this new tool.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def send_new_tool_with_http_info(x_access_token, tool_id, packages_with_tool_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataHubToStatsApi.send_new_tool ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling DataHubToStatsApi.send_new_tool"
      end
      # verify the required parameter 'tool_id' is set
      if @api_client.config.client_side_validation && tool_id.nil?
        fail ArgumentError, "Missing the required parameter 'tool_id' when calling DataHubToStatsApi.send_new_tool"
      end
      # verify the required parameter 'packages_with_tool_data' is set
      if @api_client.config.client_side_validation && packages_with_tool_data.nil?
        fail ArgumentError, "Missing the required parameter 'packages_with_tool_data' when calling DataHubToStatsApi.send_new_tool"
      end
      # resource path
      local_var_path = '/packages/tools/{tool_id}'.sub('{' + 'tool_id' + '}', CGI.escape(tool_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(packages_with_tool_data)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DataHubToStatsApi.send_new_tool",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataHubToStatsApi#send_new_tool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end

end
end
end
