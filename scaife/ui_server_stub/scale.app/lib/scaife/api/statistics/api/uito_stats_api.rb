# Client code for the SCAIFE Statistics Module
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 5.0.1
#
# <legal>
# SCALe version r.6.5.5.1.A
# 
# Copyright 2021 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

require 'cgi'

module Scaife
module Api
module Statistics

  class UIToStatsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Stop adaptive heuristic forward request. Send a request to close (set to false) the adaptive heuristic for the packages listed in the classifier instance.
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_instance_id [String] The id of the classifier instance to run on the target domain
    # @param [Hash] opts the optional parameters
    # @return [CloseAdaptiveHeuristicsResponse]
    def close_adaptive_heuristic_data_forwarding(x_access_token, classifier_instance_id, opts = {})
      data, _status_code, _headers = close_adaptive_heuristic_data_forwarding_with_http_info(x_access_token, classifier_instance_id, opts)
      data
    end

    # Stop adaptive heuristic forward request. Send a request to close (set to false) the adaptive heuristic for the packages listed in the classifier instance.
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_instance_id [String] The id of the classifier instance to run on the target domain
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloseAdaptiveHeuristicsResponse, Integer, Hash)>] CloseAdaptiveHeuristicsResponse data, response status code and response headers
    def close_adaptive_heuristic_data_forwarding_with_http_info(x_access_token, classifier_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UIToStatsApi.close_adaptive_heuristic_data_forwarding ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling UIToStatsApi.close_adaptive_heuristic_data_forwarding"
      end
      # verify the required parameter 'classifier_instance_id' is set
      if @api_client.config.client_side_validation && classifier_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'classifier_instance_id' when calling UIToStatsApi.close_adaptive_heuristic_data_forwarding"
      end
      # resource path
      local_var_path = '/classifiers/{classifier_instance_id}/adaptive_heuristics/close'.sub('{' + 'classifier_instance_id' + '}', CGI.escape(classifier_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloseAdaptiveHeuristicsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UIToStatsApi.close_adaptive_heuristic_data_forwarding",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UIToStatsApi#close_adaptive_heuristic_data_forwarding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new classifier instance. Send Classifier information including Automated Hyper-Parameter Optimization (AHPO) and Adaptive Heuristics to the Stats Module along with package_ids for packages to use in creating/training a classifier. Returns an id that is used to then run the classifier and any  additional information for the classifier.
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_instance [ClassifierInstance] Classifier information to create
    # @param [Hash] opts the optional parameters
    # @return [CreateClassifierResponse]
    def create_classifier_instance(x_access_token, classifier_instance, opts = {})
      data, _status_code, _headers = create_classifier_instance_with_http_info(x_access_token, classifier_instance, opts)
      data
    end

    # Create a new classifier instance. Send Classifier information including Automated Hyper-Parameter Optimization (AHPO) and Adaptive Heuristics to the Stats Module along with package_ids for packages to use in creating/training a classifier. Returns an id that is used to then run the classifier and any  additional information for the classifier.
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_instance [ClassifierInstance] Classifier information to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateClassifierResponse, Integer, Hash)>] CreateClassifierResponse data, response status code and response headers
    def create_classifier_instance_with_http_info(x_access_token, classifier_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UIToStatsApi.create_classifier_instance ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling UIToStatsApi.create_classifier_instance"
      end
      # verify the required parameter 'classifier_instance' is set
      if @api_client.config.client_side_validation && classifier_instance.nil?
        fail ArgumentError, "Missing the required parameter 'classifier_instance' when calling UIToStatsApi.create_classifier_instance"
      end
      # resource path
      local_var_path = '/classifiers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(classifier_instance)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateClassifierResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UIToStatsApi.create_classifier_instance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UIToStatsApi#create_classifier_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific classifier from the Stats module by classifier_instance_id.
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_instance_id [String] The id of the classifier to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_classifier_instance(x_access_token, classifier_instance_id, opts = {})
      delete_classifier_instance_with_http_info(x_access_token, classifier_instance_id, opts)
      nil
    end

    # Delete a specific classifier from the Stats module by classifier_instance_id.
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_instance_id [String] The id of the classifier to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_classifier_instance_with_http_info(x_access_token, classifier_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UIToStatsApi.delete_classifier_instance ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling UIToStatsApi.delete_classifier_instance"
      end
      # verify the required parameter 'classifier_instance_id' is set
      if @api_client.config.client_side_validation && classifier_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'classifier_instance_id' when calling UIToStatsApi.delete_classifier_instance"
      end
      # resource path
      local_var_path = '/classifiers/{classifier_instance_id}'.sub('{' + 'classifier_instance_id' + '}', CGI.escape(classifier_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UIToStatsApi.delete_classifier_instance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UIToStatsApi#delete_classifier_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit a specific classifier from the Stats module by classifier_instance_id.       
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_instance_id [String] The id of the classifier instance to edit
    # @param classifier_instance [ClassifierInstance] Classifier information to edit
    # @param [Hash] opts the optional parameters
    # @return [CreateClassifierResponse]
    def edit_classifier_instance(x_access_token, classifier_instance_id, classifier_instance, opts = {})
      data, _status_code, _headers = edit_classifier_instance_with_http_info(x_access_token, classifier_instance_id, classifier_instance, opts)
      data
    end

    # Edit a specific classifier from the Stats module by classifier_instance_id.       
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_instance_id [String] The id of the classifier instance to edit
    # @param classifier_instance [ClassifierInstance] Classifier information to edit
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateClassifierResponse, Integer, Hash)>] CreateClassifierResponse data, response status code and response headers
    def edit_classifier_instance_with_http_info(x_access_token, classifier_instance_id, classifier_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UIToStatsApi.edit_classifier_instance ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling UIToStatsApi.edit_classifier_instance"
      end
      # verify the required parameter 'classifier_instance_id' is set
      if @api_client.config.client_side_validation && classifier_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'classifier_instance_id' when calling UIToStatsApi.edit_classifier_instance"
      end
      # verify the required parameter 'classifier_instance' is set
      if @api_client.config.client_side_validation && classifier_instance.nil?
        fail ArgumentError, "Missing the required parameter 'classifier_instance' when calling UIToStatsApi.edit_classifier_instance"
      end
      # resource path
      local_var_path = '/classifiers/{classifier_instance_id}'.sub('{' + 'classifier_instance_id' + '}', CGI.escape(classifier_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(classifier_instance)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateClassifierResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UIToStatsApi.edit_classifier_instance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UIToStatsApi#edit_classifier_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get analysis for a specific Classifier including performance metrics.
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_instance_id [String] The id of the classifier to get analysis info
    # @param [Hash] opts the optional parameters
    # @return [AnalysisResults]
    def get_classifier_instance_analysis(x_access_token, classifier_instance_id, opts = {})
      data, _status_code, _headers = get_classifier_instance_analysis_with_http_info(x_access_token, classifier_instance_id, opts)
      data
    end

    # Get analysis for a specific Classifier including performance metrics.
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_instance_id [String] The id of the classifier to get analysis info
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalysisResults, Integer, Hash)>] AnalysisResults data, response status code and response headers
    def get_classifier_instance_analysis_with_http_info(x_access_token, classifier_instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UIToStatsApi.get_classifier_instance_analysis ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling UIToStatsApi.get_classifier_instance_analysis"
      end
      # verify the required parameter 'classifier_instance_id' is set
      if @api_client.config.client_side_validation && classifier_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'classifier_instance_id' when calling UIToStatsApi.get_classifier_instance_analysis"
      end
      # resource path
      local_var_path = '/classifiers/{classifier_instance_id}'.sub('{' + 'classifier_instance_id' + '}', CGI.escape(classifier_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/html'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AnalysisResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UIToStatsApi.get_classifier_instance_analysis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UIToStatsApi#get_classifier_instance_analysis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all classifiers and their associated data. Use the ids returned from this request to work with classifiers.
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<ListClassifiersResponse>]
    def list_classifiers(x_access_token, opts = {})
      data, _status_code, _headers = list_classifiers_with_http_info(x_access_token, opts)
      data
    end

    # List all classifiers and their associated data. Use the ids returned from this request to work with classifiers.
    # @param x_access_token [String] Token that contains information about the user
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ListClassifiersResponse>, Integer, Hash)>] Array<ListClassifiersResponse> data, response status code and response headers
    def list_classifiers_with_http_info(x_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UIToStatsApi.list_classifiers ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling UIToStatsApi.list_classifiers"
      end
      # resource path
      local_var_path = '/classifiers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListClassifiersResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UIToStatsApi.list_classifiers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UIToStatsApi#list_classifiers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns new probability values if there are updates from the selected classifier_instance.
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_instance_id [String] The id of the classifier instance to run on the target domain
    # @param classifier_instance_data [ClassifierInstanceData] Information to send close adaptive heuristic request
    # @param [Hash] opts the optional parameters
    # @return [ClassifierResults]
    def retrain(x_access_token, classifier_instance_id, classifier_instance_data, opts = {})
      data, _status_code, _headers = retrain_with_http_info(x_access_token, classifier_instance_id, classifier_instance_data, opts)
      data
    end

    # Returns new probability values if there are updates from the selected classifier_instance.
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_instance_id [String] The id of the classifier instance to run on the target domain
    # @param classifier_instance_data [ClassifierInstanceData] Information to send close adaptive heuristic request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClassifierResults, Integer, Hash)>] ClassifierResults data, response status code and response headers
    def retrain_with_http_info(x_access_token, classifier_instance_id, classifier_instance_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UIToStatsApi.retrain ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling UIToStatsApi.retrain"
      end
      # verify the required parameter 'classifier_instance_id' is set
      if @api_client.config.client_side_validation && classifier_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'classifier_instance_id' when calling UIToStatsApi.retrain"
      end
      # verify the required parameter 'classifier_instance_data' is set
      if @api_client.config.client_side_validation && classifier_instance_data.nil?
        fail ArgumentError, "Missing the required parameter 'classifier_instance_data' when calling UIToStatsApi.retrain"
      end
      # resource path
      local_var_path = '/classifiers/{classifier_instance_id}/retrain'.sub('{' + 'classifier_instance_id' + '}', CGI.escape(classifier_instance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(classifier_instance_data)

      # return_type
      return_type = opts[:debug_return_type] || 'ClassifierResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UIToStatsApi.retrain",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UIToStatsApi#retrain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run a specific classifier instance on the project identified by id in the path. The response contains estimated class probablities and analysis of classifier performance.
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_instance_id [String] The id of the classifier instance to run on the target domain
    # @param project_id [String] The id of the project containing the packages
    # @param [Hash] opts the optional parameters
    # @return [ClassifierResults]
    def run_classifier_instance(x_access_token, classifier_instance_id, project_id, opts = {})
      data, _status_code, _headers = run_classifier_instance_with_http_info(x_access_token, classifier_instance_id, project_id, opts)
      data
    end

    # Run a specific classifier instance on the project identified by id in the path. The response contains estimated class probablities and analysis of classifier performance.
    # @param x_access_token [String] Token that contains information about the user
    # @param classifier_instance_id [String] The id of the classifier instance to run on the target domain
    # @param project_id [String] The id of the project containing the packages
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClassifierResults, Integer, Hash)>] ClassifierResults data, response status code and response headers
    def run_classifier_instance_with_http_info(x_access_token, classifier_instance_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UIToStatsApi.run_classifier_instance ...'
      end
      # verify the required parameter 'x_access_token' is set
      if @api_client.config.client_side_validation && x_access_token.nil?
        fail ArgumentError, "Missing the required parameter 'x_access_token' when calling UIToStatsApi.run_classifier_instance"
      end
      # verify the required parameter 'classifier_instance_id' is set
      if @api_client.config.client_side_validation && classifier_instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'classifier_instance_id' when calling UIToStatsApi.run_classifier_instance"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling UIToStatsApi.run_classifier_instance"
      end
      # resource path
      local_var_path = '/classifiers/{classifier_instance_id}/projects/{project_id}'.sub('{' + 'classifier_instance_id' + '}', CGI.escape(classifier_instance_id.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'x_access_token'] = x_access_token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClassifierResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UIToStatsApi.run_classifier_instance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UIToStatsApi#run_classifier_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end

end
end
end
