# <legal>
# SCALe version r.6.2.2.2.A
# 
# Copyright 2020 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

module Scaife
module Api
module Statistics
=begin

API calls to SCAIFE Statistics module

=end

=begin

	List SCAIFE Classifiers

	params:
		access_t (string) - x_access_token recieved from SCAIFE_get_access_token()
		req_t (string) - x_request_token generated by UI module

	returns:
		r (RestClient::Response) - the response object
		Throws exception if unable to connect to SCAIFE
=end
	def SCAIFE_list_classifiers(access_t, req_t)
		headers = {
			x_access_token: access_t,
			x_request_token: req_t,
			content_type: :json,
			accept: :json
		}

		begin
			r = RestClient::Request.execute(
				method: :get,
				url: File.join(
					Rails.configuration.x.scaife.statistics_module_url,
					Rails.configuration.x.scaife.list_classifiers
				),
				headers: headers
			)
		rescue RestClient::ExceptionWithResponse => e
			r = e.response
		end

		return r
	end


=begin

	Create SCAIFE Classifier

	params:
		access_t (string) - x_access_token recieved from SCAIFE_get_access_token()
		req_t (string) - x_request_token generated by UI module

	returns:
		r (RestClient::Response) - the response object
		Throws exception if unable to connect to SCAIFE
=end
	def SCAIFE_create_classifier(access_t, req_t, c_id, c_type, ci_name, p_ids, ahpo_name, ahpo_params, ah_name, ah_params)
		headers = {
			x_access_token: access_t,
			x_request_token: req_t,
			content_type: :json,
			accept: :json
		}

    payload = {
      classifier_id: c_id,
      classifier_type: c_type,
      classifier_instance_name: ci_name,
      project_ids: p_ids,
    }

    #TODO: Update ahpo_id and adaptive_heuristic_id in RC-1064
    if ahpo_name.present?
      payload["ahpo_id"] = "Sample AHPD ID"
      payload["ahpo_name"] = ahpo_name
      payload["ahpo_parameters"] = ahpo_params.present? ? ahpo_params : {}
    end
    if ah_name.present?
      payload["aadaptive_heuristic_id"] = "Sample AH ID"
      payload["adaptive_heuristic_name"] = ah_name
      payload["adaptive_heuristic_parameters"] = ah_params.present? ? ah_params : {}
    end

		begin
			r = RestClient::Request.execute(
				method: :post,
				url: File.join(
					Rails.configuration.x.scaife.statistics_module_url,
					Rails.configuration.x.scaife.create_classifier
				),
				payload: payload.to_json,
				headers: headers,
        read_timeout: nil
			)
		rescue RestClient::ExceptionWithResponse => e
			r = e.response
		end

		return r
	end

=begin

	Run SCAIFE Classifier

	params:
		access_t (string) - x_access_token recieved from SCAIFE_get_access_token()
		req_t (string) - x_request_token generated by UI module

	returns:
		r (RestClient::Response) - the response object
		Throws exception if unable to connect to SCAIFE
=end
	def SCAIFE_run_classifier(access_t, req_t, ci_id, p_id)
		headers = {
			x_access_token: access_t,
			x_request_token: req_t,
			content_type: :json,
			accept: :json
		}

		begin
			r = RestClient::Request.execute(
				method: :put,
				url: File.join(
					Rails.configuration.x.scaife.statistics_module_url,
					Rails.configuration.x.scaife.run_classifier1,
          ci_id,
          Rails.configuration.x.scaife.run_classifier2,
          p_id
				),
				headers: headers,
				read_timeout: nil
			)
		rescue RestClient::ExceptionWithResponse => e
			r = e.response
		end

		return r
	end

=begin

	Edit SCAIFE Classifier

	params:
		access_t (string) - x_access_token recieved from SCAIFE_get_access_token()
		req_t (string) - x_request_token generated by UI module

	returns:
		r (RestClient::Response) - the response object
		Throws exception if unable to connect to SCAIFE
=end
	def SCAIFE_edit_classifier(access_t, req_t, ci_id, c_id, c_type, ci_name, p_ids, ahpo_name, ahpo_params, ah_name, ah_params)
		headers = {
			x_access_token: access_t,
			x_request_token: req_t,
			content_type: :json,
			accept: :json
		}

                classifier_data = {
                    classifier_id: c_id,
                    classifier_type: c_type,
                    classifier_instance_name: ci_name,
                    project_ids: p_ids,
                    ahpo_id: "Sample AHPO ID",
                    ahpo_name: ahpo_name,
                    ahpo_parameters: ahpo_params,
                    adaptive_heuristic_id: "Sample AH ID",
                    adaptive_heuristic_name: ah_name,
                    adaptive_heuristic_parameters: ah_params
                }

		begin
			r = RestClient::Request.execute(
				method: :put,
				url: File.join(
					Rails.configuration.x.scaife.statistics_module_url,
					Rails.configuration.x.scaife.edit_classifier,
                                        ci_id
				),
				payload: classifier_data.to_json,
				headers: headers
			)
		rescue RestClient::ExceptionWithResponse => e
			r = e.response
		end

		return r
	end


=begin

	Delete SCAIFE Classifier

	params:
		access_t (string) - x_access_token recieved from SCAIFE_get_access_token()
		req_t (string) - x_request_token generated by UI module

	returns:
		r (RestClient::Response) - the response object
		Throws exception if unable to connect to SCAIFE
=end
	def SCAIFE_delete_classifier(access_t, req_t, ci_id)
		headers = {
			x_access_token: access_t,
			x_request_token: req_t,
			content_type: :json,
			accept: :json
		}

		begin
			r = RestClient::Request.execute(
				method: :delete,
				url: File.join(
					Rails.configuration.x.scaife.statistics_module_url,
					Rails.configuration.x.scaife.delete_classifier,
                                        ci_id
				),
				headers: headers
			)
		rescue RestClient::ExceptionWithResponse => e
			r = e.response
		end

		return r
	end
end
end
end
