# coding: utf-8
# <legal>
# SCALe version r.6.7.0.0.A
# 
# Copyright 2021 Carnegie Mellon University.
# 
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR
# IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF
# FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS
# OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT
# MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
# TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# 
# Released under a MIT (SEI)-style license, please see COPYRIGHT file or
# contact permission@sei.cmu.edu for full terms.
# 
# [DISTRIBUTION STATEMENT A] This material has been approved for public
# release and unlimited distribution.  Please see Copyright notice for
# non-US Government use and distribution.
# 
# DM19-1274
# </legal>

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserInformation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, first_name: str = None, last_name: str = None, organization_name: str = None,
                 username: str = None, password: str = None):  # noqa: E501
        """UserInformation - a model defined in Swagger

        :param first_name: The first_name of this UserInformation.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this UserInformation.  # noqa: E501
        :type last_name: str
        :param organization_name: The organization_name of this UserInformation.  # noqa: E501
        :type organization_name: str
        :param username: The username of this UserInformation.  # noqa: E501
        :type username: str
        :param password: The password of this UserInformation.  # noqa: E501
        :type password: str
        """
        self.swagger_types = {
            'first_name': str,
            'last_name': str,
            'organization_name': str,
            'username': str,
            'password': str
        }

        self.attribute_map = {
            'first_name': 'first_name',
            'last_name': 'last_name',
            'organization_name': 'organization_name',
            'username': 'username',
            'password': 'password'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._organization_name = organization_name
        self._username = username
        self._password = password

    @classmethod
    def from_dict(cls, dikt) -> 'UserInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user_information of this UserInformation.  # noqa: E501
        :rtype: UserInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self) -> str:
        """Gets the first_name of this UserInformation.


        :return: The first_name of this UserInformation.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this UserInformation.


        :param first_name: The first_name of this UserInformation.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this UserInformation.


        :return: The last_name of this UserInformation.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this UserInformation.


        :param last_name: The last_name of this UserInformation.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def organization_name(self) -> str:
        """Gets the organization_name of this UserInformation.


        :return: The organization_name of this UserInformation.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name: str):
        """Sets the organization_name of this UserInformation.


        :param organization_name: The organization_name of this UserInformation.
        :type organization_name: str
        """
        if organization_name is None:
            raise ValueError("Invalid value for `organization_name`, must not be `None`")  # noqa: E501

        self._organization_name = organization_name

    @property
    def username(self) -> str:
        """Gets the username of this UserInformation.


        :return: The username of this UserInformation.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this UserInformation.


        :param username: The username of this UserInformation.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this UserInformation.


        :return: The password of this UserInformation.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this UserInformation.


        :param password: The password of this UserInformation.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password
