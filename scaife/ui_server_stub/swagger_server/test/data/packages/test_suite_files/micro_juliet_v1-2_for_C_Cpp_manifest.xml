<?xml version="1.0" encoding="utf-8"?>
<container>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104369" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 01 Baseline]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2035" path="000/104/369/CWE467_Use_of_sizeof_on_Pointer_Type__char_01.c" language="C" checksum="84cd567c1d10b207317b30f9c0c71ea7933b4eda">
      <mixed line="25" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104370" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2762" path="000/104/370/CWE467_Use_of_sizeof_on_Pointer_Type__char_02.c" language="C" checksum="38810247445e052a7e60cb472f2d4a76446bda5d">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104371" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2783" path="000/104/371/CWE467_Use_of_sizeof_on_Pointer_Type__char_03.c" language="C" checksum="ec407833166233d11d3619733ce2d4953490b47e">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104372" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3148" path="000/104/372/CWE467_Use_of_sizeof_on_Pointer_Type__char_04.c" language="C" checksum="22a08fe74e9928cefca19e3f20a85904cb9c12ec">
      <mixed line="33" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104373" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3119" path="000/104/373/CWE467_Use_of_sizeof_on_Pointer_Type__char_05.c" language="C" checksum="74004fb56bcb6e75773aa0e3ef557e52d2960beb">
      <mixed line="33" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104374" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3089" path="000/104/374/CWE467_Use_of_sizeof_on_Pointer_Type__char_06.c" language="C" checksum="3d734ab1f1da4148d4d973d6cec854f1ec0a5f7d">
      <mixed line="32" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104375" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3069" path="000/104/375/CWE467_Use_of_sizeof_on_Pointer_Type__char_07.c" language="C" checksum="4bd1cdb755bc2d54636ca1b428e7ad2ea1a1fdfb">
      <mixed line="32" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104376" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3169" path="000/104/376/CWE467_Use_of_sizeof_on_Pointer_Type__char_08.c" language="C" checksum="16497f622f943c6ccfd7de7f12d9f9abc71d1758">
      <mixed line="40" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104377" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2877" path="000/104/377/CWE467_Use_of_sizeof_on_Pointer_Type__char_09.c" language="C" checksum="91d4e4ef16cf655f4fe1d087387a3de4fe129c7a">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104378" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2828" path="000/104/378/CWE467_Use_of_sizeof_on_Pointer_Type__char_10.c" language="C" checksum="0112331f5669d4083d2792106dce1824b3e67f1c">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104379" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2891" path="000/104/379/CWE467_Use_of_sizeof_on_Pointer_Type__char_11.c" language="C" checksum="c5246e195230c6080ee1026bdb4b2c0642d41b08">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104380" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2916" path="000/104/380/CWE467_Use_of_sizeof_on_Pointer_Type__char_12.c" language="C" checksum="ee05d438cac9b8d55782b79becc4337fe590628c">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104381" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2895" path="000/104/381/CWE467_Use_of_sizeof_on_Pointer_Type__char_13.c" language="C" checksum="f2f2ca1e741a4c67032dde09bfe493cfda71328c">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104382" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2846" path="000/104/382/CWE467_Use_of_sizeof_on_Pointer_Type__char_14.c" language="C" checksum="73530b468ad1d4ee924a093a0d1e5ccbde10358f">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104383" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3051" path="000/104/383/CWE467_Use_of_sizeof_on_Pointer_Type__char_15.c" language="C" checksum="f55b2f186d6e582e2585b28fbb381feffb44ced5">
      <mixed line="28" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104384" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2256" path="000/104/384/CWE467_Use_of_sizeof_on_Pointer_Type__char_16.c" language="C" checksum="00645aeae0312d3cefb35fb3a73e04fd89e29f29">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104385" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2281" path="000/104/385/CWE467_Use_of_sizeof_on_Pointer_Type__char_17.c" language="C" checksum="0dff75b6092f5fe065a509266475e9927e3cadd5">
      <mixed line="28" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104386" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: char<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2159" path="000/104/386/CWE467_Use_of_sizeof_on_Pointer_Type__char_18.c" language="C" checksum="c52dea35bc2910e1ff3390bb375a29151a99d193">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104387" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 01 Baseline]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2001" path="000/104/387/CWE467_Use_of_sizeof_on_Pointer_Type__int_01.c" language="C" checksum="2cae814307cd6af108509d94863beeb63c6f7b88">
      <mixed line="25" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104388" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2714" path="000/104/388/CWE467_Use_of_sizeof_on_Pointer_Type__int_02.c" language="C" checksum="6366ce975f72def4886cf426781e4f5eb39c0aaa">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104389" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2735" path="000/104/389/CWE467_Use_of_sizeof_on_Pointer_Type__int_03.c" language="C" checksum="e4acd56794c42505ec16e87a6066d02a42de6f84">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104390" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3100" path="000/104/390/CWE467_Use_of_sizeof_on_Pointer_Type__int_04.c" language="C" checksum="ff3a4dae03f6516deb58b6b9d3a24d48be379feb">
      <mixed line="33" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104391" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3071" path="000/104/391/CWE467_Use_of_sizeof_on_Pointer_Type__int_05.c" language="C" checksum="ae30c19ffb15694bc96deecd034db47a9b3f8236">
      <mixed line="33" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104392" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3041" path="000/104/392/CWE467_Use_of_sizeof_on_Pointer_Type__int_06.c" language="C" checksum="efa072b9b84cc592019f3faf6fa5836b3ac995dd">
      <mixed line="32" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104393" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3021" path="000/104/393/CWE467_Use_of_sizeof_on_Pointer_Type__int_07.c" language="C" checksum="019b3f0abdee25bc0e2c5d09fcfd26d1f8fa7e37">
      <mixed line="32" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104394" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3121" path="000/104/394/CWE467_Use_of_sizeof_on_Pointer_Type__int_08.c" language="C" checksum="ccb0df6b6a0b8f572b12cfbd3aa76fe16021c912">
      <mixed line="40" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104395" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2829" path="000/104/395/CWE467_Use_of_sizeof_on_Pointer_Type__int_09.c" language="C" checksum="5ec3e0f0bc4ec548f0d3cdd3d47952eb1c20c9fc">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104396" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2780" path="000/104/396/CWE467_Use_of_sizeof_on_Pointer_Type__int_10.c" language="C" checksum="90d4c0c74d5dbf1dfeb7cba810cdd37ecbbe4c66">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104397" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2843" path="000/104/397/CWE467_Use_of_sizeof_on_Pointer_Type__int_11.c" language="C" checksum="f2142ef771436f36605460009d6bb5b92521f94a">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104398" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2854" path="000/104/398/CWE467_Use_of_sizeof_on_Pointer_Type__int_12.c" language="C" checksum="842a878f8f6b6b21f31a385c652db53444e09381">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104399" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2847" path="000/104/399/CWE467_Use_of_sizeof_on_Pointer_Type__int_13.c" language="C" checksum="f640e435e20e40349196c8c195b89142161efeec">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104400" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2798" path="000/104/400/CWE467_Use_of_sizeof_on_Pointer_Type__int_14.c" language="C" checksum="d92f427b04a934477a19a5d643151a114f841e94">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104401" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3003" path="000/104/401/CWE467_Use_of_sizeof_on_Pointer_Type__int_15.c" language="C" checksum="9832ffac32b9f6d9192180fe703adf9b2ff171ea">
      <mixed line="28" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104402" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2222" path="000/104/402/CWE467_Use_of_sizeof_on_Pointer_Type__int_16.c" language="C" checksum="2850a6ab2d80442354a22730277549c0de17a543">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104403" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2247" path="000/104/403/CWE467_Use_of_sizeof_on_Pointer_Type__int_17.c" language="C" checksum="8d6353557b1a8cb3694bcbc73b828bb84880bb63">
      <mixed line="28" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104404" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: int<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2125" path="000/104/404/CWE467_Use_of_sizeof_on_Pointer_Type__int_18.c" language="C" checksum="ad497996f4e679d8641921fd01b582f903cd369e">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104405" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 01 Baseline]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2049" path="000/104/405/CWE467_Use_of_sizeof_on_Pointer_Type__short_01.c" language="C" checksum="e7e9135151699b745758cb4d7376769a3cc05380">
      <mixed line="25" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104406" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2780" path="000/104/406/CWE467_Use_of_sizeof_on_Pointer_Type__short_02.c" language="C" checksum="7123a9c44a13f0e8c745c916392a8959b923adf5">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104407" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2801" path="000/104/407/CWE467_Use_of_sizeof_on_Pointer_Type__short_03.c" language="C" checksum="0458a8af4f1f114765ec1a14f3a9c039e9b57d0b">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104408" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3166" path="000/104/408/CWE467_Use_of_sizeof_on_Pointer_Type__short_04.c" language="C" checksum="c5c18af061d99d742919672ec9b048dcd65daeca">
      <mixed line="33" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104409" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3137" path="000/104/409/CWE467_Use_of_sizeof_on_Pointer_Type__short_05.c" language="C" checksum="2e5a7af8512a7bdc3c1d47b97ad0fc5bd13ce68d">
      <mixed line="33" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104410" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3107" path="000/104/410/CWE467_Use_of_sizeof_on_Pointer_Type__short_06.c" language="C" checksum="192788a9f708dfbb09076d1fb43d463db9ee190e">
      <mixed line="32" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104411" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3087" path="000/104/411/CWE467_Use_of_sizeof_on_Pointer_Type__short_07.c" language="C" checksum="ff79cd87ded8c139ab9ececb6a7d6c19f0f5ddcc">
      <mixed line="32" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104412" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3187" path="000/104/412/CWE467_Use_of_sizeof_on_Pointer_Type__short_08.c" language="C" checksum="1fb3072765a8798d4f99f5c2102b55bcf7b3bbf8">
      <mixed line="40" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104413" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2895" path="000/104/413/CWE467_Use_of_sizeof_on_Pointer_Type__short_09.c" language="C" checksum="761a6107a1dc7818a9ede51ab9ab9f1c33b74434">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104414" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2846" path="000/104/414/CWE467_Use_of_sizeof_on_Pointer_Type__short_10.c" language="C" checksum="da25aea78255eab934ca21fad2423c598f12aa7d">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104415" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2909" path="000/104/415/CWE467_Use_of_sizeof_on_Pointer_Type__short_11.c" language="C" checksum="43c2ed651ec2a74698ac521bbba26eb69e0f7ea5">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104416" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2938" path="000/104/416/CWE467_Use_of_sizeof_on_Pointer_Type__short_12.c" language="C" checksum="2a1668d0d524252911f8ff66c43a02505888295e">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104417" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2913" path="000/104/417/CWE467_Use_of_sizeof_on_Pointer_Type__short_13.c" language="C" checksum="5e727151f8b30a6f203c22a687f406ff3d36894f">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104418" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2864" path="000/104/418/CWE467_Use_of_sizeof_on_Pointer_Type__short_14.c" language="C" checksum="bef355a12bea3a92824734086fa0ea6d8720ad3e">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104419" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3069" path="000/104/419/CWE467_Use_of_sizeof_on_Pointer_Type__short_15.c" language="C" checksum="583636c61bb8e6a79a9c3a4558a191057cc8ab53">
      <mixed line="28" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104420" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2270" path="000/104/420/CWE467_Use_of_sizeof_on_Pointer_Type__short_16.c" language="C" checksum="b8efe22d820dfb1a710a1addeb2429ee1df5530a">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104421" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2295" path="000/104/421/CWE467_Use_of_sizeof_on_Pointer_Type__short_17.c" language="C" checksum="abf8b4a61daa574579aee418c67b7e002912163e">
      <mixed line="28" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104422" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 467 Use of sizeof() on a Pointer Type<br/> Sinks: short<br/> GoodSink: Use sizeof() the data type<br/> BadSink : Use sizeof() the pointer and not the data type<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2173" path="000/104/422/CWE467_Use_of_sizeof_on_Pointer_Type__short_18.c" language="C" checksum="7d719de6cfd017766e76fa3e4ff247b77d807755">
      <mixed line="27" name="CWE-467: Use of sizeof() on a Pointer Type"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104952" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 01 Baseline]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2099" path="000/104/952/CWE482_Comparing_Instead_of_Assigning__basic_01.c" language="C" checksum="230236a723363d6ad4050bd5292d58cda4ffeb88">
      <mixed line="27" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104953" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2835" path="000/104/953/CWE482_Comparing_Instead_of_Assigning__basic_02.c" language="C" checksum="356196023afc8d91ff04262dbf8b6b5867e152b2">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104954" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2856" path="000/104/954/CWE482_Comparing_Instead_of_Assigning__basic_03.c" language="C" checksum="aa58d0099dbc989ebd917972791f26ad372468c9">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104955" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3221" path="000/104/955/CWE482_Comparing_Instead_of_Assigning__basic_04.c" language="C" checksum="d2750f308658831d80adaa0c2911505f6b0ba5c3">
      <mixed line="35" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104956" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3192" path="000/104/956/CWE482_Comparing_Instead_of_Assigning__basic_05.c" language="C" checksum="b46a9b2d1d683b236e777e677969e557b127e087">
      <mixed line="35" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104957" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3162" path="000/104/957/CWE482_Comparing_Instead_of_Assigning__basic_06.c" language="C" checksum="0a017afe994309eff1e08cfc4745988b9ce3ce98">
      <mixed line="34" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104958" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3142" path="000/104/958/CWE482_Comparing_Instead_of_Assigning__basic_07.c" language="C" checksum="a43c2bb7de9c88898ef77c5fae839b5ab4712f9c">
      <mixed line="34" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104959" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3242" path="000/104/959/CWE482_Comparing_Instead_of_Assigning__basic_08.c" language="C" checksum="3c4c2dce88c10f4632280f203a6e64e68acd1425">
      <mixed line="42" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104960" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2950" path="000/104/960/CWE482_Comparing_Instead_of_Assigning__basic_09.c" language="C" checksum="cd3b0d61c065dcf2354aefa902f64ed3d4a33e05">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104961" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2901" path="000/104/961/CWE482_Comparing_Instead_of_Assigning__basic_10.c" language="C" checksum="f22679e62485488de3210e8f6633149adc3c374f">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104962" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2964" path="000/104/962/CWE482_Comparing_Instead_of_Assigning__basic_11.c" language="C" checksum="544a71a9c6c03de461e8c2b09dbfc426071b21f9">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104963" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2998" path="000/104/963/CWE482_Comparing_Instead_of_Assigning__basic_12.c" language="C" checksum="2dbbd6c130729cb5df7aa51bb1dc5c4c5b7e7998">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104964" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2968" path="000/104/964/CWE482_Comparing_Instead_of_Assigning__basic_13.c" language="C" checksum="dd59383c440b74175990958ce1b2ac14008bbe27">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104965" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2919" path="000/104/965/CWE482_Comparing_Instead_of_Assigning__basic_14.c" language="C" checksum="0e2174722c9e72654fc37d79d0d2444437de4900">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104966" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3124" path="000/104/966/CWE482_Comparing_Instead_of_Assigning__basic_15.c" language="C" checksum="a9e7e95d6101361a4e6aead21f7850db0e28e124">
      <mixed line="30" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104967" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2320" path="000/104/967/CWE482_Comparing_Instead_of_Assigning__basic_16.c" language="C" checksum="710e97983f075830689e210b02da9f8e2fc9e1ce">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104968" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2345" path="000/104/968/CWE482_Comparing_Instead_of_Assigning__basic_17.c" language="C" checksum="1392f6060d91906efd80e44aaab3472df4373eaa">
      <mixed line="30" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="104969" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 482 Comparing Instead of Assigning<br/> Sinks:<br/> GoodSink: Assigning<br/> BadSink : Comparing instead of assigning<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2223" path="000/104/969/CWE482_Comparing_Instead_of_Assigning__basic_18.c" language="C" checksum="e2901f7859710e9e45999c164819294bd8566c2e">
      <mixed line="29" name="CWE-482: Comparing instead of Assigning"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="105489" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Unused code via return before code]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1314" path="000/105/489/CWE561_Dead_Code__return_before_code_01.c" language="C" checksum="61f517b8d5377ac0973d287c1e5bb7ef52f9a8fc">
      <mixed line="14" name="CWE-561: Dead Code"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="105490" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Unused function declaration]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1619" path="000/105/490/CWE561_Dead_Code__unused_function_01.c" language="C" checksum="ce6a3762725ca3df324c28db45f22290a22c8308">
      <mixed line="12" name="CWE-561: Dead Code"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="105491" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Return of local buffer address to local buffer]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1916" path="000/105/491/CWE562_Return_of_Stack_Variable_Address__return_buf_01.c" language="C" checksum="61de02ea2b6105c10007dd47436bebdba4bc5494">
      <mixed line="17" name="CWE-562: Return of Stack Variable Address"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="105492" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Return of local buffer address via stack-allocated object]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2257" path="000/105/492/CWE562_Return_of_Stack_Variable_Address__return_local_class_member_01.cpp" language="C++" checksum="5840e32d3531acb2427afdd76e8f9ddefd252285">
      <mixed line="38" name="CWE-562: Return of Stack Variable Address"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="105493" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Return of local buffer address via pointer to a local buffer]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2098" path="000/105/493/CWE562_Return_of_Stack_Variable_Address__return_pointer_buf_01.c" language="C" checksum="311d9ad7869bc4d3e1322cb161b7479a330bec32">
      <mixed line="20" name="CWE-562: Return of Stack Variable Address"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106006" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1440" path="000/106/006/CWE570_Expression_Always_False__global_01.c" language="C" checksum="296a44a2748ef2c0d1c37a0aaddee941a36afbf3">
      <mixed line="13" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106007" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1478" path="000/106/007/CWE570_Expression_Always_False__global_const_01.c" language="C" checksum="9e409eb6c764cc8468ee256f1dacc4d45ba7f5be">
      <mixed line="13" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106008" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1538" path="000/106/008/CWE570_Expression_Always_False__global_const_five_01.c" language="C" checksum="ac2e778cbe024154bb727a100e27e6ce09d459ad">
      <mixed line="13" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106009" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1500" path="000/106/009/CWE570_Expression_Always_False__global_five_01.c" language="C" checksum="8b6058351122069504dde1fc839ae576d3c8498c">
      <mixed line="13" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106010" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1486" path="000/106/010/CWE570_Expression_Always_False__global_return_01.c" language="C" checksum="11e5a9b3f2014d25b643bb9410453c94eb5485d5">
      <mixed line="13" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106011" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1638" path="000/106/011/CWE570_Expression_Always_False__n_equal_n_minus_one_01.c" language="C" checksum="7026e72764f1fbc2d0c2f4e5d40ae41c2b49579c">
      <mixed line="15" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106012" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1644" path="000/106/012/CWE570_Expression_Always_False__n_less_int_min_01.c" language="C" checksum="90c487384c3be3d51e4b8a286244c969324b7788">
      <mixed line="16" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106013" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1483" path="000/106/013/CWE570_Expression_Always_False__static_01.c" language="C" checksum="45513b2c775555626e3821200d73f93220d15f22">
      <mixed line="15" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106014" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1534" path="000/106/014/CWE570_Expression_Always_False__static_const_01.c" language="C" checksum="7e2ae4b7c34fa82774ffd5f310bf2a6150b6da92">
      <mixed line="15" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106015" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1565" path="000/106/015/CWE570_Expression_Always_False__static_const_five_01.c" language="C" checksum="35c8c10baf6fc00cde60a60993944c3af3055870">
      <mixed line="15" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106016" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1521" path="000/106/016/CWE570_Expression_Always_False__static_five_01.c" language="C" checksum="bacb84f766be0e0b34274774213a12c5e4800e27">
      <mixed line="15" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106017" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1543" path="000/106/017/CWE570_Expression_Always_False__static_return_01.c" language="C" checksum="7a9e0ee852f3a2752885381f0ade3c2a6017b970">
      <mixed line="18" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106018" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1929" path="000/106/018/CWE570_Expression_Always_False__string_equals_01.c" language="C" checksum="aaeb8b607e93b50935bc7557616bb0061d59534c">
      <mixed line="15" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106019" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (false_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1464" path="000/106/019/CWE570_Expression_Always_False__two_equals_three_01.c" language="C" checksum="532429433d211e4160bdfb3d1dd166a34ae04207">
      <mixed line="13" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106020" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (unsigned int < 0)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1613" path="000/106/020/CWE570_Expression_Always_False__unsigned_int_01.c" language="C" checksum="f17cc1934a066395f51d3d2b1ca948d51e175577">
      <mixed line="16" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106021" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always false via if (0)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1391" path="000/106/021/CWE570_Expression_Always_False__zero_01.c" language="C" checksum="c980cf43a1412f47a9ec1e1d977eee64c43cc41d">
      <mixed line="13" name="CWE-570: Expression is Always False"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106022" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1436" path="000/106/022/CWE571_Expression_Always_True__global_01.c" language="C" checksum="400b2cca55f3dcc365f503056131608088df493e">
      <mixed line="13" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106023" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1474" path="000/106/023/CWE571_Expression_Always_True__global_const_01.c" language="C" checksum="b23960b52981800fd2d1b79a0124a482e14f6440">
      <mixed line="13" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106024" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1536" path="000/106/024/CWE571_Expression_Always_True__global_const_five_01.c" language="C" checksum="18391193a7ff793f366e301b21bb6918d6153de3">
      <mixed line="13" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106025" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1498" path="000/106/025/CWE571_Expression_Always_True__global_five_01.c" language="C" checksum="fcae69db989d94bad567840d1b15d7ff76cad632">
      <mixed line="13" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106026" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1482" path="000/106/026/CWE571_Expression_Always_True__global_return_01.c" language="C" checksum="fb52ba1efea99e7aab462c7701479933556ad545">
      <mixed line="13" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106027" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1657" path="000/106/027/CWE571_Expression_Always_True__n_equals_m_minus_one_01.c" language="C" checksum="20e296627c9a4e1912433038b6de65941b857cd1">
      <mixed line="16" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106028" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1640" path="000/106/028/CWE571_Expression_Always_True__n_less_int_max_01.c" language="C" checksum="0ad32c72d3335e738c5ecb5e858f7f71200377fb">
      <mixed line="16" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106029" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (1)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1385" path="000/106/029/CWE571_Expression_Always_True__one_01.c" language="C" checksum="82d5955e0599f62b878f742b447a8b445336b1d9">
      <mixed line="13" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106030" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1477" path="000/106/030/CWE571_Expression_Always_True__static_01.c" language="C" checksum="eeb9e7efd7fa4acc3ff23599aaf3e59107ff4fd6">
      <mixed line="15" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106031" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1528" path="000/106/031/CWE571_Expression_Always_True__static_const_01.c" language="C" checksum="5c0ec4a0a66327d8e21ae9ccaec4b6f0ff847454">
      <mixed line="15" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106032" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1563" path="000/106/032/CWE571_Expression_Always_True__static_const_five_01.c" language="C" checksum="b762a12e3202ea7d5876c278ad8004aa9f52a780">
      <mixed line="15" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106033" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1519" path="000/106/033/CWE571_Expression_Always_True__static_five_01.c" language="C" checksum="27ecc09aacffa49f4c75eb749a1815a5ea6a60ce">
      <mixed line="15" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106034" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1538" path="000/106/034/CWE571_Expression_Always_True__static_return_01.c" language="C" checksum="67fe13e90904248935b8f849b97bf942cf97d49a">
      <mixed line="18" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106035" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1923" path="000/106/035/CWE571_Expression_Always_True__string_equals_01.c" language="C" checksum="76bc165c0612d54fc69315547741444454fbb1fe">
      <mixed line="15" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106036" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (true_expression)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1454" path="000/106/036/CWE571_Expression_Always_True__two_equals_two_01.c" language="C" checksum="88aa28a65c4009d1e2cc0c3eea2bd7d49dd8b494">
      <mixed line="13" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106037" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[Expression is always true via if (unsigned int >= 0)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1609" path="000/106/037/CWE571_Expression_Always_True__unsigned_int_01.c" language="C" checksum="7e40f674018889a88c2ee1a7323367c7c5dd44e8">
      <mixed line="16" name="CWE-571: Expression is Always True"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106038" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 01 Baseline]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1927" path="000/106/038/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_01.c" language="C" checksum="70f648af139df3522b93c73e81e3dbce39c3628a">
      <mixed line="24" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106039" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2562" path="000/106/039/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_02.c" language="C" checksum="bc7bbc1e47d9aae17dd1bb86dad7d370e923ff88">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106040" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2583" path="000/106/040/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_03.c" language="C" checksum="b325a6139bfeb36357695dd19d70bbbb642b1aee">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106041" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2948" path="000/106/041/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_04.c" language="C" checksum="032bacffae275455ff4d91b97f3ee7c9f808fcba">
      <mixed line="32" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106042" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2919" path="000/106/042/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_05.c" language="C" checksum="94b6f302062a3aacbe001af914ea24d7ecc47362">
      <mixed line="32" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106043" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2889" path="000/106/043/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_06.c" language="C" checksum="912e0528d337b3a3fcda4a09d750e7cf4eb044ba">
      <mixed line="31" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106044" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2869" path="000/106/044/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_07.c" language="C" checksum="2b6f734ed7c86800b8f22074189711884c7ff048">
      <mixed line="31" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106045" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2969" path="000/106/045/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_08.c" language="C" checksum="6aad2394336b792079767d5f1cc5cfb7f7b0122f">
      <mixed line="39" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106046" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2677" path="000/106/046/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_09.c" language="C" checksum="02f4957c91c350f360b2c3f2990fb0617d137ba0">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106047" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2628" path="000/106/047/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_10.c" language="C" checksum="47682d11af28f9b6a886dbecec917924b1fb04d8">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106048" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2691" path="000/106/048/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_11.c" language="C" checksum="c914d75b4d8d080d464824c31c0c5d2e4992c7bc">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106049" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2644" path="000/106/049/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_12.c" language="C" checksum="c79043f750840cf104498921f09a2b1f5fb4e385">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106050" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2695" path="000/106/050/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_13.c" language="C" checksum="bb2d9ad88e3a79f67caf6c2f0bfa438263b106c2">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106051" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2646" path="000/106/051/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_14.c" language="C" checksum="bc6a6e975f7df094873371d5c388da67c1e53da5">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106052" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2879" path="000/106/052/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_15.c" language="C" checksum="32db0cfd8b25a189444eba01055c0ee1d0d886ee">
      <mixed line="27" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106053" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2128" path="000/106/053/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_16.c" language="C" checksum="c29cc53748fc5e56f1f1eef1f7537408d66e4570">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106054" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2153" path="000/106/054/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_17.c" language="C" checksum="d5e771e12655ed29cdde31039437a05dfec2e707">
      <mixed line="27" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="106055" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 587 Assignment of Fixed Address to Pointer<br/> Sinks:<br/> GoodSink: Assign the pointer to a stack variable<br/> BadSink : Assign fixed address to pointer<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2051" path="000/106/055/CWE587_Assignment_of_Fixed_Address_to_Pointer__basic_18.c" language="C" checksum="fe5bb56fba7bd66f84b8ff7687de0f981c7ea7c4">
      <mixed line="26" name="CWE-587: Assignment of a Fixed Address to a Pointer"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110053" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 01 Baseline]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3546" path="000/110/053/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_01.cpp" language="C++" checksum="9b533253d6398bbb4ec5597f78b0a318c633b7c6">
      <mixed line="47" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110054" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="5679" path="000/110/054/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_02.cpp" language="C++" checksum="e0ccd591d4b41befc3eba91f13058764832010f4">
      <mixed line="52" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110055" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="5727" path="000/110/055/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_03.cpp" language="C++" checksum="060d4cfc33d99c696ee5d30546a71b398c040c6c">
      <mixed line="52" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110056" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="6211" path="000/110/056/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_04.cpp" language="C++" checksum="aada7350d0223c0297b3af254f8b339622e2c53a">
      <mixed line="58" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110057" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="6119" path="000/110/057/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_05.cpp" language="C++" checksum="f50edf380a0c44f988795b89bef2f62994cc561d">
      <mixed line="58" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110058" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="6177" path="000/110/058/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_06.cpp" language="C++" checksum="2e46cf3b925bbc1699316bd7c874c865ef935337">
      <mixed line="57" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110059" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="6094" path="000/110/059/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_07.cpp" language="C++" checksum="ad7ab1e01c9939502181276106d7479d5f23f762">
      <mixed line="57" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110060" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="6250" path="000/110/060/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_08.cpp" language="C++" checksum="b964297468d66268c5d56b9a2ebfff2cfee39573">
      <mixed line="65" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110061" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="5940" path="000/110/061/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_09.cpp" language="C++" checksum="34f29bf5d2f87d854a90a460891083b65d587c0f">
      <mixed line="52" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110062" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="5828" path="000/110/062/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_10.cpp" language="C++" checksum="203f07c4e432c07ebaa09ad017d39f4b7b742c05">
      <mixed line="52" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110063" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="5968" path="000/110/063/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_11.cpp" language="C++" checksum="30c8293b6746ec923ba694748d0a720441b1e72d">
      <mixed line="51" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110064" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="5923" path="000/110/064/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_12.cpp" language="C++" checksum="f7dedcb53900d9e60e63522b47274ddbe5730df6">
      <mixed line="57" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110065" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="5979" path="000/110/065/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_13.cpp" language="C++" checksum="46a338510e62f51cabc64fa0f35067bbf702685e">
      <mixed line="51" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110066" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="5867" path="000/110/066/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_14.cpp" language="C++" checksum="9e8fd83bb2c834a9a6708324ff0186d6cce1264c">
      <mixed line="51" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110067" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 15 Control flow: switch(6) and switch(7)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="6991" path="000/110/067/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_15.cpp" language="C++" checksum="8766684fe12c1157a8856ca8556ed04347a0c1d6">
      <mixed line="58" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110068" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="4101" path="000/110/068/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_16.cpp" language="C++" checksum="4d0e9ff9da3e9f17078334d042ce6ac3717c431b">
      <mixed line="52" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110069" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="4071" path="000/110/069/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_17.cpp" language="C++" checksum="a8bff74ab29bb6cca401738dce68819f4ffedf8e">
      <mixed line="52" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110070" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3806" path="000/110/070/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_18.cpp" language="C++" checksum="62a451bb2dd65ea04c94276376855307d12bac79">
      <mixed line="50" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110071" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 21 Control flow: Flow controlled by value of a static global variable. All functions contained in one file.]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="5462" path="000/110/071/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_21.cpp" language="C++" checksum="7167f1b07a46fa1f8277ae582b0da4eb7de8db03">
      <mixed line="48" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="5" id="110072" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 22 Control flow: Flow controlled by value of a global variable. Sink functions are in a separate file from sources.]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3698" path="000/110/072/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_22a.cpp" language="C++" checksum="b882f8d1eac18c2edfcbdd78dc83ca0ec0460ddd"></file>
    <file size="3824" path="000/110/072/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_22b.cpp" language="C++" checksum="486241a4ff5700a9cb703d1576263ca876a0e879">
      <mixed line="49" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110073" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 31 Data flow using a copy of data within the same function]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="4011" path="000/110/073/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_31.cpp" language="C++" checksum="239749b9e4b4990724cb21a92ec15441743acee1">
      <mixed line="50" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110074" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 32 Data flow using two pointers to the same value within the same function]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="4402" path="000/110/074/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_32.cpp" language="C++" checksum="6ea288dd1ac18b93ba3b1054ee4590fe1bea9274">
      <mixed line="55" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110075" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 33 Data flow: use of a C++ reference to data within the same function]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="4007" path="000/110/075/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_33.cpp" language="C++" checksum="a8b9e7b1f5c84ed47b869a0eaba6e26d176d75fd">
      <mixed line="50" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110076" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 41 Data flow: data passed as an argument from one function to another in the same source file]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3846" path="000/110/076/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_41.cpp" language="C++" checksum="503ff24f70eaf1e026eedabe300182a82cffa0ce">
      <mixed line="43" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110077" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 42 Data flow: data returned from one function to another in the same source file]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3938" path="000/110/077/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_42.cpp" language="C++" checksum="f4393c8fcb2c2815f528dd85e073f6a7ede8a741">
      <mixed line="53" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110078" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 43 Data flow: data flows using a C++ reference from one function to another in the same source file]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3860" path="000/110/078/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_43.cpp" language="C++" checksum="22bbd5dc01bdd8a3bee5d6bd866244a94d7dc7c9">
      <mixed line="52" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110079" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 44 Data/control flow: data passed as an argument from one function to a function in the same source file called via a function pointer]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="4095" path="000/110/079/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_44.cpp" language="C++" checksum="24e9f0ac6f6c74b353bca54d9d0d5df9af07a76a">
      <mixed line="43" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110080" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 45 Data flow: data passed as a static global variable from one function to another in the same source file]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="4071" path="000/110/080/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_45.cpp" language="C++" checksum="62e2bbab550d253c8b6d2131a7023cae8ac4cd28">
      <mixed line="48" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="5" id="110081" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 51 Data flow: data passed as an argument from one function to another in different source files]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2786" path="000/110/081/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_51a.cpp" language="C++" checksum="5e5a366f759a5ecd3e2e55b7286405b8cfead398"></file>
    <file size="2411" path="000/110/081/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_51b.cpp" language="C++" checksum="50b1c179851f00149e2763054d25bcf9294dc3a8">
      <mixed line="43" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="6" id="110082" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 52 Data flow: data passed as an argument from one function to another to another in three different source files]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2783" path="000/110/082/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_52a.cpp" language="C++" checksum="4c0ff9732dbf446914413e0bb4cc0ecc87c82184"></file>
    <file size="1568" path="000/110/082/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_52b.cpp" language="C++" checksum="49c96e59ccbfc56a20a8fd0f8846e0e900c07b13"></file>
    <file size="2434" path="000/110/082/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_52c.cpp" language="C++" checksum="bda0aaf2f1a65c1e53be62ff9665cea6f2d61e8d">
      <mixed line="43" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="7" id="110083" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 53 Data flow: data passed as an argument from one function through two others to a fourth; all four functions are in different source files]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2810" path="000/110/083/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_53a.cpp" language="C++" checksum="178413f7ad53dc10c9314980bb8e00a799d99df1"></file>
    <file size="1595" path="000/110/083/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_53b.cpp" language="C++" checksum="d4270a4fe31c12e5dbdea6633f1cbb3f600527e5"></file>
    <file size="1595" path="000/110/083/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_53c.cpp" language="C++" checksum="8b6795718bce02693705ea4c99a28080d5409d84"></file>
    <file size="2461" path="000/110/083/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_53d.cpp" language="C++" checksum="54a868e42272f322aea891d17d431b2e4fb0e7c4">
      <mixed line="43" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="8" id="110084" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 54 Data flow: data passed as an argument from one function through three others to a fifth; all five functions are in different source files]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2811" path="000/110/084/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_54a.cpp" language="C++" checksum="f0a90290505cf1a9951213b8df8bfcfab0782609"></file>
    <file size="1596" path="000/110/084/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_54b.cpp" language="C++" checksum="40d52e2c446394a8f3dac2b5050f44bbb25d802d"></file>
    <file size="1596" path="000/110/084/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_54c.cpp" language="C++" checksum="6473ab7aa649ea4a5ba3ae043b6a57390e964b6b"></file>
    <file size="1596" path="000/110/084/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_54d.cpp" language="C++" checksum="f27be94a30412fbba58f358bf3489f3f32eec5ff"></file>
    <file size="2462" path="000/110/084/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_54e.cpp" language="C++" checksum="86a6843a38e0a10a6343cab87572e0af535da64f">
      <mixed line="43" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="5" id="110085" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 61 Data flow: data returned from one function to another in different source files]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3565" path="000/110/085/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_61a.cpp" language="C++" checksum="98d3ebb3262f0a370c3f7ead94e51f68d4766c7e">
      <mixed line="48" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
    <file size="1707" path="000/110/085/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_61b.cpp" language="C++" checksum="3cd16bf65c8fc587cc4609b1a1e1fd251bf45805"></file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="5" id="110086" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 62 Data flow: data flows using a C++ reference from one function to another in different source files]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3548" path="000/110/086/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_62a.cpp" language="C++" checksum="c007b5937f3ebba0ef64ad1a2732caf17c1ce139">
      <mixed line="48" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
    <file size="1657" path="000/110/086/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_62b.cpp" language="C++" checksum="0022a5b3c147f77d43eba873f238b512d0018845"></file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="5" id="110087" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 63 Data flow: pointer to data passed from one function to another in different source files]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2762" path="000/110/087/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_63a.cpp" language="C++" checksum="37da3abb2c07dcb230dd16a55e74e21f8d38ba0f"></file>
    <file size="2521" path="000/110/087/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_63b.cpp" language="C++" checksum="aacb5077a967145948e0bd0e9c467f935e6ba932">
      <mixed line="44" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="5" id="110088" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 64 Data flow: void pointer to data passed from one function to another in different source files]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2767" path="000/110/088/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_64a.cpp" language="C++" checksum="b03e0265e1412fa7ef5eefae243bf07cae111534"></file>
    <file size="3012" path="000/110/088/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_64b.cpp" language="C++" checksum="daa944a7d9e23a985fbe39c2153460f82ab1d06a">
      <mixed line="47" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="5" id="110089" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 65 Data/control flow: data passed as an argument from one function to a function in a different source file called via a function pointer]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3004" path="000/110/089/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_65a.cpp" language="C++" checksum="0078da9d5f114d7efbf0dee64d8bc19fbc925626"></file>
    <file size="2453" path="000/110/089/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_65b.cpp" language="C++" checksum="8dd9bf9118308d0f6ff0430af920ecaaac29029c">
      <mixed line="43" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="5" id="110090" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 66 Data flow: data passed in an array from one function to another in different source files]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2984" path="000/110/090/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_66a.cpp" language="C++" checksum="81e54c113c48f37ddc4ca4b8c2e56a6884ed8284"></file>
    <file size="2578" path="000/110/090/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_66b.cpp" language="C++" checksum="d3fee76d0aee23c7178210295252b9a04cadb468">
      <mixed line="45" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="5" id="110091" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 67 Data flow: data passed in a struct from one function to another in different source files]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3032" path="000/110/091/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_67a.cpp" language="C++" checksum="bf7257f194624ca3897b5bf6d5510066857d34b4"></file>
    <file size="2632" path="000/110/091/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_67b.cpp" language="C++" checksum="808151a3c0f20c28fcbb134cd34472698cf2e95f">
      <mixed line="49" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="5" id="110092" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 68 Data flow: data passed as a global variable from one function to another in different source files]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2879" path="000/110/092/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_68a.cpp" language="C++" checksum="2a3171ef18e93e21681189d5e1c0b54c36de89e4"></file>
    <file size="2570" path="000/110/092/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_68b.cpp" language="C++" checksum="36bc34d1b65cd84e370ee6f4906c687e96583bed">
      <mixed line="48" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="5" id="110093" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 72 Data flow: data passed in a vector from one function to another in different source files]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3485" path="000/110/093/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_72a.cpp" language="C++" checksum="0b3a05585278a70856164e8c0246849270d6f781"></file>
    <file size="2646" path="000/110/093/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_72b.cpp" language="C++" checksum="ed180cd7b3578592354651cdd815350545439498">
      <mixed line="48" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="5" id="110094" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 73 Data flow: data passed in a list from one function to another in different source files]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3250" path="000/110/094/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_73a.cpp" language="C++" checksum="1860be927c44614532ea8085af258d19ad1bd425"></file>
    <file size="2617" path="000/110/094/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_73b.cpp" language="C++" checksum="02b8cb21e325b443f257d8cb23ce806a762c3c05">
      <mixed line="47" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="5" id="110095" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 74 Data flow: data passed in a map from one function to another in different source files]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3215" path="000/110/095/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_74a.cpp" language="C++" checksum="e86b0e0e3500dbf190a0a353f6f6484739949ca0"></file>
    <file size="2625" path="000/110/095/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_74b.cpp" language="C++" checksum="925c32c8c41ceac7f542aec9e174b3d621cd8b0a">
      <mixed line="48" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="8" id="110096" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 81 Data flow: data passed in a parameter to an virtual method called via a reference]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1921" path="000/110/096/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_81.h" language="C" checksum="830db60ef7d913cf0932f682ed9381c2f229930e"></file>
    <file size="1539" path="000/110/096/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_81_bad.cpp" language="C++" checksum="cd0752f7e7af56bf45f079d765d6e542fc1e8a01">
      <mixed line="37" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
    <file size="1435" path="000/110/096/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_81_goodB2G.cpp" language="C++" checksum="956b6ad88b98c8b42e5f9f32e0d139593a92edd5"></file>
    <file size="1553" path="000/110/096/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_81_goodG2B.cpp" language="C++" checksum="bd998b7a392c45d01a6ca1bfd6c5400eea65fe4c"></file>
    <file size="3144" path="000/110/096/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_81a.cpp" language="C++" checksum="1031c9c2b7e595bf0969fd176e6632c6e7541897"></file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="8" id="110097" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 82 Data flow: data passed in a parameter to an virtual method called via a pointer]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="1895" path="000/110/097/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_82.h" language="C" checksum="4f9d8b6e01451d8d120e187293fc8a45787cfd79"></file>
    <file size="1531" path="000/110/097/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_82_bad.cpp" language="C++" checksum="e248aceeaff8db4bf7d89a8e760fb03bf4722123">
      <mixed line="37" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
    <file size="1427" path="000/110/097/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_82_goodB2G.cpp" language="C++" checksum="cfab35f6d9c0ca02ad1005a0f204c0954c1c4c71"></file>
    <file size="1545" path="000/110/097/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_82_goodG2B.cpp" language="C++" checksum="fdb787336d4a2ec01510abe227c901cc150de117"></file>
    <file size="3223" path="000/110/097/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_82a.cpp" language="C++" checksum="57549a9a6315493a47e7510298d9279ca1721800"></file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="8" id="110098" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 83 Data flow: data passed to class constructor and destructor by declaring the class object on the stack]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2050" path="000/110/098/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_83.h" language="C" checksum="2e10bb438fb040d8979e7143f3a5d4b53104c498"></file>
    <file size="1903" path="000/110/098/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_83_bad.cpp" language="C++" checksum="0b7b0f46e2f244555e634418b5e9e83dcdc85c65">
      <mixed line="44" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
    <file size="1811" path="000/110/098/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_83_goodB2G.cpp" language="C++" checksum="c1ea5b0149c6009a5b6fddfe3770b82165f0dae5"></file>
    <file size="1929" path="000/110/098/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_83_goodG2B.cpp" language="C++" checksum="9fff30c97361a3db82f52488c1d711d7be316bdf"></file>
    <file size="2542" path="000/110/098/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_83a.cpp" language="C++" checksum="d4317f988c07f1060627c1b8bfbb57dddf591193"></file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="8" id="110099" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 672 Operation on Resource After Expiration or Release<br/> BadSource:  Add values to the list, including the number zero<br/> GoodSource: Add value to the list that are not zero<br/> Sinks:<br/> GoodSink: Iterate through the list without attempting to clear its contents<br/> BadSink : Iterate through the list, but clear the list if it contains a zero<br/> Flow Variant: 84 Data flow: data passed to class constructor and destructor by declaring the class object on the heap and deleting it after use]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2075" path="000/110/099/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_84.h" language="C" checksum="9fededa00337e74ea188842f938e3b5d9e355ec5"></file>
    <file size="1928" path="000/110/099/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_84_bad.cpp" language="C++" checksum="abc66424e6367bf7fd972590bfb50f5df7ae2bdc">
      <mixed line="44" name="CWE-672: Operation on a Resource after Expiration or Release"></mixed>
    </file>
    <file size="1836" path="000/110/099/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_84_goodB2G.cpp" language="C++" checksum="144296caf73060530586ea37d3e2dd54b4bbb35d"></file>
    <file size="1954" path="000/110/099/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_84_goodG2B.cpp" language="C++" checksum="3d81dbf0e74cf7ca7eb5d900af0d2265614fed35"></file>
    <file size="2898" path="000/110/099/CWE672_Operation_on_Resource_After_Expiration_or_Release__list_int_84a.cpp" language="C++" checksum="10b6fd4405c7c241d54be247bf8a097b7e44d8c8"></file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110294" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 01 Baseline]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2275" path="000/110/294/CWE676_Use_of_Potentially_Dangerous_Function__basic_01.cpp" language="C++" checksum="8b35c9034f12ea9e3036eb6dfa4729440b2f2de7">
      <mixed line="35" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110295" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3025" path="000/110/295/CWE676_Use_of_Potentially_Dangerous_Function__basic_02.cpp" language="C++" checksum="5921ba6841d0adeabbc8046be53effda6bb0efc6">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110296" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3046" path="000/110/296/CWE676_Use_of_Potentially_Dangerous_Function__basic_03.cpp" language="C++" checksum="9459825260361fff3b65f4b284751adee644b4a6">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110297" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3411" path="000/110/297/CWE676_Use_of_Potentially_Dangerous_Function__basic_04.cpp" language="C++" checksum="a36efe98acf89b6d5dca3f59c923aa9d3c2ffd91">
      <mixed line="43" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110298" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3382" path="000/110/298/CWE676_Use_of_Potentially_Dangerous_Function__basic_05.cpp" language="C++" checksum="dfbff59faa5ba43382227b81c1615ff006b9210c">
      <mixed line="43" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110299" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3352" path="000/110/299/CWE676_Use_of_Potentially_Dangerous_Function__basic_06.cpp" language="C++" checksum="3f4328297844ffa80be52473dc8ba662e3da764e">
      <mixed line="42" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110300" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3332" path="000/110/300/CWE676_Use_of_Potentially_Dangerous_Function__basic_07.cpp" language="C++" checksum="c44a6a40adbcb15479944e0fa3d4b059a3ae02a1">
      <mixed line="42" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110301" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3432" path="000/110/301/CWE676_Use_of_Potentially_Dangerous_Function__basic_08.cpp" language="C++" checksum="e013c033085bb642d274c05c6b2f3bd3a08dbddc">
      <mixed line="50" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110302" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3140" path="000/110/302/CWE676_Use_of_Potentially_Dangerous_Function__basic_09.cpp" language="C++" checksum="738acd949e48371673aaaa8fa8c61899fb4b9f88">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110303" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3091" path="000/110/303/CWE676_Use_of_Potentially_Dangerous_Function__basic_10.cpp" language="C++" checksum="ec76a2f6f680a654440dba68e957e4d6527d3c7e">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110304" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3154" path="000/110/304/CWE676_Use_of_Potentially_Dangerous_Function__basic_11.cpp" language="C++" checksum="5f2a3fb61b9d47ef775fc8054f37ccf82153d171">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110305" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3202" path="000/110/305/CWE676_Use_of_Potentially_Dangerous_Function__basic_12.cpp" language="C++" checksum="f9ea9f23e922d61bf5b78462f134c6142b5691cc">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110306" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3158" path="000/110/306/CWE676_Use_of_Potentially_Dangerous_Function__basic_13.cpp" language="C++" checksum="bd9a48562cfa9ef149bc3a472e7d3afe38720712">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110307" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3109" path="000/110/307/CWE676_Use_of_Potentially_Dangerous_Function__basic_14.cpp" language="C++" checksum="cdd5cbe37516560ba2ec78ea733dc8dad9b4ed25">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110308" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3314" path="000/110/308/CWE676_Use_of_Potentially_Dangerous_Function__basic_15.cpp" language="C++" checksum="19bf5346330be9a9b536276f45e236ef16452243">
      <mixed line="38" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110309" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2503" path="000/110/309/CWE676_Use_of_Potentially_Dangerous_Function__basic_16.cpp" language="C++" checksum="8ced5b6bcc445e7f4611acb94fb5a8c7223592c1">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110310" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2522" path="000/110/310/CWE676_Use_of_Potentially_Dangerous_Function__basic_17.cpp" language="C++" checksum="b0bff43e0e5a8e699ef199b440576443416c92d8">
      <mixed line="38" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110311" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 676 Use of Potentially Dangerous Function<br/> Sinks:<br/> GoodSink: Use cin after specifying the length of the input<br/> BadSink : Use cin without specifying the length of the input<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2399" path="000/110/311/CWE676_Use_of_Potentially_Dangerous_Function__basic_18.cpp" language="C++" checksum="ba0823db4a6098c44641fd601f0e855c420cc58f">
      <mixed line="37" name="CWE-676: Use of Potentially Dangerous Function"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110942" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 01 Baseline]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2152" path="000/110/942/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_01.c" language="C" checksum="964edc0ba09596031ddc7bd5547869fec3900a60">
      <mixed line="28" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110943" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2795" path="000/110/943/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_02.c" language="C" checksum="5b2d902ff1339a954760286da5d75a42f40cfd0c">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110944" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2816" path="000/110/944/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_03.c" language="C" checksum="67d033b74765da61ebb4b33755213e3ee9a910e8">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110945" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3181" path="000/110/945/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_04.c" language="C" checksum="a348158b645d64fd8a7005748a18f8562f61c62d">
      <mixed line="36" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110946" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3152" path="000/110/946/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_05.c" language="C" checksum="8a71136c7d543574df80a9e14a2ed665d47b5f76">
      <mixed line="36" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110947" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3122" path="000/110/947/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_06.c" language="C" checksum="095e66c97d9253e4afc6a77b9b3b5b37657800cf">
      <mixed line="35" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110948" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3102" path="000/110/948/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_07.c" language="C" checksum="f18e9c61959872de1274420c9af101b4beb3cd64">
      <mixed line="35" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110949" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3202" path="000/110/949/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_08.c" language="C" checksum="072e7662a6c6efd615294125d6889ae6bfa87949">
      <mixed line="43" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110950" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2910" path="000/110/950/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_09.c" language="C" checksum="dd477423b4700be6a9606030bc292ccbf6dd0716">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110951" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2861" path="000/110/951/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_10.c" language="C" checksum="7ce64e9171f5a2d6d23dc0d92e55414d12b04fab">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110952" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2924" path="000/110/952/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_11.c" language="C" checksum="6933ff39cedd9376f3c1b7737b36f2147ff02534">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110953" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2881" path="000/110/953/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_12.c" language="C" checksum="7882ecc26b6f22ed09ca0d4d902b115a4cd6725a">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110954" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2928" path="000/110/954/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_13.c" language="C" checksum="88590b74612350a365b58abcbeecea64c6d2ef0a">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110955" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2879" path="000/110/955/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_14.c" language="C" checksum="e6b3976341323bb678afa5b744a958d48d56e511">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110956" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3108" path="000/110/956/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_15.c" language="C" checksum="2b1eedfadb75cfce4b6f4084568394f44c1be315">
      <mixed line="31" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110957" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2357" path="000/110/957/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_16.c" language="C" checksum="fba872a8c5c35aeacf6084e0a8910878d802ccf0">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110958" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2382" path="000/110/958/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_17.c" language="C" checksum="540b850a4f4b508d147d315aad4d837ef4dc0ec8">
      <mixed line="31" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110959" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 685 Function Call With Incorrect Number of Arguments<br/> Sinks:<br/> GoodSink: Use the correct number of arguments<br/> BadSink : Incorrect number of arguments<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2276" path="000/110/959/CWE685_Function_Call_With_Incorrect_Number_of_Arguments__basic_18.c" language="C" checksum="9b57acd67551ce2ba7e6a950970ba917b8be745d">
      <mixed line="30" name="CWE-685: Function Call With Incorrect Number of Arguments"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110960" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 01 Baseline]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2173" path="000/110/960/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_01.c" language="C" checksum="052736e43b9655888f2e158dcd20cc9ab23eaa75">
      <mixed line="28" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110961" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 02 Control flow: if(1) and if(0)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2824" path="000/110/961/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_02.c" language="C" checksum="578c324210f1e3ecfae785bab06cd19ed74d62fa">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110962" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 03 Control flow: if(5==5) and if(5!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2845" path="000/110/962/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_03.c" language="C" checksum="979bb618f9773dca9df3568be0b6a7dedb7827e5">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110963" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 04 Control flow: if(STATIC_CONST_TRUE) and if(STATIC_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3210" path="000/110/963/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_04.c" language="C" checksum="8fbcbbc1c5a0541d2c02b06e343d09854a9e5f0e">
      <mixed line="36" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110964" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 05 Control flow: if(staticTrue) and if(staticFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3181" path="000/110/964/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_05.c" language="C" checksum="c12f92b6bdd04f61eb7745631c730b8fa70648b0">
      <mixed line="36" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110965" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 06 Control flow: if(STATIC_CONST_FIVE==5) and if(STATIC_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3151" path="000/110/965/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_06.c" language="C" checksum="96516ff195fc7baaba26329fe11f0c0c8f881be8">
      <mixed line="35" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110966" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 07 Control flow: if(staticFive==5) and if(staticFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3131" path="000/110/966/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_07.c" language="C" checksum="f5ab9e3cfbbb77e5cb9e296703d860d8c03bae96">
      <mixed line="35" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110967" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 08 Control flow: if(staticReturnsTrue()) and if(staticReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3231" path="000/110/967/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_08.c" language="C" checksum="f46ce821f97cfddecb2a415562f3d84241a869f6">
      <mixed line="43" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110968" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 09 Control flow: if(GLOBAL_CONST_TRUE) and if(GLOBAL_CONST_FALSE)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2939" path="000/110/968/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_09.c" language="C" checksum="c64c7ef95a52cc32335978b71275024769e4ad9b">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110969" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 10 Control flow: if(globalTrue) and if(globalFalse)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2890" path="000/110/969/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_10.c" language="C" checksum="b82569a11d610b0720c75d480c190be3973f27d3">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110970" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 11 Control flow: if(globalReturnsTrue()) and if(globalReturnsFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2953" path="000/110/970/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_11.c" language="C" checksum="efd06d91bd3062562dca7f4053bcfae9dc7ac789">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110971" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 12 Control flow: if(globalReturnsTrueOrFalse())]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2910" path="000/110/971/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_12.c" language="C" checksum="781c3ef73b276e990daef9f08e0f7915c5bfbdb0">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110972" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 13 Control flow: if(GLOBAL_CONST_FIVE==5) and if(GLOBAL_CONST_FIVE!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2957" path="000/110/972/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_13.c" language="C" checksum="f6fbd5091611fe045fdfe361f67a4df71965cda1">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110973" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 14 Control flow: if(globalFive==5) and if(globalFive!=5)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2908" path="000/110/973/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_14.c" language="C" checksum="bd54ab6401aa0b9668e55d318d1960706a7c852b">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110974" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 15 Control flow: switch(6)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="3125" path="000/110/974/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_15.c" language="C" checksum="44116e8f6a5c21ee631df1c638c974f4766d578d">
      <mixed line="31" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110975" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 16 Control flow: while(1)]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2386" path="000/110/975/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_16.c" language="C" checksum="b1e874bafd3ee1b25aadce8f7932eafc2f7348f0">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110976" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 17 Control flow: for loops]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2411" path="000/110/976/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_17.c" language="C" checksum="0c39a210bd7f9e0aa985fd19e410a6e62a3ca1b5">
      <mixed line="31" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
  <testcase submissionDate="2013-05-21" numberOfFiles="4" id="110977" status="Candidate" type="Source Code" testsuiteid="86">
    <description><![CDATA[CWE: 688 Function Call With Incorrect Variable or Reference as Argument<br/> Sinks:<br/> GoodSink: Use the correct format to print a string<br/> BadSink : Use a string format to print an int<br/> Flow Variant: 18 Control flow: goto statements]]></description>
    <file size="5385" path="shared/86/io.c" language="C" checksum="c023d71b402e6b5374e34ad32de08731021fd031"></file>
    <file size="3516" path="shared/86/std_testcase.h" language="C" checksum="1b30a41112852608a74e96d6df081d8502f978f8"></file>
    <file size="1457" path="shared/86/std_testcase_io.h" language="C" checksum="56de16829d5ac9d8086670ee5098217aa6694d26"></file>
    <file size="2297" path="000/110/977/CWE688_Function_Call_With_Incorrect_Variable_or_Reference_as_Argument__basic_18.c" language="C" checksum="5f4c4364e8ebea787d0f05309bc0c61a767a2bde">
      <mixed line="30" name="CWE-688: Function Call With Incorrect Variable or Reference as Argument"></mixed>
    </file>
  </testcase>
</container>
