|ENV01-C|Do not make assumptions about the size of an environment variable|High|Likely|Medium|18|1|
|ENV02-C|Beware of multiple environment variables with the same effective name|Low|Unlikely|Medium|2|3|
|ENV03-C|Sanitize the environment when invoking external programs|High|Likely|High|9|2|
|ENV30-C|Do not modify the object referenced by the return value of certain functions|Low|Probable|Medium|4|3|
|ENV31-C|Do not rely on an environment pointer following an operation that may invalidate it|Low|Probable|Medium|4|3|
|ENV32-C|All exit handlers must return normally|Medium|Likely|Medium|12|1|
|ENV33-C|Do not call system()|High|Probable|Medium|12|1|
|ENV34-C|Do not store pointers returned by certain functions|Low|Probable|Medium|4|3|
|FIO01-C|Be careful using functions that use file names for identification|Medium|Likely|Medium|12|1|
|FIO02-C|Canonicalize path names originating from tainted sources|Medium|Probable|Medium|8|2|
|FIO03-C|Do not make assumptions about fopen() and file creation|Medium|Probable|High|4|3|
|FIO05-C|Identify files using multiple file attributes|Medium|Probable|Medium|8|2|
|FIO06-C|Create files with appropriate access permissions|Medium|Probable|High|4|3|
|FIO08-C|Take care when calling remove() on an open file|Medium|Probable|High|4|3|
|FIO09-C|Be careful with binary data when transferring data across systems|Medium|Probable|High|4|3|
|FIO10-C|Take care when using the rename() function|Medium|Probable|Medium|8|2|
|FIO11-C|Take care when specifying the mode parameter of fopen()|Medium|Probable|Medium|8|2|
|FIO13-C|Never push back anything other than one read character|Medium|Probable|High|4|3|
|FIO14-C|Understand the difference between text mode and binary mode with file streams|Low|Probable|High|2|3|
|FIO15-C|Ensure that file operations are performed in a secure directory|Medium|Probable|High|4|3|
|FIO17-C|Do not rely on an ending null character when using fread()|Low|Likely|Medium|6|2|
|FIO18-C|Never expect fwrite() to terminate the writing process at a null character|Medium|Probable|Medium|8|2|
|FIO19-C|Do not use fseek() and ftell() to compute the size of a regular file|Low|Unlikely|Medium|2|3|
|FIO20-C|Avoid unintentional truncation when using fgets() or fgetws()|Medium|Likely|Medium|12|1|
|FIO21-C|Do not create temporary files in shared directories|High|Probable|Medium|12|1|
|FIO22-C|Close files before spawning processes|Medium|Unlikely|Medium|4|3|
|FIO23-C|Do not exit with unflushed data in stdout or stderr|Medium|Unlikely|Medium|4|3|
|FIO30-C|Exclude user input from format strings|High|Likely|Medium|18|1|
|FIO31-C|Do not open a file that is already open|Medium|Probable|High|4|3|
|FIO32-C|Do not perform operations on devices that are only appropriate for files|Medium|Unlikely|Medium|4|3|
|FIO34-C|Distinguish between characters read from a file and EOF or WEOF|High|Probable|Medium|12|1|
|FIO37-C|Do not assume that fgets() or fgetws() returns a nonempty string when successful|High|Probable|Medium|12|1|
|FIO38-C|Do not copy a FILE object|Low|Probable|Medium|4|3|
|FIO39-C|Do not alternately input and output from a stream without an intervening flush or positioning call|Low|Likely|Medium|6|2|
|FIO40-C|Reset strings on fgets() or fgetws() failure|Low|Probable|Medium|4|3|
|FIO41-C|Do not call getc(), putc(), getwc(), or putwc() with a stream argument that has side effects|Low|Unlikely|Medium|2|3|
|FIO42-C|Close files when they are no longer needed|Medium|Unlikely|Medium|4|3|
|FIO44-C|Only use values for fsetpos() that are returned from fgetpos()|Medium|Unlikely|Medium|4|3|
|FIO45-C|Avoid TOCTOU race conditions while accessing files|High|Probable|High|6|2|
|FIO46-C|Do not access a closed file|Medium|Unlikely|Medium|4|3|
|FIO47-C|Use valid format strings|High|Unlikely|Medium|6|2|
|WIN00-C|Be specific when dynamically loading libraries|High|Unlikely|Low|9|2|
|WIN01-C|Do not forcibly terminate execution|High|Likely|High|9|2|
|WIN02-C|Restrict privileges when spawning child processes|High|Likely|High|9|2|
|WIN03-C|Understand HANDLE inheritance|High|Unlikely|Low|9|2|
|WIN04-C|Consider encrypting function pointers|High|Unlikely|Low|9|2|
|WIN30-C|Properly pair allocation and deallocation functions|Low|Probable|Low|6|2|
|POS01-C|Check for the existence of links when dealing with files|Medium|Likely|High|6|2|
|POS02-C|Follow the principle of least privilege|High|Likely|High|9|2|
|POS04-C|Avoid using PTHREAD_MUTEX_NORMAL type mutex locks|Low|Unlikely|Medium|2|3|
|POS05-C|Limit access to files by creating a jail|Medium|Probable|High|4|3|
|POS30-C|Use the readlink() function properly|High|Probable|Medium|12|1|
|POS33-C|Do not use vfork()|Low|Probable|Low|6|2|
|POS34-C|Do not call putenv() with a pointer to an automatic variable as the argument|High|Unlikely|Medium|6|2|
|POS35-C|Avoid race conditions while checking for the existence of a symbolic link|High|Likely|Medium|18|1|
|POS36-C|Observe correct revocation order while relinquishing privileges|High|Probable|Medium|12|1|
|POS37-C|Ensure that privilege relinquishment is successful|High|Probable|Low|18|1|
|POS38-C|Beware of race conditions when using fork and file descriptors|Medium|Unlikely|Medium|4|3|
|POS39-C|Use the correct byte ordering when transferring data between systems|Medium|Likely|Low|18|1|
|POS44-C|Do not use signals to terminate threads|Low|Probable|Low|6|2|
|POS47-C|Do not use threads that can be canceled asynchronously|Medium|Probable|Low|12|1|
|POS48-C|Do not unlock or destroy another POSIX thread&#39;s mutex|Medium|Probable|High|4|3|
|POS49-C|When data must be accessed by multiple threads, provide a mutex and guarantee no adjacent data is also accessed|Medium|Probable|Medium|8|2|
|POS50-C|Declare objects shared between POSIX threads with appropriate storage durations|Medium|Probable|High|4|3|
|POS51-C|Avoid deadlock with POSIX threads by locking in predefined order|Low|Probable|Medium|4|3|
|POS52-C|Do not perform operations that can block while holding a POSIX lock|Low|Probable|High|2|3|
|POS54-C|Detect and handle POSIX library errors|High|Likely|Medium|18|1|
|POS53-C|Do not use more than one mutex for concurrent waiting operations on a condition variable|Medium|Probable|High|4|3|
|MSC00-C|Compile cleanly at High warning levels|Medium|Probable|Medium|8|2|
|MSC01-C|Strive for logical completeness|Medium|Probable|Medium|8|2|
|MSC04-C|Use comments consistently and in a readable fashion|Medium|Unlikely|Medium|4|3|
|MSC05-C|Do not manipulate time_t typed values directly|Low|Unlikely|Medium|2|3|
|MSC06-C|Beware of compiler optimizations|Medium|Probable|Medium|8|2|
|MSC07-C|Detect and remove dead code|Low|Unlikely|Medium|2|3|
|MSC09-C|Character encoding: Use subset of ASCII for safety|Medium|Unlikely|Medium|4|3|
|MSC10-C|Character encoding: UTF8-related issues|Medium|Unlikely|High|2|3|
|MSC11-C|Incorporate diagnostic tests using assertions|Low|Unlikely|High|1|3|
|MSC12-C|Detect and remove code that has no effect|Low|Unlikely|Medium|2|3|
|MSC13-C|Detect and remove unused values|Low|Unlikely|Medium|2|3|
|MSC14-C|Do not introduce unnecessary platform dependencies|Low|Unlikely|Medium|2|3|
|MSC15-C|Do not depend on undefined behavior|High|Likely|Medium|18|1|
|MSC17-C|Finish every set of statements associated with a case label with a break statement|Medium|Likely|Low|18|1|
|MSC18-C|Be careful while handling sensitive data, such as passwords, in program code|Medium|Probable|Medium|8|2|
|MSC19-C|For functions that return an array, prefer returning an empty array over a null value|Low|Unlikely|High|1|3|
|MSC20-C|Do not use a switch statement to transfer control into a complex block|Medium|Probable|Medium|8|2|
|MSC21-C|Use robust loop termination conditions|Low|Unlikely|Low|3|3|
|MSC22-C|Use the setjmp(), longjmp() facility securely|Low|Probable|Medium|4|3|
|MSC24-C|Do not use deprecated or obsolescent functions|High|Probable|Medium|12|1|
|MSC30-C|Do not use the rand() function for generating pseudorandom numbers|Medium|Unlikely|Low|6|2|
|MSC32-C|Properly seed pseudorandom number generators|Medium|Likely|Low|18|1|
|MSC33-C|Do not pass invalid data to the asctime() function|High|Likely|Low|27|1|
|MSC37-C|Ensure that control never reaches the end of a non-void function|High|Unlikely|Low|9|2|
|MSC38-C|Do not treat a predefined identifier as an object if it might only be implemented as a macro|Low|Unlikely|Medium|2|3|
|MSC39-C|Do not call va_arg() on a va_list that has an indeterminate value|Low|Unlikely|Low|3|3|
|MSC40-C|Do not violate constraints|Low|Unlikely|Medium|2|3|
|CON00-C|Avoid race conditions with multiple threads|Medium|Probable|High|4|3|
|CON01-C|Acquire and release synchronization primitives in the same module, at the same level of abstraction|Low|Probable|Medium|4|3|
|CON02-C|Do not use volatile as a synchronization primitive|Medium|Probable|Medium|8|2|
|CON04-C|Join or detach threads even if their exit status is unimportant|Low|Unlikely|High|1|3|
|CON05-C|Do not perform operations that can block while holding a lock|Low|Probable|High|2|3|
|CON07-C|Ensure that compound operations on shared variables are atomic|Medium|Probable|Medium|8|2|
|CON08-C|Do not assume that a group of calls to independently atomic methods is atomic|Low|Probable|Medium|4|3|
|CON09-C|Avoid the ABA problem when using lock-free algorithms|Medium|Unlikely|High|2|3|
|CON30-C|Clean up thread-specific storage|Medium|Unlikely|Medium|4|3|
|CON31-C|Do not destroy a mutex while it is locked|Medium|Probable|High|4|3|
|CON32-C|Prevent data races when accessing bit-fields from multiple threads|Medium|Probable|Medium|8|2|
|CON33-C|Avoid race conditions when using library functions|Medium|Probable|High|4|3|
|CON34-C|Declare objects shared between threads with appropriate storage durations|Medium|Probable|High|4|3|
|CON35-C|Avoid deadlock by locking in a predefined order|Low|Probable|Medium|4|3|
|CON36-C|Wrap functions that can spuriously wake up in a loop|Low|Unlikely|Medium|2|3|
|CON37-C|Do not call signal() in a multithreaded program|Low|Probable|Low|6|2|
|CON38-C|Notify all threads waiting on a condition variable|Low|Unlikely|Medium|2|3|
|CON39-C|Do not join or detach a thread that was previously joined or detached|Low|Likely|Medium|6|2|
|CON40-C|Do not refer to an atomic variable twice in an expression|Medium|Probable|Medium|8|2|
|CON41-C|Wrap functions that can fail spuriously in a loop|Low|Unlikely|Medium|2|3|
|CON43-C|Do not allow data races in multithreaded code|Medium|Probable|High|4|3|
|API00-C|Functions should validate their parameters|Medium|Unlikely|High|2|3|
|API02-C|Functions that read or write to or from an array should take an argument to specify the source or target size|High|Likely|High|9|2|
|API03-C|Create consistent interfaces and capabilities across related functions|Medium|Unlikely|Medium|4|3|
|API04-C|Provide a consistent and usable error-checking mechanism|Medium|Unlikely|Medium|4|3|
|API07-C|Enforce type safety|Medium|Unlikely|Medium|4|3|
|API08-C|Avoid parameter names in a function prototype|Medium|Unlikely|Medium|4|3|
|API09-C|Compatible values should have the same type|Low|Unlikely|High|1|3|
|ERR00-C|Adopt and implement a consistent and comprehensive error-handling policy|Medium|Probable|High|4|3|
|ERR01-C|Use ferror() rather than errno to check for FILE stream errors|Low|Probable|Low|6|2|
|ERR02-C|Avoid in-band error indicators|Low|Unlikely|High|1|3|
|ERR03-C|Use runtime-constraint handlers when calling the bounds-checking interfaces|Low|Unlikely|Medium|2|3|
|ERR04-C|Choose an appropriate termination strategy|Medium|Probable|High|4|3|
|ERR05-C|Application-independent code should provide error detection without dictating error handling|Medium|Probable|High|4|3|
|ERR06-C|Understand the termination behavior of assert() and abort()|Medium|Unlikely|Medium|4|3|
|ERR07-C|Prefer functions that support error checking over equivalent functions that don&#39;t|Medium|Probable|Medium|8|2|
|ERR30-C|Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure|Medium|Probable|Medium|8|2|
|ERR32-C|Do not rely on indeterminate values of errno|Low|Unlikely|Low|3|3|
|ERR33-C|Detect and handle standard library errors|High|Likely|Medium|18|1|
|ERR34-C|Detect errors when converting a string to a number|Medium|Unlikely|Medium|4|3|
|SIG00-C|Mask signals handled by noninterruptible signal handlers|High|Likely|High|9|2|
|SIG01-C|Understand implementation-specific details regarding signal handler persistence|Low|Unlikely|Low|3|3|
|SIG02-C|Avoid using signals to implement normal functionality|High|Probable|Medium|12|1|
|SIG30-C|Call only asynchronous-safe functions within signal handlers|High|Likely|Medium|18|1|
|SIG31-C|Do not access shared objects in signal handlers|High|Likely|High|9|2|
|SIG34-C|Do not call signal() from within interruptible signal handlers|Low|Unlikely|Low|3|3|
|SIG35-C|Do not return from a computational exception signal handler|Low|Unlikely|High|1|3|
|MEM00-C|Allocate and free memory in the same module, at the same level of abstraction|High|Probable|Medium|12|1|
|MEM01-C|Store a new value in pointers immediately after free()|High|Unlikely|Low|9|2|
|MEM02-C|Immediately cast the result of a memory allocation function call into a pointer to the allocated type|Low|Unlikely|Low|3|3|
|MEM03-C|Clear sensitive information stored in reusable resources|Medium|Unlikely|High|2|3|
|MEM04-C|Beware of zero-length allocations|Low|Likely|Medium|6|2|
|MEM05-C|Avoid large stack allocations|Medium|Likely|Medium|12|1|
|MEM06-C|Ensure that sensitive data is not written out to disk|Medium|Unlikely|High|2|3|
|MEM07-C|Ensure that the arguments to calloc(), when multiplied, do not wrap|High|Unlikely|Medium|6|2|
|MEM10-C|Define and use a pointer validation function|High|Unlikely|High|3|3|
|MEM11-C|Do not assume infinite heap space|Low|Probable|High|2|3|
|MEM12-C|Consider using a goto chain when leaving a function on error when using and releasing resources|Low|Probable|Medium|4|3|
|MEM30-C|Do not access freed memory|High|Likely|Medium|18|1|
|MEM31-C|Free dynamically allocated memory when no longer needed|Medium|Probable|Medium|8|2|
|MEM33-C|Allocate and copy structures containing a flexible array member dynamically|Low|Unlikely|Low|3|3|
|MEM34-C|Only free memory allocated dynamically|High|Likely|Medium|18|1|
|MEM35-C|Allocate sufficient memory for an object|High|Probable|High|6|2|
|MEM36-C|Do not modify the alignment of objects by calling realloc()|Low|Probable|High|2|3|
|STR00-C|Represent characters using an appropriate type|Medium|Probable|Low|12|1|
|STR01-C|Adopt and implement a consistent plan for managing strings|Low|Unlikely|High|1|3|
|STR02-C|Sanitize data passed to complex subsystems|High|Likely|Medium|18|1|
|STR03-C|Do not inadvertently truncate a string|Medium|Probable|Medium|8|2|
|STR04-C|Use plain char for characters in the basic character set|Low|Unlikely|Low|3|3|
|STR05-C|Use pointers to const when referring to string literals|Low|Unlikely|Low|3|3|
|STR06-C|Do not assume that strtok() leaves the parse string unchanged|Medium|Likely|Medium|12|1|
|STR07-C|Use the bounds-checking interfaces for remediation of existing string manipulation code|High|Probable|Medium|12|1|
|STR08-C|Use managed strings for development of new string manipulation code|High|Probable|High|6|2|
|STR09-C|Don&#39;t assume numeric values for expressions with type plain character|Low|Unlikely|Low|3|3|
|STR10-C|Do not concatenate different type of string literals|Low|Probable|Medium|4|3|
|STR11-C|Do not specify the bound of a character array initialized with a string literal|Low|Probable|Low|6|2|
|STR30-C|Do not attempt to modify string literals|Low|Likely|Low|9|2|
|STR31-C|Guarantee that storage for strings has sufficient space for character data and the null terminator|High|Likely|Medium|18|1|
|STR32-C|Do not pass a non-null-terminated character sequence to a library function that expects a string|High|Probable|Medium|12|1|
|STR34-C|Cast characters to unsigned char before converting to larger integer sizes|Medium|Probable|Medium|8|2|
|STR37-C|Arguments to character-handling functions must be representable as an unsigned char|Low|Unlikely|Low|3|3|
|STR38-C|Do not confuse narrow and wide character strings and functions|High|Likely|Low|27|1|
|ARR00-C|Understand how arrays work|High|Probable|High|6|2|
|ARR01-C|Do not apply the sizeof operator to a pointer when taking the size of an array|High|Probable|Low|18|1|
|ARR02-C|Explicitly specify array bounds, even if implicitly defined by an initializer|Medium|Unlikely|Low|6|2|
|ARR30-C|Do not form or use out-of-bounds pointers or array subscripts|High|Likely|High|9|2|
|ARR32-C|Ensure size arguments for variable length arrays are in a valid range|High|Probable|High|6|2|
|ARR36-C|Do not subtract or compare two pointers that do not refer to the same array|Medium|Probable|Medium|8|2|
|ARR37-C|Do not add or subtract an integer to a pointer to a non-array object|Medium|Probable|Medium|8|2|
|ARR38-C|Guarantee that library functions do not form invalid pointers|High|Likely|Medium|18|1|
|ARR39-C|Do not add or subtract a scaled integer to a pointer|High|Probable|High|6|2|
|FLP00-C|Understand the limitations of floating-point numbers|Medium|Probable|High|4|3|
|FLP01-C|Take care in rearranging floating-point expressions|Low|Probable|High|2|3|
|FLP02-C|Avoid using floating-point numbers when precise computation is needed|Low|Probable|High|2|3|
|FLP03-C|Detect and handle floating-point errors|Low|Probable|High|2|3|
|FLP04-C|Check floating-point inputs for exceptional values|Low|Probable|High|2|3|
|FLP05-C|Don&#39;t use denormalized numbers|Low|Probable|High|2|3|
|FLP06-C|Convert integers to floating point for floating-point operations|Low|Probable|Low|6|2|
|FLP07-C|Cast the return value of a function that returns a floating-point type|Low|Probable|Medium|4|3|
|FLP30-C|Do not use floating-point variables as loop counters|Low|Probable|Low|6|2|
|FLP32-C|Prevent or detect domain and range errors in math functions|Medium|Probable|Medium|8|2|
|FLP34-C|Ensure that floating-point conversions are within range of the new type|Low|Unlikely|Low|3|3|
|FLP36-C|Preserve precision when converting integral values to floating-point type|Low|Unlikely|Medium|2|3|
|INT00-C|Understand the data model used by your implementation(s)|High|Unlikely|High|3|3|
|INT01-C|Use rsize_t or size_t for all integer values representing the size of an object|Medium|Probable|Medium|8|2|
|INT02-C|Understand integer conversion rules|Medium|Probable|Medium|8|2|
|INT04-C|Enforce limits on integer values originating from tainted sources|Low|Probable|High|2|3|
|INT05-C|Do not use input functions to convert character data if they cannot handle all possible inputs|Medium|Probable|High|4|3|
|INT06-C|Use strtol() or a related function to convert a string token to an integer|Medium|Probable|Medium|8|2|
|INT07-C|Use only explicitly signed or unsigned char type for numeric values|Medium|Probable|Medium|8|2|
|INT08-C|Verify that all integer values are in range|Medium|Probable|High|4|3|
|INT09-C|Ensure enumeration constants map to unique values|Low|Probable|Medium|4|3|
|INT10-C|Do not assume a positive remainder when using the % operator|Low|Unlikely|High|1|3|
|INT12-C|Do not make assumptions about the type of a plain int bit-field when used in an expression|Low|Unlikely|Medium|2|3|
|INT13-C|Use bitwise operators only on unsigned operands|High|Unlikely|Medium|6|2|
|INT14-C|Avoid performing bitwise and arithmetic operations on the same data|Medium|Unlikely|Medium|4|3|
|INT15-C|Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types|High|Unlikely|Medium|6|2|
|INT16-C|Do not make assumptions about representation of signed integers|Medium|Unlikely|High|2|3|
|INT17-C|Define integer constants in an implementation-independent manner|High|Probable|Low|18|1|
|INT18-C|Evaluate integer expressions in a larger size before comparing or assigning to that size|High|Likely|Medium|18|1|
|INT30-C|Ensure that unsigned integer operations do not wrap|High|Likely|High|9|2|
|INT31-C|Ensure that integer conversions do not result in lost or misinterpreted data|High|Probable|High|6|2|
|INT32-C|Ensure that operations on signed integers do not result in overflow|High|Likely|High|9|2|
|INT33-C|Ensure that division and remainder operations do not result in divide-by-zero errors|Low|Likely|Medium|6|2|
|INT34-C|Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand|Low|Unlikely|Medium|2|3|
|INT35-C|Use correct integer precisions|Low|Unlikely|Medium|2|3|
|INT36-C|Converting a pointer to integer or integer to pointer|Low|Probable|High|2|3|
|EXP00-C|Use parentheses for precedence of operation|Low|Probable|Medium|4|3|
|EXP02-C|Be aware of the short-circuit behavior of the logical AND and OR operators|Low|Unlikely|Medium|2|3|
|EXP03-C|Do not assume the size of a structure is the sum of the sizes of its members|Medium|Unlikely|High|2|3|
|EXP05-C|Do not cast away a const qualification|Medium|Probable|Medium|8|2|
|EXP07-C|Do not diminish the benefits of constants by assuming their values in expressions|Low|Unlikely|Medium|2|3|
|EXP08-C|Ensure pointer arithmetic is used correctly|High|Probable|High|6|2|
|EXP09-C|Use sizeof to determine the size of a type or variable|High|Unlikely|Medium|6|2|
|EXP10-C|Do not depend on the order of evaluation of subexpressions or the order in which side effects take place|Medium|Probable|Medium|8|2|
|EXP11-C|Do not make assumptions regarding the layout of structures with bit-fields|Medium|Probable|Medium|8|2|
|EXP12-C|Do not ignore values returned by functions|Medium|Unlikely|Medium|4|3|
|EXP13-C|Treat relational and equality operators as if they were nonassociative|Low|Unlikely|Medium|2|3|
|EXP14-C|Beware of integer promotion when performing bitwise operations on integer types smaller than int|Low|Likely|High|3|3|
|EXP15-C|Do not place a semicolon on the same line as an if, for, or while statement|High|Likely|Low|27|1|
|EXP16-C|Do not compare function pointers to constant values|Low|Likely|Medium|6|2|
|EXP19-C|Use braces for the body of an if, for, or while statement|Medium|Probable|Medium|8|2|
|EXP20-C|Perform explicit tests to determine success, true and false, and equality|Medium|Probable|Low|12|1|
|EXP21-C|Place constants on the left of equality comparisons|Low|Likely|Medium|6|2|
|EXP30-C|Do not depend on the order of evaluation for side effects|Medium|Probable|Medium|8|2|
|EXP32-C|Do not access a volatile object through a nonvolatile reference|Low|Likely|Medium|6|2|
|EXP33-C|Do not read uninitialized memory|High|Probable|Medium|12|1|
|EXP34-C|Do not dereference null pointers|High|Likely|Medium|18|1|
|EXP35-C|Do not modify objects with temporary lifetime|Low|Probable|Medium|4|3|
|EXP36-C|Do not cast pointers into more strictly aligned pointer types|Low|Probable|Medium|4|3|
|EXP37-C|Call functions with the correct number and type of arguments|Medium|Probable|High|4|3|
|EXP39-C|Do not access a variable through a pointer of an incompatible type|Medium|Unlikely|High|2|3|
|EXP40-C|Do not modify constant objects|Low|Unlikely|Medium|2|3|
|EXP42-C|Do not compare padding data|Medium|Probable|Medium|8|2|
|EXP43-C|Avoid undefined behavior when using restrict-qualified pointers|Medium|Probable|High|4|3|
|EXP44-C|Do not rely on side effects in operands to sizeof, _Alignof, or _Generic|Low|Unlikely|Low|3|3|
|EXP45-C|Do not perform assignments in selection statements|Low|Likely|Medium|6|2|
|DCL00-C|Const-qualify immutable objects|Low|Unlikely|High|1|3|
|DCL01-C|Do not reuse variable names in subscopes|Low|Unlikely|Medium|2|3|
|DCL02-C|Use visually distinct identifiers|Low|Unlikely|Medium|2|3|
|DCL03-C|Use a static assertion to test the value of a constant expression|Low|Unlikely|High|1|3|
|DCL04-C|Do not declare more than one variable per declaration|Low|Unlikely|Low|3|3|
|DCL05-C|Use typedefs of non-pointer types only|Low|Unlikely|Medium|2|3|
|DCL06-C|Use meaningful symbolic constants to represent literal values|Low|Unlikely|Medium|2|3|
|DCL07-C|Include the appropriate type information in function declarators|Low|Unlikely|Low|3|3|
|DCL08-C|Properly encode relationships in constant definitions|Low|Unlikely|High|1|3|
|DCL09-C|Declare functions that return errno with a return type of errno_t|Low|Unlikely|Low|3|3|
|DCL10-C|Maintain the contract between the writer and caller of variadic functions|High|Probable|High|6|2|
|DCL11-C|Understand the type issues associated with variadic functions|High|Probable|High|6|2|
|DCL12-C|Implement abstract data types using opaque types|Low|Unlikely|High|1|3|
|DCL13-C|Declare function parameters that are pointers to values not changed by the function as const|Low|Unlikely|Low|3|3|
|DCL15-C|Declare file-scope objects or functions that do not need external linkage as static|Low|Unlikely|Low|3|3|
|DCL16-C|Use &quot;L,&quot; not &quot;l,&quot; to indicate a long value|Low|Unlikely|Low|3|3|
|DCL17-C|Beware of miscompiled volatile-qualified variables|Medium|Probable|High|4|3|
|DCL18-C|Do not begin integer constants with 0 when specifying a decimal value|Low|Unlikely|Low|3|3|
|DCL19-C|Minimize the scope of variables and functions|Low|Unlikely|Medium|2|3|
|DCL20-C|Explicitly specify void when a function accepts no arguments|Medium|Probable|Low|12|1|
|DCL21-C|Understand the storage of compound literals|Low|Unlikely|Medium|2|3|
|DCL22-C|Use volatile for data that cannot be cached|Low|Probable|High|2|3|
|DCL23-C|Guarantee that mutually visible identifiers are unique|Medium|Unlikely|Low|6|2|
|DCL30-C|Declare objects with appropriate storage durations|High|Probable|High|6|2|
|DCL31-C|Declare identifiers before using them|Low|Unlikely|Low|3|3|
|DCL36-C|Do not declare an identifier with conflicting linkage classifications|Medium|Probable|Medium|8|2|
|DCL37-C|Do not declare or define a reserved identifier|Low|Unlikely|Low|3|3|
|DCL38-C|Use the correct syntax when declaring a flexible array member|Low|Unlikely|Low|3|3|
|DCL39-C|Avoid information leakage in structure padding|Low|Unlikely|High|1|3|
|DCL40-C|Do not create incompatible declarations of the same function or object|Low|Unlikely|Medium|2|3|
|DCL41-C|Do not declare variables inside a switch statement before the first case label|Medium|Unlikely|Medium|4|3|
|PRE00-C|Prefer inline or static functions to function-like macros|Medium|Unlikely|Medium|4|3|
|PRE01-C|Use parentheses within macros around parameter names|Medium|Probable|Low|12|1|
|PRE02-C|Macro replacement lists should be parenthesized|Medium|Probable|Low|12|1|
|PRE03-C|Prefer typedefs to defines for encoding types|Low|Unlikely|Medium|2|3|
|PRE04-C|Do not reuse a standard header file name|Low|Unlikely|Medium|2|3|
|PRE05-C|Understand macro replacement when concatenating tokens or performing stringification|Low|Unlikely|Medium|2|3|
|PRE06-C|Enclose header files in an inclusion guard|Low|Unlikely|Low|3|3|
|PRE07-C|Avoid using repeated question marks|Low|Unlikely|Medium|2|3|
|PRE08-C|Guarantee that header file names are unique|Low|Unlikely|Medium|2|3|
|PRE09-C|Do not replace secure functions with deprecated or obsolescent functions|High|Likely|Medium|18|1|
|PRE10-C|Wrap multistatement macros in a do-while loop|Medium|Probable|Low|12|1|
|PRE11-C|Do not conclude macro definitions with a semicolon|Medium|Probable|Low|12|1|
|PRE12-C|Do not define unsafe macros|Low|Probable|Low|6|2|
|PRE13-C|Use the Standard predefined macros to test for versions and features.|Low|Probable|Low|6|2|
|PRE30-C|Do not create a universal character name through concatenation|Low|Unlikely|Medium|2|3|
|PRE31-C|Avoid side effects in arguments to unsafe macros|Low|Unlikely|Low|3|3|
|PRE32-C|Do not use preprocessor directives in invocations of function-like macros|Low|Unlikely|Medium|2|3|
